<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://beta.quasar-framework.org/2016/09/19/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Working On The First Release]]></title>
      <url>http://beta.quasar-framework.org/2015/10/02/2015-10-02-Working-On-The-First-Release/</url>
      <content type="html"></content>
    </entry>
    
  
  
    
    <entry>
      <title></title>
      <url>http://beta.quasar-framework.org/support-quasar-framework.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title></title>
      <url>http://beta.quasar-framework.org/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title></title>
      <url>http://beta.quasar-framework.org/quasar-play-privacy-policy.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title></title>
      <url>http://beta.quasar-framework.org/blog/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[Action Sheet]]></title>
      <url>http://beta.quasar-framework.org/components/action-sheet.html</url>
      <content type="html"><![CDATA[<p>Action Sheets slide up from the bottom edge of the device screen, and display a set of options with the ability to confirm or cancel an action. Action Sheets can sometimes be used as an alternative to menus, however, they should not be used for navigation.</p>
<p>The Action Sheet always appears above any other components on the page, and must be dismissed in order to interact with the underlying content. When it is triggered, the rest of the page darkens to give more focus to the Action Sheet options.</p>
<input type="hidden" data-fullpage-demo="popups/action-sheet">

<blockquote>
<p>Action Sheets can be displayed as a List or as a gallery, with icons or with avatars.</p>
</blockquote>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; ActionSheet &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">(<span class="built_in">Object</span> <span class="keyword">with</span> <span class="string">`close`</span> method) ActionSheet.create(configObj)</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; ActionSheet &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">ActionSheet.create(&#123;</div><div class="line">  title: <span class="string">'Article Actions'</span>,</div><div class="line"></div><div class="line">  <span class="comment">// specify ONLY IF you want gallery mode:</span></div><div class="line">  gallery: <span class="literal">true</span>,</div><div class="line"></div><div class="line">  actions: [</div><div class="line">    &#123;</div><div class="line">      label: <span class="string">'Delete'</span>,</div><div class="line"></div><div class="line">      <span class="comment">// Choose one of the following two:</span></div><div class="line">      icon: <span class="string">'delete'</span>, <span class="comment">// specify ONLY IF using icon</span></div><div class="line">      avatar: <span class="string">'assets/some-avatar.png'</span>, <span class="comment">// specify ONLY IF using avatar</span></div><div class="line"></div><div class="line">      handler: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Deleted Article'</span>)</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    ...</div><div class="line">  ],</div><div class="line"></div><div class="line">  <span class="comment">// optional:</span></div><div class="line">  dismiss: &#123;</div><div class="line">    <span class="comment">// label is used only for iOS theme</span></div><div class="line">    label: <span class="string">'Cancel'</span>,</div><div class="line"></div><div class="line">    <span class="comment">// tell what to do when Action Sheet</span></div><div class="line">    <span class="comment">// is dismised (doesn't trigger when</span></div><div class="line">    <span class="comment">// any of the actions above are clicked/tapped)</span></div><div class="line">    handler: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="comment">// console.log('Cancelled...')</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>IMPORTANT</strong><br><br>When user hits the browser/phone/tablet back button, the Action Sheet will get closed automatically. This behavior is disabled when running your App within an iframe though.<br><br>Also, when on a browser, hitting the &lt;ESCAPE&gt; key also closes the Action Sheet.</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mobile Addressbar Coloring]]></title>
      <url>http://beta.quasar-framework.org/components/addressbar-color.html</url>
      <content type="html"><![CDATA[<p>Newer mobile browsers have the ability to specify a color for the addressbar, like in the example below.</p>
<blockquote>
<p><strong>Note 1.</strong> There isn’t yet a Web standard for this so it won’t work for all mobile browsers.<br><strong>Note 2.</strong> This applies when building a website only. For coloring top bar on a mobile app (built with Cordova wrapper), please refer to <a href="https://cordova.apache.org/plugins/" target="_blank" rel="external">Cordova plugins</a>.</p>
</blockquote>
<p><img src="/images/mobile-address-bar-colors.jpg" alt="Mobile Addressbar Coloring" title="Mobile Addressbar Coloring"></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>It’s best to set this in your <code>src/main.js</code>, but it can go anywhere:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; AddressbarColor &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line">AddressbarColor.set(<span class="string">'#a2e3fa'</span>)</div></pre></td></tr></table></figure></p>
<p>What this does it that it inject some <code>&lt;meta&gt;</code> tags into your <code>index.html</code> at runtime. This means, as an example, that you can dynamically change this color during runtime multiple times, based on the page the user is on (by calling <code>set</code> method on <code>created()</code> lifecycle hook on the respective pages).</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ajax Bar]]></title>
      <url>http://beta.quasar-framework.org/components/ajax-bar.html</url>
      <content type="html"><![CDATA[<p>Ajax Bar is a component which displays a loading bar (like Youtube) whenever an Ajax call (regardless of Ajax library used) is in progress. It can be manually triggered as well.</p>
<input type="hidden" data-fullpage-demo="progress/ajax-bar">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>As long as this component is rendered by Vue it will capture all Ajax calls.<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-ajax-bar</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<p>Best way is to place it in your App root component (<code>App.vue</code> if you are using the default Quasar template):<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"q-app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-ajax-bar</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>IMPORTANT</strong><br>Do not simultaneously use more than one Ajax Bar component in your App.</p>
</blockquote>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Default Value</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>position</code></td>
<td>String</td>
<td>‘top’</td>
<td>Where to place the loading bar: ‘top’, ‘bottom’, ‘left’ or ‘right’.</td>
</tr>
<tr>
<td><code>size</code></td>
<td>String</td>
<td>‘4px’</td>
<td>Thickness of loading bar.</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>‘red’</td>
<td>One from <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>speed</code></td>
<td>Number</td>
<td>250</td>
<td>How fast should loading bar update its value (in milliseconds).</td>
</tr>
<tr>
<td><code>delay</code></td>
<td>Number</td>
<td>1000</td>
<td>How much should loading bar wait before showing loading bar after it’s triggered (in milliseconds).</td>
</tr>
<tr>
<td><code>reverse</code></td>
<td>Boolean</td>
<td><code>false</code></td>
<td>Reverse direction of loading bar.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Methods"><a href="#Vue-Methods" class="headerlink" title="Vue Methods"></a>Vue Methods</h2><p>Only if you want to also trigger it manually. Ajax calls trigger these methods automatically.</p>
<table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>start()</code></td>
<td>Trigger loading bar.</td>
</tr>
<tr>
<td><code>stop()</code></td>
<td>Notify one event has finished.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Vue Event</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@start</code></td>
<td>Triggered when loading bar has been triggered to be displayed.</td>
</tr>
<tr>
<td><code>@stop</code></td>
<td>Triggered when loading bar finished its work and goes hidden.</td>
</tr>
</tbody>
</table>
<blockquote>
<p>If multiple events are captured by Ajax Bar simultaneously, <code>@start</code> and <code>@stop</code> will still be triggered only once: when loading bar starts showing up and when it goes hidden.</p>
</blockquote>
<h2 id="How-start-stop-works"><a href="#How-start-stop-works" class="headerlink" title="How start/stop works"></a>How start/stop works</h2><p>Each Ajax call makes a <code>start()</code> call when it is triggered. When it ends, it calls <code>stop()</code>. So yes, if you also manually trigger Ajax Bar you must call <code>start()</code> each time a new event is starting and <code>stop()</code> each time an event finished. Ajax Bar knows to handle multiple events simultaneously.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Alert]]></title>
      <url>http://beta.quasar-framework.org/components/alert.html</url>
      <content type="html"><![CDATA[<p>Quasar Alerts are like a mix between the Dialog and Toast components. They offer more options for appearance and control than Toasts do and they can have custom dismissal action(s) and other behaviors, similar to the dialog component. The Alert component is built however, to be more specific to alerting the users of events happening within your app. The alert will also not timeout like a toast, unless the user hits one of the Alert action buttons. The Alert can be used either as a component or as a method (so globally, even outside of Vue components, much like Toasts).</p>
<input type="hidden" data-fullpage-demo="popups/alert">

<p>Check the sibling <a href="/components/toast.html">Toast</a> too.</p>
<h2 id="Basic-Usage-as-a-Method"><a href="#Basic-Usage-as-a-Method" class="headerlink" title="Basic Usage as a Method"></a>Basic Usage as a Method</h2><p>Below is an example of a simple Alert as a method containing only a message:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Alert &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">Alert.create(&#123;html: <span class="string">'Warning, warning, Will Robinson!'</span>&#125;)</div></pre></td></tr></table></figure>
<p>You can see this alert at the top right of the demo on this page. Please notice the defaults.</p>
<ol>
<li>The alert is red.</li>
<li>The alert needs an options object with the <code>html</code> property for adding text.</li>
<li>The icon on the left is the warning icon.</li>
<li>The alert floats above all content and at top right position.</li>
<li>The alert can be dismissed.</li>
<li>There are no transitional animations, when appearing or after dismissal.</li>
</ol>
<p>Go ahead and dismiss this alert.<br>From a UI perspective, these are fairly standard expectations for the looks of a simple warning alert.<br>However, obviously not all alerts should look or even behave like this. Quasar allows us to do a good bit of customization of alerts.</p>
<h3 id="Options-as-a-Method"><a href="#Options-as-a-Method" class="headerlink" title="Options as a Method"></a>Options as a Method</h3><p>Let’s go deeper and analyze the different optional properties available for the alert component created and used as a method.</p>
<p>Here is a more involved example:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Alert &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="comment">// using some animations along `enter` and `leave` props</span></div><div class="line"><span class="comment">// so don't forget to import them too!</span></div><div class="line"><span class="comment">// Read about them in Animation &gt; Transition page</span></div><div class="line"><span class="keyword">import</span> <span class="string">'quasar-extras/animate/fadeIn.css'</span></div><div class="line"><span class="keyword">import</span> <span class="string">'quasar-extras/animate/fadeOut.css'</span></div><div class="line"></div><div class="line">Alert.create(&#123;</div><div class="line">  enter: <span class="string">'bounceInRight'</span>,</div><div class="line">  leave: <span class="string">'bounceOutRight'</span>,</div><div class="line">  color: <span class="string">'positive'</span>,</div><div class="line">  icon: <span class="string">'wifi'</span>,</div><div class="line">  html: <span class="string">`A text with your alert's awesome message`</span>,</div><div class="line">  position: <span class="string">'top-right'</span>,</div><div class="line">  actions: [</div><div class="line">    &#123;</div><div class="line">      label: <span class="string">'Snooze'</span>,</div><div class="line">      handler () &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'acting'</span>)</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      label: <span class="string">'Abort'</span>,</div><div class="line">      handler () &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'aborting'</span>)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>To see this in action, click on the “Show Alert As Method” buttons in the example app to the right.</p>
<blockquote>
<p><strong>Note</strong><br>If you do not define any actions, the alert method will automatically be dismissible i.e. there will be an “X” button available for the user to dismiss the alert.</p>
</blockquote>
<h3 id="Programmatically-Closing-Alert"><a href="#Programmatically-Closing-Alert" class="headerlink" title="Programmatically Closing Alert"></a>Programmatically Closing Alert</h3><p>Quasar Alerts are meant to be dismissed only by the user, however for exceptional cases you can do it programmatically.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">const</span> alert = Alert(&#123;...&#125;)</div><div class="line">...</div><div class="line">alert.dismiss()</div></pre></td></tr></table></figure>
<h3 id="Instantiation-Properties"><a href="#Instantiation-Properties" class="headerlink" title="Instantiation Properties"></a>Instantiation Properties</h3><p>Here are all of the properties of the Alert component, when used as a method:</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>duration</code></td>
<td>Number</td>
<td>The time in milliseconds any transition should take.</td>
</tr>
<tr>
<td><code>inline</code></td>
<td>Boolean</td>
<td>Use inline instead of taking up entire row.</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>This can be any color set up under the <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>html</code></td>
<td>String</td>
<td>HTML to display as the message text.</td>
</tr>
<tr>
<td><code>icon</code></td>
<td>String</td>
<td>Icon to use. See <a href="/components/icons.html">Icons</a>.</td>
</tr>
<tr>
<td><code>position</code></td>
<td>String</td>
<td>Controls the position of the alerts, when it is displayed. The available positions are <code>top</code>, <code>top-center</code>, <code>top-right</code>, <code>right</code>, <code>bottom-right</code>, <code>bottom</code>, <code>bottom-center</code>, <code>bottom-left</code>, <code>left</code> and <code>top-left</code></td>
</tr>
<tr>
<td><code>actions</code></td>
<td>Array of Objects</td>
<td>Place one or more buttons within the alert, like “Snooze” or “Abort”. Specify <code>label</code> (String) and <code>handler</code> (Function).</td>
</tr>
<tr>
<td><code>enter</code></td>
<td>String</td>
<td>The transition animation for displaying the alert.</td>
</tr>
<tr>
<td><code>leave</code></td>
<td>String</td>
<td>The transition animation for dismissing the alert.</td>
</tr>
<tr>
<td><code>name</code></td>
<td>String</td>
<td>A custom transition name that will override <code>enter</code> and <code>leave</code> props. Read about <code>name</code> prop of <a href="/components/transition.html">QTransition</a>.</td>
</tr>
</tbody>
</table>
<blockquote>
<p><code>enter</code>, <code>leave</code> and <code>name</code> props work same as for <a href="/components/transition.html">QTransition</a>, so it might be a good idea to get a reading on them.</p>
</blockquote>
<h2 id="Basic-Usage-as-a-Component-QAlert"><a href="#Basic-Usage-as-a-Component-QAlert" class="headerlink" title="Basic Usage as a Component (QAlert)"></a>Basic Usage as a Component (QAlert)</h2><p>Alerts can be created also as a component when you don’t need the alert to be on top of the website/app content in a fixed position, waiting to be dismissed.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- remember to also import animations! --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-alert</span></span></div><div class="line">  <span class="attr">color</span>=<span class="string">"green"</span></div><div class="line">  <span class="attr">icon</span>=<span class="string">"cloud"</span></div><div class="line">  <span class="attr">enter</span>=<span class="string">"bounceInLeft"</span></div><div class="line">  <span class="attr">leave</span>=<span class="string">"bounceOutRight"</span></div><div class="line">  <span class="attr">appear</span></div><div class="line">  <span class="attr">dismissible</span></div><div class="line">&gt;</div><div class="line">  Some cool message for your users.</div><div class="line"><span class="tag">&lt;/<span class="name">q-alert</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- no animations --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-alert</span></span></div><div class="line">  <span class="attr">color</span>=<span class="string">"positive"</span></div><div class="line">  <span class="attr">icon</span>=<span class="string">"cloud"</span></div><div class="line">  <span class="attr">:actions</span>=<span class="string">"[&#123;label: 'Snooze', handler () &#123;&#125;&#125;]"</span></div><div class="line">&gt;</div><div class="line">  Some cool message for your users.</div><div class="line"><span class="tag">&lt;/<span class="name">q-alert</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- positioned on top right corner of screen --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-alert</span></span></div><div class="line">  <span class="attr">color</span>=<span class="string">"positive"</span></div><div class="line">  <span class="attr">icon</span>=<span class="string">"cloud"</span></div><div class="line">  <span class="attr">enter</span>=<span class="string">"bounceInLeft"</span></div><div class="line">  <span class="attr">leave</span>=<span class="string">"bounceOutRight"</span></div><div class="line">  <span class="attr">position</span>=<span class="string">"top-right"</span></div><div class="line">  <span class="attr">:actions</span>=<span class="string">"[&#123;label: 'Snooze', handler () &#123;&#125;&#125;]"</span></div><div class="line">&gt;</div><div class="line">  Some cool message for your users.</div><div class="line"><span class="tag">&lt;/<span class="name">q-alert</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h3><p>Here are the available properties, when using Alert as a component:</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>This can be any color set up under the <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>position</code></td>
<td>String</td>
<td>Controls the position of the alerts, when it is displayed. The available positions are <code>top</code>, <code>top-right</code>, <code>right</code>, <code>bottom-right</code>, <code>bottom</code>, <code>bottom-left</code>, <code>left</code> and <code>top-left</code></td>
</tr>
<tr>
<td><code>icon</code></td>
<td>String</td>
<td>Icon to use. See <a href="/components/icons.html">Icons</a>.</td>
</tr>
<tr>
<td><code>actions</code></td>
<td>Array of Objects</td>
<td>Place one or more buttons within the alert, like “Snooze” or “Abort”. Each Object from Array must have <code>label</code> (String) and <code>handler</code> (Function) props.</td>
</tr>
<tr>
<td><code>dismissible</code></td>
<td>boolean</td>
<td>When used, the “X” button is added to the right to allow the dismissal of the alert.</td>
</tr>
<tr>
<td><code>enter</code></td>
<td>String</td>
<td>The transition animation for displaying the alert.</td>
</tr>
<tr>
<td><code>leave</code></td>
<td>String</td>
<td>The transition animation for dismissing the alert.</td>
</tr>
<tr>
<td><code>name</code></td>
<td>String</td>
<td>A custom transition name that will override <code>enter</code> and <code>leave</code> props. Read about <code>name</code> prop of <a href="/components/transition.html">QTransition</a>.</td>
</tr>
</tbody>
</table>
<blockquote>
<p>The Alert component makes use of the QTransition component which in turn is a wrapper over Vue’s <code>&lt;transition&gt;</code> component, so for the <code>appear</code>, <code>enter</code>, <code>leave</code> and <code>name</code> props please refer to <a href="https://vuejs.org/v2/guide/transitions.html" target="_blank" rel="external">Vue documentation</a> and <a href="/components/transition.html">QTransition</a>.</p>
</blockquote>
<p>Alert also supports the <code>v-model</code> directive to receive a Boolean as a property. This determines the visibility of the QAlert (<code>true</code> means it’s visible).</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Animation CSS Helper Classes]]></title>
      <url>http://beta.quasar-framework.org/components/animation-css-helper-classes.html</url>
      <content type="html"><![CDATA[<p>Add these CSS classes to the DOM element / component you want the effect on.<br>These are very basic effects so for advanced ones check <a href="/components/transition.html">Transition</a>, <a href="/components/slide-transition.html">Slide Transition</a> or use <a href="/components/js-animations.html">JS Animations</a>.</p>
<table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>animate-spin</code></td>
<td>Apply a continuous spin/rotation to the DOM element</td>
</tr>
<tr>
<td><code>animate-spin-reverse</code></td>
<td>Apply a continuous spin/rotation (opposite direction to <code>animate-spin</code>) to the DOM element</td>
</tr>
<tr>
<td><code>animate-blink</code></td>
<td>Apply a blinking effect to the DOM element</td>
</tr>
<tr>
<td><code>animate-pop</code></td>
<td>Apply a pop-in effect to the DOM element</td>
</tr>
<tr>
<td><code>animate-scale</code></td>
<td>Apply a scale-in effect to the DOM element</td>
</tr>
<tr>
<td><code>animate-fade</code></td>
<td>Apply a fade-in effect to the DOM element</td>
</tr>
<tr>
<td><code>animate-bounce</code></td>
<td>Apply a continuous bouncing effect to the DOM element</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Fullscreen]]></title>
      <url>http://beta.quasar-framework.org/components/app-fullscreen.html</url>
      <content type="html"><![CDATA[<p>There are times when you want your website or App to run in fullscreen.<br>Quasar makes it easy by wrapping the Web <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API" target="_blank" rel="external">Fullscreen API</a>.</p>
<p>Please note that the behavior is different depending on the platform the code is running on, due to the fact that there isn’t a fixed Web standard for Web Fullscreen API yet.</p>
<input type="hidden" data-external-demo="web-api-wrappers/app-fullscreen">

<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; AppFullscreen &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="comment">// Determining if website is in fullscreen mode:</span></div><div class="line">(<span class="built_in">Boolean</span>) AppFullscreen.isActive()</div><div class="line"></div><div class="line"><span class="comment">// Requesting fullscreen mode:</span></div><div class="line">AppFullscreen.request()</div><div class="line"></div><div class="line"><span class="comment">// Exiting fullscreen mode:</span></div><div class="line">AppFullscreen.exit()</div><div class="line"></div><div class="line"><span class="comment">// Toggle fullscreen mode:</span></div><div class="line">AppFullscreen.toggle()</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[App Visibility]]></title>
      <url>http://beta.quasar-framework.org/components/app-visibility.html</url>
      <content type="html"><![CDATA[<p>Quasar makes use of the Web <a href="https://developer.mozilla.org/en-US/docs/Web/API/Page_Visibility_API" target="_blank" rel="external">Page Visibility API</a> which lets you know when a website/app is visible or in focus.</p>
<input type="hidden" data-fullpage-demo="web-api-wrappers/app-visibility">

<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; AppVisibility &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">(<span class="built_in">Boolean</span>) AppVisibility.isVisible()</div></pre></td></tr></table></figure>
<p>There is also an event triggered when focus changes (read about Quasar Global Event Bus <a href="/components/global-event-bus.html">here</a>):</p>
<table>
<thead>
<tr>
<th>Event Name</th>
<th>Parameters</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>app:visibility</td>
<td>(String) state</td>
<td>App got focus if <code>state</code> is <code>visible</code> or lost focus if <code>state</code> is <code>hidden</code></td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Button]]></title>
      <url>http://beta.quasar-framework.org/components/button.html</url>
      <content type="html"><![CDATA[<p>Quasar has a component called QBtn with is a button with a few extra useful features. For instance, it comes in two shapes: rectangle (default) and round. It also has the material ripple effect by default when building with Material theme.</p>
<input type="hidden" data-fullpage-demo="forms/button">

<p>The button component also comes with a spinner or loading effect. You would use this for times when app execution may cause a delay and you want to give the user some feedback about that delay. When used, the button will display a spinning animation as soon as the user clicks the button.</p>
<p>When not disabled or spinning, QBtn emits a <code>@click</code> event, as soon as it is clicked or tapped.</p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>Plain simple button with an icon and a label:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">icon</span>=<span class="string">"create"</span>&gt;</span>New item<span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Button with just an icon:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-btn</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"map"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>A standard round button.<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!--</span></div><div class="line">  Notice "round" specified and</div><div class="line">  self-closing tag (as we don't need to specify any</div><div class="line">  content for button -- the icon fills all available</div><div class="line">  space anyway).</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">round</span> <span class="attr">color</span>=<span class="string">"secondary"</span> <span class="attr">icon</span>=<span class="string">"card_giftcard"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Next is perfectly equivalent --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">round</span> <span class="attr">color</span>=<span class="string">"secondary"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-icon="card_giftcard"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>Note</strong><br>For round buttons, only use an icon as content, through “icon” property or QIcon component as the only child. Do not add anything else besides the icon, unless you want a Popover or Tooltip.</p>
</blockquote>
<p>Small primary button:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">icon</span>=<span class="string">"edit"</span> <span class="attr">color</span>=<span class="string">"primary"</span> <span class="attr">small</span>&gt;</span></div><div class="line">  Edit</div><div class="line"><span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Button with “loading” state (we’ll go over these in more detail in its own section later):</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Regular shaped --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">loader</span> <span class="attr">color</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"clickMethod"</span>&gt;</span></div><div class="line">  Button Label</div><div class="line"><span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Round shaped; only use icon as content --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">v-model</span>=<span class="string">"submit"</span> <span class="attr">loader</span> <span class="attr">round</span> <span class="attr">color</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"clickMethod"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-spinner-oval</span> <span class="attr">slot</span>=<span class="string">"loading"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div></pre></td></tr></table></figure>
<p>In the example above, the <code>clickMethod</code> would be a function to control the value of <code>submit</code>, which must be a Boolean.</p>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>icon</code></td>
<td>String</td>
<td>Name of the icon to use.</td>
</tr>
<tr>
<td><code>icon-right</code></td>
<td>String</td>
<td>Name of the icon to place on right side of button.</td>
</tr>
<tr>
<td><code>loader</code></td>
<td>Boolean</td>
<td>Display a spinner, if true. Can be optionally used along <code>v-model</code>. Check <a href="#Button-with-Progress">Button with Progress</a> section.</td>
</tr>
<tr>
<td><code>percentage</code></td>
<td>Number</td>
<td>Optional property for displaying a determinate progress. Use along <code>loader</code>.</td>
</tr>
<tr>
<td><code>dark-percentage</code></td>
<td>Boolean</td>
<td>Optional property for displaying a determinate progress on a light button color. Use along <code>loader</code> and <code>percentage</code>.</td>
</tr>
<tr>
<td><code>round</code></td>
<td>Boolean</td>
<td>Set true, if you want a round button.</td>
</tr>
<tr>
<td><code>outline</code></td>
<td>Boolean</td>
<td>Set true, if you want an outlined button.</td>
</tr>
<tr>
<td><code>flat</code></td>
<td>Boolean</td>
<td>Set true, if you want a flat button.</td>
</tr>
<tr>
<td><code>rounded</code></td>
<td>Boolean</td>
<td>Set true, if the square button should have rounded corners.</td>
</tr>
<tr>
<td><code>push</code></td>
<td>Boolean</td>
<td>Set true, if the button should have a push effect.</td>
</tr>
<tr>
<td><code>small</code></td>
<td>Boolean</td>
<td>Set true, if the button should be small.</td>
</tr>
<tr>
<td><code>big</code></td>
<td>Boolean</td>
<td>Set true, if the button should be big.</td>
</tr>
<tr>
<td><code>glossy</code></td>
<td>Boolean</td>
<td>Set true, if the button should be glossy.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>The button is disabled, if true. <code>@click</code> event won’t be triggered while in this state.</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>A color from <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>no-caps</code></td>
<td>Boolean</td>
<td>Set true, if you don’t want button content/label to be transformed to uppercase letter on Material Theme.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Vue Event</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@click</code></td>
<td>Triggered on button click/tap, if button is not disabled.</td>
</tr>
</tbody>
</table>
<h2 id="More-examples"><a href="#More-examples" class="headerlink" title="More examples"></a>More examples</h2><p>When adding an icon to a regular button, there are two possibilities for its position. The default position is left. Use <code>icon-right</code> property instead to position the icon to the right:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- icon will be placed on the left --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">icon</span>=<span class="string">"mail"</span> <span class="attr">color</span>=<span class="string">"primary"</span>&gt;</span></div><div class="line">  Button Label</div><div class="line"><span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- icon will be placed on the right --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">icon-right</span>=<span class="string">"mail"</span> <span class="attr">color</span>=<span class="string">"teal"</span>&gt;</span></div><div class="line">  Button Label</div><div class="line"><span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Button-Sizes"><a href="#Button-Sizes" class="headerlink" title="Button Sizes"></a>Button Sizes</h2><p>Use <code>small</code> or <code>big</code> as attributes. You don’t need to specify <code>standard</code>, because that’s the default size.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"primary"</span> <span class="attr">small</span>&gt;</span></div><div class="line">  Small Button</div><div class="line"><span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"primary"</span> <span class="attr">big</span>&gt;</span></div><div class="line">  Big Button</div><div class="line"><span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div></pre></td></tr></table></figure>
<p>You can also make use of globally available CSS helper class <code>block</code> (sets CSS <code>display</code> property to <code>block</code>) or <code>full-width</code> to expand the button.</p>
<h2 id="Button-Colors"><a href="#Button-Colors" class="headerlink" title="Button Colors"></a>Button Colors</h2><p>Use any color from the <a href="/components/color-palette.html">Quasar Color Palette</a>. Examples: <code>primary</code>, <code>orange</code>, <code>lime</code>, ‘amber-8’.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"primary"</span>&gt;</span>Primary Button<span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"amber"</span>&gt;</span>Amber Button<span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Button-Style-Types"><a href="#Button-Style-Types" class="headerlink" title="Button Style Types"></a>Button Style Types</h2><p>There are also the <code>outline</code>, <code>push</code>, <code>round</code>, <code>flat</code>, <code>rounded</code> and <code>glossy</code> props for you to use to control some design aspects of the button.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- an outlined button --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">outline</span> <span class="attr">color</span>=<span class="string">"teal"</span>&gt;</span>Outlined Button<span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- a rounded push button --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">rounded</span> <span class="attr">push</span> <span class="attr">color</span>=<span class="string">"secondary"</span>&gt;</span>Rounded Push Button<span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- a glossy button --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">glossy</span> <span class="attr">color</span>=<span class="string">"primary"</span>&gt;</span>Glossy<span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div></pre></td></tr></table></figure>
<p>If you’d like a rectangular button with just an icon and not text, you should use the QIcon component inside the button.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;q-btn&gt;</div><div class="line">  &lt;q-icon name=&quot;mail&quot; /&gt;</div><div class="line">&lt;/q-btn&gt;</div></pre></td></tr></table></figure>
<h2 id="Button-with-Progress"><a href="#Button-with-Progress" class="headerlink" title="Button with Progress"></a>Button with Progress</h2><p>Some button actions involve contacting a server, so an asynchronous response. It’s best that you inform the user about a background process taking place until the asynchronous response is ready. QBtn offers this possibility through the <code>loader</code> prop. What this property does it it’s displaying a QSpinner (by default) instead of the icon and/or label of the button. Custom loading content can also be used.</p>
<p>Here is a full example highlighting what you can do with <code>loader</code> property.<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- Notice `loader` prop --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">loader</span> @<span class="attr">click</span>=<span class="string">"simulateProgress"</span>&gt;</span></div><div class="line">    Button Label</div><div class="line">    <span class="comment">&lt;!--</span></div><div class="line">      Notice slot="loading". This is optional.</div><div class="line">      If missing, the default theme spinner will be used.</div><div class="line">    --&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"loading"</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  methods: &#123;</div><div class="line">    <span class="comment">// notice parameter "done" (Function)</span></div><div class="line">    simulateProgress (event, done) &#123;</div><div class="line">      <span class="comment">// simulate a delay, like in</span></div><div class="line">      <span class="comment">// waiting for an Ajax call</span></div><div class="line">      setTimeout(() =&gt; &#123;</div><div class="line">        <span class="comment">// delay is over, now we call</span></div><div class="line">        <span class="comment">// done() function to inform button</span></div><div class="line">        <span class="comment">// it must go to its initial state</span></div><div class="line">        done()</div><div class="line">        <span class="comment">// DON't forget to call done() otherwise</span></div><div class="line">        <span class="comment">// the button will keep on being in</span></div><div class="line">        <span class="comment">// "loading" state</span></div><div class="line">      &#125;, <span class="number">3000</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>If you’d like to add a different spinner than the default one of the theme you are building your website/app with, you can do so by slotting in the <a href="/components/spinner.html">Spinner</a> component you’d like.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">icon</span>=<span class="string">"mail"</span> <span class="attr">color</span>=<span class="string">"orange"</span> @<span class="attr">click</span>=<span class="string">"simulateProgress"</span>&gt;</span></div><div class="line">  Get Mail</div><div class="line">  <span class="tag">&lt;<span class="name">q-spinner-facebook</span> <span class="attr">slot</span>=<span class="string">"loading"</span> <span class="attr">size</span>=<span class="string">"20px"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>The “loading” slot can contain anything. It’s not reduced to text or spinners only. You can use whatever DOM elements or components you want. The end result is that while in “loading” state, the Button content will be replaced by whatever the “loading” slot contains. Also, while in this state, button gets disabled so no further click events are triggered, making your life easier to not call same button click handler while it’s already in progress.</p>
</blockquote>
<p>We’ll learn how you can use <code>loader</code> prop along with <code>v-model</code> on buttons later on this page.</p>
<h3 id="Handling-Deterministic-Progress"><a href="#Handling-Deterministic-Progress" class="headerlink" title="Handling Deterministic Progress"></a>Handling Deterministic Progress</h3><p>Should you wish, you can also display a deterministic progress within the button by using the additional “percentage” property along what you’ve learned so far about buttons with progress:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-btn</span></span></div><div class="line">    <span class="attr">:percentage</span>=<span class="string">"percentage"</span></div><div class="line">    <span class="attr">loader</span></div><div class="line">    <span class="attr">color</span>=<span class="string">"primary"</span></div><div class="line">    @<span class="attr">click</span>=<span class="string">"startComputing"</span></div><div class="line">  &gt;</div><div class="line">    Compute PI</div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"loading"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-spinner-gears</span> <span class="attr">class</span>=<span class="string">"on-left"</span> /&gt;</span></div><div class="line">      Computing...</div><div class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="comment">// remember to also import necessary</span></div><div class="line"><span class="comment">// Quasar components (not added here)</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  data () &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      percentage: <span class="number">0</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  methods: &#123;</div><div class="line">    startComputing (e, done) &#123;</div><div class="line">      <span class="keyword">this</span>.percentage = <span class="number">0</span></div><div class="line"></div><div class="line">      <span class="comment">// we simulate progress here</span></div><div class="line">      <span class="keyword">this</span>.interval = setInterval(() =&gt; &#123;</div><div class="line">        <span class="comment">// adding a random amount of percentage</span></div><div class="line">        <span class="keyword">this</span>.percentage += <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">8</span> + <span class="number">10</span>)</div><div class="line"></div><div class="line">        <span class="comment">// and when we are done...</span></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.percentage &gt;= <span class="number">100</span>) &#123;</div><div class="line">          clearInterval(<span class="keyword">this</span>.interval)</div><div class="line">          <span class="comment">// DON'T forget to call "done()" (the second param of handler)</span></div><div class="line">          done()</div><div class="line">        &#125;</div><div class="line">      &#125;, <span class="number">700</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  beforeDestroy () &#123;</div><div class="line">    <span class="comment">// we also take care of clearing interval</span></div><div class="line">    <span class="comment">// should the user navigate away before the progress has ended</span></div><div class="line">    clearInterval(<span class="keyword">this</span>.interval)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>You also got <code>dark-percentage</code> prop if your button has a light color.</p>
<h3 id="Controlling-the-Button-for-Form-Submission"><a href="#Controlling-the-Button-for-Form-Submission" class="headerlink" title="Controlling the Button for Form Submission"></a>Controlling the Button for Form Submission</h3><p>When you have a button to submit a form’s input to the server, like a “Save” button, more often than not you want to also give the user the ability to submit the form with a press of the enter key. If you would also like to give the user feedback of the saving process being in progress and to also avoid them pressing the button while saving too, you wouldd need the button to show a loading spinner and be disabled from click events. QBtn allows this behavior if configured so.</p>
<p>To control this loading feature, all you need is logic in your form, which sets the <code>v-model</code> of the button to <code>true</code>. Once it is set to <code>true</code>, the button reacts as if it had been pressed and displays the spinner. To stop the process, set the <code>v-model</code> value back to false.</p>
<p>The example below demonstrates this button control with the Enter key.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- a simple text field watching for the enter key release --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-input</span> <span class="attr">v-model</span>=<span class="string">"test"</span> @<span class="attr">keyup.enter</span>=<span class="string">"simulateSubmit"</span>&gt;</span><span class="tag">&lt;/<span class="name">q-input</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--</span></div><div class="line">      A button with v-model set to submit.</div><div class="line">      v-model scope variable must be a strict Boolean</div><div class="line">    --&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">v-model</span>=<span class="string">"submit"</span> <span class="attr">loader</span> @<span class="attr">click</span>=<span class="string">"simulateSubmit"</span>&gt;</span></div><div class="line">      Save</div><div class="line">      <span class="tag">&lt;<span class="name">q-spinner-facebook</span> <span class="attr">slot</span>=<span class="string">"loading"</span>&gt;</span><span class="tag">&lt;/<span class="name">q-spinner-facebook</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  data () &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      test: <span class="string">''</span>,</div><div class="line">      submit: <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  methods: &#123;</div><div class="line">    simulateSubmit () &#123;</div><div class="line">      <span class="comment">// if clicking/tapping on the button,</span></div><div class="line">      <span class="comment">// due to using `v-model`, "submit" will already</span></div><div class="line">      <span class="comment">// be `true`, but we also want to handle QInput triggering</span></div><div class="line">      <span class="comment">// this method, so we need to manually set `submit` to `true`</span></div><div class="line">      <span class="comment">// in this case.</span></div><div class="line">      <span class="keyword">this</span>.submit = <span class="literal">true</span></div><div class="line"></div><div class="line">      <span class="comment">// Simulating a delay here.</span></div><div class="line">      <span class="comment">// When we are done, we reset "submit"</span></div><div class="line">      <span class="comment">// Boolean to false to restore the</span></div><div class="line">      <span class="comment">// initial state.</span></div><div class="line">      setTimeout(() =&gt; &#123;</div><div class="line">        <span class="comment">// delay simulated, we are done,</span></div><div class="line">        <span class="comment">// now restoring submit to its initial state</span></div><div class="line">        <span class="keyword">this</span>.submit = <span class="literal">false</span></div><div class="line">      &#125;, <span class="number">3000</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Disabling-a-Button"><a href="#Disabling-a-Button" class="headerlink" title="Disabling a Button"></a>Disabling a Button</h2><p>To disable the button, use the <code>disable</code> prop. Along a small fade applied to the Button, the <code>@click</code> event will no longer be triggered.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"primary"</span> <span class="attr">disabled</span>&gt;</span>Primary Button<span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"amber"</span> <span class="attr">:disabled</span>=<span class="string">"booleanVar"</span>&gt;</span>Amber Button<span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Autocomplete]]></title>
      <url>http://beta.quasar-framework.org/components/autocomplete.html</url>
      <content type="html"><![CDATA[<p>The Quasar Autocomplete component binds to the parent textfield (eg. QInput, QSearch) and offers suggestions to the user, while the user is typing. The suggestions offered to the user are based on either a static list of results or on an asynchronous function call (eg. containing an Ajax request).</p>
<input type="hidden" data-fullpage-demo="forms/autocomplete">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>As long as this component is rendered by Vue, it will capture all Ajax calls.<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Binds to parent QInput --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-input</span> <span class="attr">color</span>=<span class="string">"amber"</span> <span class="attr">v-model</span>=<span class="string">"terms"</span> <span class="attr">placeholder</span>=<span class="string">"Type 'fre'"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-autocomplete</span></span></div><div class="line">    @<span class="attr">search</span>=<span class="string">"search"</span></div><div class="line">    <span class="attr">:min-characters</span>=<span class="string">"3"</span></div><div class="line">    @<span class="attr">selected</span>=<span class="string">"selected"</span></div><div class="line">  /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">q-input</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Binds to parent QSearch --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-search</span> <span class="attr">v-model</span>=<span class="string">"terms"</span> <span class="attr">placeholder</span>=<span class="string">"Start typing a country name"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-autocomplete</span> @<span class="attr">search</span>=<span class="string">"search"</span> @<span class="attr">selected</span>=<span class="string">"selected"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-search</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Adds a separator between results --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-search</span> <span class="attr">v-model</span>=<span class="string">"terms"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-autocomplete</span></span></div><div class="line">    <span class="attr">separator</span></div><div class="line">    @<span class="attr">search</span>=<span class="string">"search"</span></div><div class="line">    @<span class="attr">selected</span>=<span class="string">"selected"</span></div><div class="line">  /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">q-search</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Default Value</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>min-characters</code></td>
<td>Number</td>
<td>1</td>
<td>How many minimum characters can trigger component to suggest something?</td>
</tr>
<tr>
<td><code>max-results</code></td>
<td>Number</td>
<td>6</td>
<td>How many results can we display at a time?</td>
</tr>
<tr>
<td><code>static-data</code></td>
<td>Object</td>
<td><em>None</em></td>
<td>Use static suggestions. No need to do an Ajax call. Filtering is provided by Autocomplete component.</td>
</tr>
<tr>
<td><code>filter</code></td>
<td>Function</td>
<td>Internal implementation</td>
<td>If provided, autocomplete will perform custom filtering.</td>
</tr>
<tr>
<td><code>debounce</code></td>
<td>Number</td>
<td>500</td>
<td>Time in milliseconds, between key presses and finding new results. Good for delay, if using AJAX requests.</td>
</tr>
<tr>
<td><code>separator</code></td>
<td>Boolean</td>
<td>false</td>
<td>If set to <code>true</code>, it ads a delimeter between the values to select from.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Methods"><a href="#Vue-Methods" class="headerlink" title="Vue Methods"></a>Vue Methods</h2><p>No need to trigger these methods manually as they are invoked automatically. Only use them when your use-case is something very specific.</p>
<table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>trigger()</code></td>
<td>Trigger suggestions (parent textfield must be focused).</td>
</tr>
<tr>
<td><code>close()</code></td>
<td>Close suggestions Popover.</td>
</tr>
<tr>
<td><code>setValue()</code></td>
<td>Set textfield string to the value supplied.</td>
</tr>
<tr>
<td><code>move(offset)</code></td>
<td>Move selection cursor on suggestions popover by offset (Number, example: 3 for three selections down, -1 for one selection up).</td>
</tr>
<tr>
<td><code>setCurrentSelection()</code></td>
<td>Sets the value for the current selection.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Vue Event</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@search(terms, Function done)</code></td>
<td>Triggered by the component when a search should start and offer some results.</td>
</tr>
<tr>
<td><code>@selected(item)</code></td>
<td>Triggered when user has selected a suggestion.</td>
</tr>
<tr>
<td><code>@open</code></td>
<td>Triggered when the selections popup opens.</td>
</tr>
<tr>
<td><code>@close</code></td>
<td>Triggered when selections popup closes.</td>
</tr>
</tbody>
</table>
<p>Example for <code>search</code> event:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">search</span> (<span class="params">terms, done</span>) </span>&#123;</div><div class="line">  <span class="comment">// do something with terms, like an Ajax call for example</span></div><div class="line">  <span class="comment">// then call done(Array results)</span></div><div class="line"></div><div class="line">  <span class="comment">// DO NOT forget to call done! When no results or an error occured,</span></div><div class="line">  <span class="comment">// just call with empty array as param. Example: done([])</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Using-Static-Data"><a href="#Using-Static-Data" class="headerlink" title="Using Static Data"></a>Using Static Data</h2><p>When using static data, specify an Object (notice that it uses some properties from <a href="/components/lists-and-list-items.html">List and List Items</a> components:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// static-data</span></div><div class="line">[</div><div class="line">  <span class="comment">// Property name from array of objects below</span></div><div class="line">  <span class="comment">// that will fill input box when suggestion is selected</span></div><div class="line">  field: <span class="string">'value'</span>,</div><div class="line"></div><div class="line">  list: [</div><div class="line">    &#123;</div><div class="line">      value: <span class="string">'Romania'</span>, <span class="comment">// The value given, when selected</span></div><div class="line">      label: <span class="string">'Romania'</span>, <span class="comment">// The value displayed as main label for this suggested selection</span></div><div class="line"></div><div class="line">      sublabel: <span class="string">'Continent: Europe'</span>, <span class="comment">// optional</span></div><div class="line">      icon: <span class="string">'location_city'</span>, <span class="comment">// optional</span></div><div class="line">      stamp: <span class="string">'18 mil'</span>, <span class="comment">// optional</span></div><div class="line">      ...</div><div class="line">    &#125;,</div><div class="line">    ...</div><div class="line">  ]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>Here is the full list of properties that can be used:</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>icon</code></td>
<td>String</td>
<td>Icon on the left to use.</td>
</tr>
<tr>
<td><code>avatar</code></td>
<td>String</td>
<td>URL pointing to statics for an avatar.</td>
</tr>
<tr>
<td><code>letter</code></td>
<td>String</td>
<td>One character String.</td>
</tr>
<tr>
<td><code>image</code></td>
<td>String</td>
<td>URL pointing to statics for an image.</td>
</tr>
<tr>
<td><code>label</code></td>
<td>String</td>
<td>Main label of the selection.</td>
</tr>
<tr>
<td><code>sublabel</code></td>
<td>String</td>
<td>Sub-label of the selection.</td>
</tr>
<tr>
<td><code>labelLines</code></td>
<td>String/Number</td>
<td>Number of lines that label can expand to.</td>
</tr>
<tr>
<td><code>sublabelLines</code></td>
<td>String/Number</td>
<td>Number of lines that the sublabel can expand to.</td>
</tr>
<tr>
<td><code>inset</code></td>
<td>Boolean</td>
<td>Inset Label if no left-side is specified (no icon, avatar, letter or image).</td>
</tr>
<tr>
<td><code>rightIcon</code></td>
<td>String</td>
<td>Icon on the right to use.</td>
</tr>
<tr>
<td><code>rightAvatar</code></td>
<td>String</td>
<td>URL pointing to statics for an avatar on right side.</td>
</tr>
<tr>
<td><code>rightLetter</code></td>
<td>String</td>
<td>One character String for right side.</td>
</tr>
<tr>
<td><code>rightImage</code></td>
<td>String</td>
<td>URL pointing to statics for an image on right side.</td>
</tr>
<tr>
<td><code>stamp</code></td>
<td>String</td>
<td>Stamp to use for right side. Example: ‘10 min ago’.</td>
</tr>
</tbody>
</table>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-search</span> <span class="attr">inverted</span> <span class="attr">color</span>=<span class="string">"secondary"</span> <span class="attr">v-model</span>=<span class="string">"terms"</span> <span class="attr">placeholder</span>=<span class="string">"Featuring static data"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-autocomplete</span></span></div><div class="line">      <span class="attr">:static-data</span>=<span class="string">"&#123;field: 'value', list: countries&#125;"</span></div><div class="line">      @<span class="attr">selected</span>=<span class="string">"selected"</span></div><div class="line">    /&gt;</div><div class="line">  <span class="tag">&lt;/<span class="name">q-search</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">import</span> countries <span class="keyword">from</span> <span class="string">'countries.json'</span></div><div class="line"></div><div class="line"><span class="comment">// See above for the data format for the array of objects with required and optional data</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  data () &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      terms: <span class="string">''</span>,</div><div class="line">      countries</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Custom-Filter"><a href="#Custom-Filter" class="headerlink" title="Custom Filter"></a>Custom Filter</h2><p>To perform custom filtering like fuzzy search, provide an optional function with following signature:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-search</span> <span class="attr">v-model</span>=<span class="string">"terms"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- Provide custom filter function --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-autocomplete</span></span></div><div class="line">      <span class="attr">:filter</span>=<span class="string">"myFilter"</span></div><div class="line">      @<span class="attr">search</span>=<span class="string">"search"</span></div><div class="line">      @<span class="attr">selected</span>=<span class="string">"selected"</span></div><div class="line">    /&gt;</div><div class="line">  <span class="tag">&lt;/<span class="name">q-search</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="comment">// fuzzysearch (needle, haystack) &#123; return true|false &#125;</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  ...,</div><div class="line">  methods: &#123;</div><div class="line">    myFilter(terms, &#123; field, list &#125;) &#123;</div><div class="line">      <span class="keyword">const</span> token = terms.toLowerCase();</div><div class="line">      <span class="keyword">return</span> list.filter(item =&gt; fuzzysearch(token, item[field].toLowerCase()));</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Using-Asynchronous-Method-Ajax-call"><a href="#Using-Asynchronous-Method-Ajax-call" class="headerlink" title="Using Asynchronous Method (Ajax call?)"></a>Using Asynchronous Method (Ajax call?)</h2><p>If you’d like to call up data from the server, you may also do so with the following usage of <code>search()</code> method.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-search</span> <span class="attr">v-model</span>=<span class="string">"terms"</span> <span class="attr">placeholder</span>=<span class="string">"Start typing a country name"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-autocomplete</span> @<span class="attr">search</span>=<span class="string">"search"</span> @<span class="attr">selected</span>=<span class="string">"selected"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-search</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  ...</div><div class="line">  methods: &#123;</div><div class="line">    search: (terms, done) &#123;</div><div class="line">      <span class="comment">// make an AJAX call</span></div><div class="line">      <span class="comment">// then call done(Array results)</span></div><div class="line"></div><div class="line">      <span class="comment">// DO NOT forget to call done! When no results or an error occured,</span></div><div class="line">      <span class="comment">// just call with empty array as param. Example: done([])</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  ...</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Back to Top]]></title>
      <url>http://beta.quasar-framework.org/components/back-to-top.html</url>
      <content type="html"><![CDATA[<p>This is actually a directive and not a component. It allows to make visible any DOM elements (like buttons) which appear after a certain scroll offset. When clicked/tapped they take the user to the top of the page.</p>
<input type="hidden" data-fullpage-demo="scrolling/back-to-top">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Bare bones example --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-btn</span></span></div><div class="line">  <span class="attr">v-back-to-top</span></div><div class="line">  <span class="attr">round</span></div><div class="line">  <span class="attr">color</span>=<span class="string">"teal-5"</span></div><div class="line">  <span class="attr">class</span>=<span class="string">"fixed-bottom-right"</span></div><div class="line">  <span class="attr">style</span>=<span class="string">"margin: 0 15px 15px 0"</span></div><div class="line">&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"keyboard_arrow_up"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line">  With animation, custom scroll offset (after which button is visible)</div><div class="line">  and animation duration.</div><div class="line"></div><div class="line">  Use "animate-*" CSS classes for effects when buttons/elements</div><div class="line">  become visible. In this case, we'll use "animate-pop":</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">q-btn</span></span></div><div class="line">  <span class="attr">v-back-to-top.animate</span>=<span class="string">"&#123;offset: 500, duration: 200&#125;"</span></div><div class="line">  <span class="attr">round</span></div><div class="line">  <span class="attr">color</span>=<span class="string">"primary"</span></div><div class="line">  <span class="attr">class</span>=<span class="string">"fixed-bottom-right animate-pop"</span></div><div class="line">  <span class="attr">style</span>=<span class="string">"margin: 0 15px 15px 0"</span></div><div class="line">&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"keyboard_arrow_up"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div></pre></td></tr></table></figure>
<p>When using a <a href="/components/layout.html">Layout</a> then you can take advantage of the <a href="/components/fixed-positioning-on-layout.html">Fixed Positioning on Layout</a> component too and wrap your element with it, like this:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-fixed-position</span> <span class="attr">corner</span>=<span class="string">"top-right"</span> <span class="attr">:offset</span>=<span class="string">"[18, 18]"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-btn</span></span></div><div class="line">    <span class="attr">v-back-to-top</span></div><div class="line">    <span class="attr">round</span></div><div class="line">    <span class="attr">color</span>=<span class="string">"primary"</span></div><div class="line">    @<span class="attr">click</span>=<span class="string">"alert"</span></div><div class="line">    <span class="attr">icon</span>=<span class="string">"keyboard_arrow_up"</span></div><div class="line">  /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">q-fixed-position</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Vue-Modifiers"><a href="#Vue-Modifiers" class="headerlink" title="Vue Modifiers"></a>Vue Modifiers</h2><table>
<thead>
<tr>
<th>Vue Modifier</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>animate</code></td>
<td>Adds scrolling animation</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Binding-Value"><a href="#Vue-Binding-Value" class="headerlink" title="Vue Binding Value"></a>Vue Binding Value</h2><p>You can use the binding value in 3 forms:</p>
<ol>
<li><strong>No value</strong>. Defaults will apply.</li>
<li><strong>As a Number</strong>. This will be the scroll offset after which DOM element will be made visible.</li>
<li><strong>As an Object</strong> with <code>offset</code> and/or <code>duration</code> as props. Duration is ignored if <code>animate</code> modifier is not used.</li>
</ol>
<h2 id="Determining-Scrolling-Container"><a href="#Determining-Scrolling-Container" class="headerlink" title="Determining Scrolling Container"></a>Determining Scrolling Container</h2><p>Please read <a href="/components/scroll-observable.html#Determining-Scrolling-Container">here</a> about how Quasar determines the container to attach scrolling events to.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Breadcrumbs]]></title>
      <url>http://beta.quasar-framework.org/components/breadcrumb.html</url>
      <content type="html"><![CDATA[<p>Quasar Breadcrumbs is a graphical control element used as a navigational aid in UI. It allows users to keep track of their locations within programs, documents, or websites.</p>
<p>This component only has CSS code, so you just have to follow the HTML structure in your templates for it.</p>
<input type="hidden" data-fullpage-demo="navigation/breadcrumb">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"breadcrumb"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"home"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"mail"</span> /&gt;</span> Quasar</div><div class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"cloud"</span> /&gt;</span> Breadcrumb</div><div class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Button with Progress]]></title>
      <url>http://beta.quasar-framework.org/components/buttons-with-progress.html</url>
      <content type="html"><![CDATA[<p>The Quasar button component also comes with a spinner or loading effect. You would use this for times when app execution may cause a delay and you want to give the user some feedback about that delay. When used, the button will display a spinning animation as soon as the user clicks the button.</p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">loader</span> <span class="attr">color</span>=<span class="string">"orange"</span> @<span class="attr">click</span>=<span class="string">"simulateProgress"</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div></pre></td></tr></table></figure>
<p>You’ll notice, you need to work with a method on the <code>@click</code> event, in order to control the actions requiring the progress indication. </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">methods: &#123;</div><div class="line">  simulateProgress (e, done) &#123;</div><div class="line">    <span class="keyword">this</span>.done.push(done)</div><div class="line">  &#125;,</div><div class="line">  stopProgress () &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.done.length) &#123;</div><div class="line">      <span class="keyword">this</span>.done.forEach(d =&gt; d())</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>.done = []</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The <code>stopProgress()</code> method above shows how to stop the progress.</p>
<p><strong>NOTE</strong><br>While the progress effect is showing, the button’s <code>click</code> event is disabled and the disabled effect is turned on automatically. The ripple effect of clicking the button is, however, still working. </p>
<h3 id="Custom-Spinner"><a href="#Custom-Spinner" class="headerlink" title="Custom Spinner"></a>Custom Spinner</h3><p>If you’d like to add a different spinner than the default, you can do so by slotting in the spinner component you’d like.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">icon</span>=<span class="string">"mail"</span> <span class="attr">color</span>=<span class="string">"orange"</span> @<span class="attr">click</span>=<span class="string">"simulateProgress"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-spinner-facebook</span> <span class="attr">slot</span>=<span class="string">"loading"</span> <span class="attr">size</span>=<span class="string">"20"</span> /&gt;</span></div><div class="line">  Get Mail</div><div class="line"><span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div></pre></td></tr></table></figure>
<p><a href="components/spinners.html">See the q-spinner section</a> of the documentation for more details.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Cards]]></title>
      <url>http://beta.quasar-framework.org/components/card.html</url>
      <content type="html"><![CDATA[<p>Quasar Cards are a great way to display important pieces of content, and are quickly emerging as a core design pattern for Apps. They’re a great way to contain and organize information, while also setting up predictable expectations for the user. With so much content to display at once, and often so little screen real-estate, Cards have fast become the design pattern of choice for many companies, including the likes of Google and Twitter.</p>
<p>Quasar Cards are a collection of components that you can use, based on the needs. It’s all about being creative. Experiment with different Web Components by embedding them in Card components to create awesome results.</p>
<input type="hidden" data-fullpage-demo="grouping/card">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>Familiarize yourself with Card components with the examples below. The only requirement is that QCard needs to wrap all the other ones. Everything else is optional and can be inserted into your template anywhere as long as they are direct children of QCard.</p>
<p>Following are Vue properties of QCard component:</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>square</code></td>
<td>Boolean</td>
<td>Squared borders instead of round ones.</td>
</tr>
<tr>
<td><code>flat</code></td>
<td>Boolean</td>
<td>Remove shadow.</td>
</tr>
<tr>
<td><code>inline</code></td>
<td>Boolean</td>
<td>Make it inline. Also set a CSS width to work. Take a look at Grid example on the “More Examples” section.</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>One color from <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
</tbody>
</table>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- An basic example --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-card</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-card-title</span>&gt;</span></div><div class="line">    Card Title</div><div class="line">  <span class="tag">&lt;/<span class="name">q-card-title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-card-separator</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-card-main</span>&gt;</span></div><div class="line">    Card Content</div><div class="line">  <span class="tag">&lt;/<span class="name">q-card-main</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-card</span>&gt;</span></div></pre></td></tr></table></figure>
<p>A more complex example:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-card</span> <span class="attr">inline</span> <span class="attr">style</span>=<span class="string">"width: 500px"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-card-media</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"~assets/donuts.png"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-card-media</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-card-title</span>&gt;</span></div><div class="line">    Cafe Basilico</div><div class="line">    <span class="tag">&lt;<span class="name">q-rating</span> <span class="attr">slot</span>=<span class="string">"subtitle"</span> <span class="attr">v-model</span>=<span class="string">"stars"</span> <span class="attr">:max</span>=<span class="string">"5"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"right"</span> <span class="attr">class</span>=<span class="string">"row items-center"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"place"</span> /&gt;</span> 250 ft</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-card-title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-card-main</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>$・Italian, Cafe<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-faded"</span>&gt;</span>Small plates, salads &amp; sandwiches in an intimate setting.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-card-main</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-card-separator</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-card-actions</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">flat</span> <span class="attr">round</span> <span class="attr">small</span>&gt;</span><span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"event"</span> /&gt;</span><span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">flat</span>&gt;</span>5:30PM<span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">flat</span>&gt;</span>7:30PM<span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">flat</span>&gt;</span>9:00PM<span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">flat</span> <span class="attr">color</span>=<span class="string">"primary"</span>&gt;</span>Reserve<span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-card-actions</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-card</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="Card-Title-QCardTitle"><a href="#Card-Title-QCardTitle" class="headerlink" title="Card Title (QCardTitle)"></a>Card Title (QCardTitle)</h3><p>QCardTitle has three main areas (all are optional): title, subtitle (“subtitle” slot) and right side (“right” slot).</p>
<p>Note that you can set title and subtitle as overlay on an image or video through a QCardMedia component too (see QCardMedia section).</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-card-title</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!--</span></div><div class="line">    Optional. Anything that goes here without specifying "slot"</div><div class="line">    is considered the main title</div><div class="line">  --&gt;</div><div class="line">  Title</div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- Optional. Adding the subtitle. Notice slot="subtitle" --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"subtitle"</span>&gt;</span>Subtitle<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!--</span></div><div class="line">    Optional. Adding something on the right side,</div><div class="line">    like an icon triggering a Popover with a menu.</div><div class="line">    Notice the slot="right"</div><div class="line">  --&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">slot</span>=<span class="string">"right"</span> <span class="attr">name</span>=<span class="string">"more_vert"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-popover</span> <span class="attr">ref</span>=<span class="string">"popover"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-list</span> <span class="attr">link</span> <span class="attr">class</span>=<span class="string">"no-border"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">q-item</span> @<span class="attr">click</span>=<span class="string">"$refs.popover.close()"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Remove Card"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">q-item</span> @<span class="attr">click</span>=<span class="string">"$refs.popover.close()"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Send Feedback"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">q-item</span> @<span class="attr">click</span>=<span class="string">"$refs.popover.close()"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Share"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-popover</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-icon</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-card-title</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Card-Main-Content-QCardMain"><a href="#Card-Main-Content-QCardMain" class="headerlink" title="Card Main Content (QCardMain)"></a>Card Main Content (QCardMain)</h3><p>QCardMain defines an area containing the main Card content, like description, details or anything you need outside of the other Card component’s purpose.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-card-main</span>&gt;</span></div><div class="line">  Card main content.</div><div class="line"><span class="tag">&lt;/<span class="name">q-card-main</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">q-card-main</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>$・Italian, Cafe<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-faded"</span>&gt;</span></div><div class="line">    Small plates, salads &amp; sandwiches in an intimate setting.</div><div class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-card-main</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Card-Actions-QCardActions"><a href="#Card-Actions-QCardActions" class="headerlink" title="Card Actions (QCardActions)"></a>Card Actions (QCardActions)</h3><p>Cards can have some actions (buttons) attached to them.</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>vertical</code></td>
<td>Boolean</td>
<td>Stack actions vertically</td>
</tr>
<tr>
<td><code>align</code></td>
<td>String</td>
<td>One of ‘start’, ‘center’, ‘end’, ‘around’ which aligns buttons in respect to the actions container</td>
</tr>
</tbody>
</table>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Horizontal actions --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-card-actions</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!--</span></div><div class="line">    Define the buttons to your liking,</div><div class="line">    these are just examples</div><div class="line">  --&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">flat</span> <span class="attr">round</span> <span class="attr">small</span>&gt;</span><span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"event"</span> /&gt;</span><span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">flat</span>&gt;</span>5:30PM<span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">flat</span>&gt;</span>7:30PM<span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">flat</span>&gt;</span>9:00PM<span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">flat</span> <span class="attr">color</span>=<span class="string">"primary"</span>&gt;</span>Reserve<span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-card-actions</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Vertical actions --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-card-actions</span> <span class="attr">vertical</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">flat</span>&gt;</span>Action 1<span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">flat</span>&gt;</span>Action 2<span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-card-actions</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Card-Media-QCardMedia"><a href="#Card-Media-QCardMedia" class="headerlink" title="Card Media (QCardMedia)"></a>Card Media (QCardMedia)</h3><p>Cards can also contain media elements: images, videos (through <a href="/components/video-embedding.html">QVideo</a>) or a parallax (through <a href="/components/parallax.html">QParallax</a>). This can be done through QCardMedia component, which supports an optional overlay too (for things like title and/or subtitle).</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>overlay-position</code></td>
<td>String</td>
<td>One of ‘top’, ‘bottom’ or ‘full’ which sets the position of overlay on top of media element.</td>
</tr>
</tbody>
</table>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Displaying an image --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-card-media</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"~assets/some-image.jpg"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-card-media</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Display a video (with help of QVideo component) --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-card-media</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-video</span> <span class="attr">src</span>=<span class="string">"https://www.youtube.com/embed/k3_tw44QsZQ?rel=0"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-card-media</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Displaying a Parallax (with help of QParallax) --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-card-media</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-parallax</span> <span class="attr">:src</span>=<span class="string">"'statics/parallax1.jpg'"</span> <span class="attr">:height</span>=<span class="string">"150"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"loading"</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-parallax</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-card-media</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Now let’s see how we can add overlays too (through “overlay” slot):<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-card-media</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"~assets/mountains.jpg"</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- Notice the slot="overlay" --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-card-title</span> <span class="attr">slot</span>=<span class="string">"overlay"</span>&gt;</span></div><div class="line">    Title</div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"subtitle"</span>&gt;</span>Subtitle<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-card-title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-card-media</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line">  Overlay at top of media elements.</div><div class="line">  Notice overlay-position="top"</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">q-card-media</span> <span class="attr">overlay-position</span>=<span class="string">"top"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"~assets/mountains.jpg"</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- Notice the slot="overlay" --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-card-title</span> <span class="attr">slot</span>=<span class="string">"overlay"</span>&gt;</span></div><div class="line">    Title</div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"subtitle"</span>&gt;</span>Subtitle<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-card-title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-card-media</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line">  Overlay on full area of media elements</div><div class="line">  Notice overlay-position="full"</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">q-card-media</span> <span class="attr">overlay-position</span>=<span class="string">"full"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"~assets/mountains.jpg"</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- Notice the slot="overlay" --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-card-title</span> <span class="attr">slot</span>=<span class="string">"overlay"</span>&gt;</span></div><div class="line">    Title</div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"subtitle"</span>&gt;</span>Subtitle<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-card-title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-card-media</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="Card-Inner-Separator"><a href="#Card-Inner-Separator" class="headerlink" title="Card Inner Separator"></a>Card Inner Separator</h3><p>You can choose to add a separator between Card components, which is basically a horizontal thin line, by adding QCardSeparator:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-card</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-card-title</span>&gt;</span></div><div class="line">    ...</div><div class="line">  <span class="tag">&lt;/<span class="name">q-card-title</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- Here is the separator --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-card-separator</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">q-card-actions</span>&gt;</span></div><div class="line">    ...</div><div class="line">  <span class="tag">&lt;/<span class="name">q-card-actions</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-card</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Some-More-Examples"><a href="#Some-More-Examples" class="headerlink" title="Some More Examples"></a>Some More Examples</h2><h3 id="Coloring-Cards"><a href="#Coloring-Cards" class="headerlink" title="Coloring Cards"></a>Coloring Cards</h3><p>Use colors from <a href="/components/color-palette.html">Quasar Color Palette</a> to set a color for your Cards.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-card</span> <span class="attr">color</span>=<span class="string">"primary"</span>&gt;</span></div><div class="line">  ...</div><div class="line"><span class="tag">&lt;/<span class="name">q-card</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">q-card</span> <span class="attr">color</span>=<span class="string">"amber-8"</span>&gt;</span></div><div class="line">  ...</div><div class="line"><span class="tag">&lt;/<span class="name">q-card</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Lists-on-Cards"><a href="#Lists-on-Cards" class="headerlink" title="Lists on Cards"></a>Lists on Cards</h3><p>Place a QList with its QItems at root of your QCard, like this:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-card</span>&gt;</span></div><div class="line">  ...</div><div class="line">  <span class="tag">&lt;<span class="name">q-list</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-side</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">color</span>=<span class="string">"primary"</span> <span class="attr">icon</span>=<span class="string">"local bar"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Bar XYZ<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span>Have a drink.<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-side</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">color</span>=<span class="string">"red"</span> <span class="attr">icon</span>=<span class="string">"local gas station"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Gas Station<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span>Fill your gas tank.<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-side</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">color</span>=<span class="string">"amber"</span> <span class="attr">icon</span>=<span class="string">"local movies"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Cinema XYZ<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span>Watch a movie.<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></div><div class="line">  ...</div><div class="line"><span class="tag">&lt;/<span class="name">q-card</span>&gt;</span></div></pre></td></tr></table></figure>
<p>There’s also the possibility to create a nice header for your Cards with an image / avatar, a person name and some quick details. In this example, we skip using QCardList:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-card</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">avatar</span>=<span class="string">"/statics/boy-avatar.png"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span>Subhead<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-card</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Making-a-Grid-of-Cards"><a href="#Making-a-Grid-of-Cards" class="headerlink" title="Making a Grid of Cards"></a>Making a Grid of Cards</h3><p>In order to make a grid of Cards you need to use the <code>inline</code> property of QCard component and set a width for your Cards.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!--</span></div><div class="line">    In this example every card has a "style" tag with a width.</div><div class="line">    Consider defining a CSS class instead to ease the template syntax.</div><div class="line">  --&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">q-card</span> <span class="attr">inline</span> <span class="attr">style</span>=<span class="string">"width: 300px"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">q-card</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-card</span> <span class="attr">inline</span> <span class="attr">style</span>=<span class="string">"width: 300px"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">q-card</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-card</span> <span class="attr">inline</span> <span class="attr">style</span>=<span class="string">"width: 300px"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">q-card</span>&gt;</span></div><div class="line">  ...</div><div class="line">  <span class="tag">&lt;<span class="name">q-card</span> <span class="attr">inline</span> <span class="attr">style</span>=<span class="string">"width: 300px"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">q-card</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Card-with-Collapsibles"><a href="#Card-with-Collapsibles" class="headerlink" title="Card with Collapsibles"></a>Card with Collapsibles</h3><p>Since Collapsibles are List items too, it makes sense to use a QList component to encapsulate them. Also, imagine a Card with Collapsibles containing Cards. Inception :)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-card</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-card-title</span>&gt;</span></div><div class="line">    Card with Collapsible List</div><div class="line">  <span class="tag">&lt;/<span class="name">q-card-title</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">q-card-separator</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">q-list</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-collapsible</span> <span class="attr">icon</span>=<span class="string">"explore"</span> <span class="attr">label</span>=<span class="string">"First"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        Lorem ipsum dolor sit amet...</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-collapsible</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">q-collapsible</span> <span class="attr">icon</span>=<span class="string">"perm_identity"</span> <span class="attr">label</span>=<span class="string">"Second"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        Lorem ipsum dolor sit amet...</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-collapsible</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">q-collapsible</span> <span class="attr">icon</span>=<span class="string">"shopping_cart"</span> <span class="attr">label</span>=<span class="string">"Third"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        Lorem ipsum dolor sit amet...</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-collapsible</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-card</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Carousel]]></title>
      <url>http://beta.quasar-framework.org/components/carousel.html</url>
      <content type="html"><![CDATA[<p>Quasar Carousel is a Vue Component which you can use to display more information with less real estate, using slides.</p>
<input type="hidden" data-fullpage-demo="grouping/carousel">

<p>The Carousel height is determined by the slide with biggest height.</p>
<h2 id="Basic-Carousel"><a href="#Basic-Carousel" class="headerlink" title="Basic Carousel"></a>Basic Carousel</h2><p>Basic Carousel. No controls. Just swipe between slides or<br>use you mouse to drag slides to left or right.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-carousel</span> <span class="attr">class</span>=<span class="string">"text-white"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"slide"</span> <span class="attr">class</span>=<span class="string">"bg-primary"</span>&gt;</span></div><div class="line">    Slide 1</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"slide"</span> <span class="attr">class</span>=<span class="string">"bg-secondary"</span>&gt;</span></div><div class="line">    Slide 2</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"slide"</span> <span class="attr">class</span>=<span class="string">"bg-tertiary"</span>&gt;</span></div><div class="line">    Slide 3</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-carousel</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>infinite</code></td>
<td>Boolean</td>
<td>Infinite slides scrolling</td>
</tr>
<tr>
<td><code>autoplay</code></td>
<td>Boolean/Number</td>
<td>Auto scrolls between slides. Works great along <code>infinite</code> prop (but <code>infinite</code> is not required). If used as a number, it represents the number of milliseconds between scrolls.</td>
</tr>
<tr>
<td><code>arrows</code></td>
<td>Boolean</td>
<td>Show arrows</td>
</tr>
<tr>
<td><code>dots</code></td>
<td>Boolean</td>
<td>Show dots at bottom</td>
</tr>
<tr>
<td><code>fullscreen</code></td>
<td>Boolean</td>
<td>Shows Fullscreen button</td>
</tr>
<tr>
<td><code>actions</code></td>
<td>Boolean</td>
<td>Show Actions slot</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Methods"><a href="#Vue-Methods" class="headerlink" title="Vue Methods"></a>Vue Methods</h2><table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>next(doneFn)</code></td>
<td>Goes to next slide.</td>
</tr>
<tr>
<td><code>previous(doneFn)</code></td>
<td>Goes to previous slide.</td>
</tr>
<tr>
<td><code>goToSlide(slideNumber, doneFn)</code></td>
<td>Go to the desired slide. <code>slideNumber</code> is 0-based.</td>
</tr>
<tr>
<td><code>toggleFullscreen()</code></td>
<td>Toggles fullscreen mode.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Vue Event</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@slide(index, direction)</code></td>
<td>Emits the index of the current slide and the direction of the slide when the transition animation finishes. Emits even if navigating to the same slide.</td>
</tr>
</tbody>
</table>
<h2 id="Carousel-with-Arrows-Dots-and-Fullscreen-Controls"><a href="#Carousel-with-Arrows-Dots-and-Fullscreen-Controls" class="headerlink" title="Carousel with Arrows, Dots and Fullscreen Controls"></a>Carousel with Arrows, Dots and Fullscreen Controls</h2><p>Carousels can contain button controls, like:</p>
<ul>
<li>Arrows so user can switch between slides if swipe actions are not enough.</li>
<li>Clickable small dots to also quickly switch between slides and give a hint on the number of current slide.</li>
<li>Fullscreen button so Carousel can be displayed over all screen real-estate.</li>
</ul>
<p>To show these controls simply add <code>arrows</code>, <code>dots</code> and/or <code>fullscreen</code> DOM node attributes.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-carousel</span> <span class="attr">arrows</span> <span class="attr">dots</span> <span class="attr">fullscreen</span> <span class="attr">class</span>=<span class="string">"text-white"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"slide"</span> <span class="attr">class</span>=<span class="string">"bg-primary"</span>&gt;</span></div><div class="line">    Slide 1</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"slide"</span> <span class="attr">class</span>=<span class="string">"bg-secondary"</span>&gt;</span></div><div class="line">    Slide 2</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-carousel</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Carousel-with-Centered-Content"><a href="#Carousel-with-Centered-Content" class="headerlink" title="Carousel with Centered Content"></a>Carousel with Centered Content</h2><p>Add CSS class <code>centered</code> to the slide that you want to center its content.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-carousel</span> <span class="attr">arrows</span> <span class="attr">dots</span> <span class="attr">class</span>=<span class="string">"text-white"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"slide"</span> <span class="attr">class</span>=<span class="string">"bg-primary centered"</span>&gt;</span></div><div class="line">    Slide 1</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"slide"</span> <span class="attr">class</span>=<span class="string">"bg-secondary centered"</span>&gt;</span></div><div class="line">    Slide 2</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-carousel</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Carousel-with-Infinite-Scrolling"><a href="#Carousel-with-Infinite-Scrolling" class="headerlink" title="Carousel with Infinite Scrolling"></a>Carousel with Infinite Scrolling</h2><p>Use <code>infinite</code> Vue prop.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-carousel</span> <span class="attr">infinite</span> <span class="attr">class</span>=<span class="string">"text-white"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"slide"</span> <span class="attr">class</span>=<span class="string">"bg-primary centered"</span>&gt;</span></div><div class="line">    Slide 1</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"slide"</span> <span class="attr">class</span>=<span class="string">"bg-secondary centered"</span>&gt;</span></div><div class="line">    Slide 2</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-carousel</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Carousel-with-Autoplay"><a href="#Carousel-with-Autoplay" class="headerlink" title="Carousel with Autoplay"></a>Carousel with Autoplay</h2><p>Use <code>autoplay</code> Vue prop. Works great with <code>infinite</code> prop too (but <code>infinite</code> is not required).</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-carousel</span> <span class="attr">autoplay</span> <span class="attr">class</span>=<span class="string">"text-white"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"slide"</span> <span class="attr">class</span>=<span class="string">"bg-primary centered"</span>&gt;</span></div><div class="line">    Slide 1</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"slide"</span> <span class="attr">class</span>=<span class="string">"bg-secondary centered"</span>&gt;</span></div><div class="line">    Slide 2</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-carousel</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Carousel-with-Custom-Actions"><a href="#Carousel-with-Custom-Actions" class="headerlink" title="Carousel with Custom Actions"></a>Carousel with Custom Actions</h2><p>Put icons on the same DOM hierarchical level as the slides.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-carousel</span> <span class="attr">arrows</span> <span class="attr">dots</span> <span class="attr">actions</span> <span class="attr">class</span>=<span class="string">"text-white"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"slide"</span> <span class="attr">class</span>=<span class="string">"bg-primary"</span>&gt;</span></div><div class="line">    Slide 1</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"slide"</span> <span class="attr">class</span>=<span class="string">"bg-secondary"</span>&gt;</span></div><div class="line">    Slide 2</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"slide"</span> <span class="attr">class</span>=<span class="string">"bg-tertiary"</span>&gt;</span></div><div class="line">    Slide 3</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">slot</span>=<span class="string">"action"</span> @<span class="attr">click</span>=<span class="string">"someMethod"</span> <span class="attr">name</span>=<span class="string">"camera_enhance"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">slot</span>=<span class="string">"action"</span> @<span class="attr">click</span>=<span class="string">"someOtherMethod"</span> <span class="attr">name</span>=<span class="string">"bookmark_border"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">slot</span>=<span class="string">"action"</span> @<span class="attr">click</span>=<span class="string">"thirdMethod"</span> <span class="attr">name</span>=<span class="string">"add_shopping_cart"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-carousel</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Launch-Carousel-in-Fullscreen"><a href="#Launch-Carousel-in-Fullscreen" class="headerlink" title="Launch Carousel in Fullscreen"></a>Launch Carousel in Fullscreen</h2><p>You can launch a Carousel in Fullscreen by using a <a href="/components/modal.html">Modal</a> component:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"primary"</span> <span class="attr">glossy</span> @<span class="attr">click</span>=<span class="string">"$refs.modal.open()"</span>&gt;</span></div><div class="line">  Launch</div><div class="line"><span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-modal</span> <span class="attr">ref</span>=<span class="string">"modal"</span> <span class="attr">class</span>=<span class="string">"maximized"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-carousel</span> <span class="attr">arrows</span> <span class="attr">dots</span> <span class="attr">class</span>=<span class="string">"text-white full-height"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"slide"</span> <span class="attr">class</span>=<span class="string">"bg-primary centered"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Slide 1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"dark"</span> <span class="attr">glossy</span> @<span class="attr">click</span>=<span class="string">"$refs.modal.close()"</span>&gt;</span>Close Me<span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"slide"</span> <span class="attr">class</span>=<span class="string">"bg-secondary centered"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Slide 2<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"dark"</span> <span class="attr">glossy</span> @<span class="attr">click</span>=<span class="string">"$refs.modal.close()"</span>&gt;</span>Close Me<span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"slide"</span> <span class="attr">class</span>=<span class="string">"bg-tertiary centered"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Slide 3<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"dark"</span> <span class="attr">glossy</span> @<span class="attr">click</span>=<span class="string">"$refs.modal.close()"</span>&gt;</span>Close Me<span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-carousel</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-modal</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Chat]]></title>
      <url>http://beta.quasar-framework.org/components/chat.html</url>
      <content type="html"><![CDATA[<p>Quasar supplies a chat component called QChatMessage which is really a chat entry that renders the data given by the props.</p>
<input type="hidden" data-fullpage-demo="other-components/chat">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>This show a simple chat between two parties, and a to label</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-chat-message</span></span></div><div class="line">  <span class="attr">label</span>=<span class="string">'Sunday, 19th'</span></div><div class="line">/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">q-chat-message</span></span></div><div class="line">  <span class="attr">name</span>=<span class="string">"me"</span></div><div class="line">  <span class="attr">avatar</span>=<span class="string">"statics/boy-avatar.png"</span></div><div class="line">  <span class="attr">:text</span>=<span class="string">"['hunter2']"</span></div><div class="line">  <span class="attr">stamp</span>=<span class="string">"4 minutes ago"</span></div><div class="line">  <span class="attr">sent</span></div><div class="line">/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">q-chat-message</span></span></div><div class="line">  <span class="attr">name</span>=<span class="string">"Jane"</span></div><div class="line">  <span class="attr">avatar</span>=<span class="string">"statics/linux-avatar.png"</span></div><div class="line">  <span class="attr">:text</span>=<span class="string">"['hey, if you type in your pw', 'it will show as stars']"</span></div><div class="line">  <span class="attr">stamp</span>=<span class="string">"7 minutes ago"</span></div><div class="line">/&gt;</div></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>sent</code></td>
<td>Boolean</td>
<td>Render as a sent message (so from current user)</td>
</tr>
<tr>
<td><code>label</code></td>
<td>String</td>
<td>Label of message</td>
</tr>
<tr>
<td><code>name</code></td>
<td>String</td>
<td>Name of the message creator</td>
</tr>
<tr>
<td><code>avatar</code></td>
<td>String</td>
<td>URL to the avatar image of the creator (use a static resource)</td>
</tr>
<tr>
<td><code>text</code></td>
<td>Array</td>
<td>Array of strings that are the message body</td>
</tr>
<tr>
<td><code>stamp</code></td>
<td>String</td>
<td>Creation timestamp string</td>
</tr>
<tr>
<td><code>text-color</code></td>
<td>String</td>
<td>Color of the text</td>
</tr>
<tr>
<td><code>bg-color</code></td>
<td>String</td>
<td>Color of the chat message bubble</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>Note</strong> that <code>text</code> property is an Array of Strings. This is useful when two or more messages share the same (or very close) timestamp. They will be displayed on separate bubbles, but grouped together more closely so that the name of the creator and timestamp are displayed only once for this kind of group.</p>
</blockquote>
<p>Please refer to the demo source for a more complete set of examples.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Checkbox]]></title>
      <url>http://beta.quasar-framework.org/components/checkbox.html</url>
      <content type="html"><![CDATA[<p>The Quasar Checkbox component is a basic element to be used for selection or toggling by the user. It has a number of features, as described below.</p>
<input type="hidden" data-fullpage-demo="forms/checkbox">

<p>Please also refer to the <a href="/components/option-group.html">Option Group documentation</a> on other possibilities for creating groups of Toggles.</p>
<p>Works well with <a href="/components/field.html">QField</a> for additional functionality such as a helper, error message placeholder and many others.</p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- No label: --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-checkbox</span> <span class="attr">v-model</span>=<span class="string">"checked"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- With a label --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-checkbox</span> <span class="attr">v-model</span>=<span class="string">"checked"</span> <span class="attr">label</span>=<span class="string">"Checkbox Label"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Disabled: --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-checkbox</span> <span class="attr">v-model</span>=<span class="string">"checked"</span> <span class="attr">disable</span> /&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><p>Supports <code>v-model</code> which should be binded to a Boolean or Array in your scope.</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>label</code></td>
<td>String</td>
<td>The text label for the Checkbox.</td>
</tr>
<tr>
<td><code>left-label</code></td>
<td>Boolean</td>
<td>Set to <code>true</code>, if the label should be placed to the left of the Checkbox.</td>
</tr>
<tr>
<td><code>checked-icon</code></td>
<td>String</td>
<td>Optional icon to use, when the Checkbox is checked.</td>
</tr>
<tr>
<td><code>uncheck-icon</code></td>
<td>String</td>
<td>Optional icon to use, when the Checkbox is not checked.</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>Color from <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>Set to <code>true</code>, to disable the Checkbox.</td>
</tr>
<tr>
<td><code>val</code></td>
<td>Object</td>
<td>Used to modify the v-model of the Checkbox when using an Array as <code>v-model</code>.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Vue Event</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@blur</code></td>
<td>Triggered, when Checkbox loses focus.</td>
</tr>
<tr>
<td><code>@focus</code></td>
<td>Triggered, when Checkbox gains focus.</td>
</tr>
</tbody>
</table>
<h2 id="Array-as-Model"><a href="#Array-as-Model" class="headerlink" title="Array as Model"></a>Array as Model</h2><p>If you have a number of checkboxes for a selection, use an array as the model object and specify <code>val</code> property.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-checkbox</span> <span class="attr">v-model</span>=<span class="string">"selection"</span> <span class="attr">val</span>=<span class="string">"one"</span> <span class="attr">label</span>=<span class="string">"One"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-checkbox</span> <span class="attr">v-model</span>=<span class="string">"selection"</span> <span class="attr">val</span>=<span class="string">"two"</span> <span class="attr">label</span>=<span class="string">"Two"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-checkbox</span> <span class="attr">v-model</span>=<span class="string">"selection"</span> <span class="attr">val</span>=<span class="string">"three"</span> <span class="attr">label</span>=<span class="string">"Three"</span> /&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  data () &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      selection: [<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>]</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<p>Ticking all Checkboxes will make <code>selection</code> scope variable to be <code>[&#39;one&#39;, &#39;two&#39;, &#39;three&#39;]</code>. Unticking all Checkboxes will result in <code>selection</code> being an empty array <code>[]</code>.</p>
<h2 id="More-Examples"><a href="#More-Examples" class="headerlink" title="More Examples"></a>More Examples</h2><p>There are a number of props, which are available to help quickly format a Checkbox. An interesting feature of Checkbox is the ripple effect that user gets when clicking/tapping on it to change its state.</p>
<h3 id="Specific-Icons"><a href="#Specific-Icons" class="headerlink" title="Specific Icons"></a>Specific Icons</h3><p>Sometimes, you might need a checkbox simply as a type of button, to maybe turn something on or off. You can do this with the <code>checked-icon</code> and <code>unchecked-icon</code> props.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- a happy and unhappy smiley, maybe for a one-touch satisfaction feedback --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-checkbox</span></span></div><div class="line">  <span class="attr">v-model</span>=<span class="string">"checked"</span></div><div class="line">  <span class="attr">checked-icon</span>=<span class="string">"sentiment very satisfied"</span></div><div class="line">  <span class="attr">unchecked-icon</span>=<span class="string">"sentiment very dissatisfied"</span></div><div class="line">/&gt;</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- an eye and a crossed out eye to indicate visibility --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-checkbox</span></span></div><div class="line">  <span class="attr">v-model</span>=<span class="string">"checked"</span></div><div class="line">  <span class="attr">checked-icon</span>=<span class="string">"visibility"</span></div><div class="line">  <span class="attr">unchecked-icon</span>=<span class="string">"visibility_off"</span></div><div class="line">/&gt;</div></pre></td></tr></table></figure>
<h3 id="Coloring"><a href="#Coloring" class="headerlink" title="Coloring"></a>Coloring</h3><p>Use the <code>color</code> prop to control the Checkbox color.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-checkbox</span> <span class="attr">v-model</span>=<span class="string">"checked"</span> <span class="attr">color</span>=<span class="string">"teal"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">q-checkbox</span> <span class="attr">v-model</span>=<span class="string">"checked"</span> <span class="attr">color</span>=<span class="string">"orange"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">q-checkbox</span> <span class="attr">v-model</span>=<span class="string">"checked"</span> <span class="attr">color</span>=<span class="string">"dark"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Label-Position"><a href="#Label-Position" class="headerlink" title="Label Position"></a>Label Position</h3><p>Use the <code>left-label</code> prop, to move the label to the left of Checkbox.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-checkbox</span></span></div><div class="line">  <span class="attr">v-model</span>=<span class="string">"checked"</span></div><div class="line">  <span class="attr">color</span>=<span class="string">"teal"</span></div><div class="line">  <span class="attr">left-label</span></div><div class="line">  <span class="attr">label</span>=<span class="string">"Checkbox Label"</span></div><div class="line">/&gt;</div></pre></td></tr></table></figure>
<h3 id="Usage-Inside-of-a-List"><a href="#Usage-Inside-of-a-List" class="headerlink" title="Usage Inside of a List"></a>Usage Inside of a List</h3><p>In the following example we use the Right side of QItems to insert Checkbox, but it works anywhere.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-list</span> <span class="attr">link</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!--</span></div><div class="line">    Rendering a &lt;label&gt; tag (notice tag="label")</div><div class="line">    so the whole QItem will respond to clicks to</div><div class="line">    change Checkbox state.</div><div class="line">  --&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">tag</span>=<span class="string">"label"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-checkbox</span> <span class="attr">v-model</span>=<span class="string">"checked"</span>&gt;</span><span class="tag">&lt;/<span class="name">q-checkbox</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Events and reminders<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">tag</span>=<span class="string">"label"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-checkbox</span> <span class="attr">v-model</span>=<span class="string">"checked"</span>&gt;</span><span class="tag">&lt;/<span class="name">q-checkbox</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Events and reminders<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span>Lorem ipsum<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">tag</span>=<span class="string">"label"</span> <span class="attr">multiline</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-checkbox</span> <span class="attr">v-model</span>=<span class="string">"checked"</span>&gt;</span><span class="tag">&lt;/<span class="name">q-checkbox</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Events and reminders<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Chips Input]]></title>
      <url>http://beta.quasar-framework.org/components/chips-input.html</url>
      <content type="html"><![CDATA[<p>The Quasar Chips Input allows user to enter a group of text items, which is also editable in the form of quick deletion of the Chips in the list.</p>
<input type="hidden" data-fullpage-demo="forms/chips-input">

<p>For more details on Chips used within Chips Input, please refer to its <a href="/components/chip.html">documentation</a>.</p>
<p>Works well with <a href="/components/field.html">QField</a> for additional functionality such as a helper, error message placeholder and many others.</p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-chips</span> <span class="attr">v-model</span>=<span class="string">"model"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Disabled --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-chips</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">disable</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- With floating label --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-chips</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">float-label</span>=<span class="string">"Floating Label"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- With custom placeholder --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-chips</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">placeholder</span>=<span class="string">"Type some names"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- On error state --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-chips</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">error</span> /&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>The model variable must be an Array.</p>
</blockquote>
<p>The user can remove a Chip by clicking/tapping on the <code>close</code> icon. Adding a Chip is done by clicking/tapping on the component, typing and then hitting the <code>send</code> icon or <code>&lt;ENTER&gt;</code> key. Pressing Backspace key either removes content of the textfield or if that is empty then the last Chip.</p>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><p>Supports <code>v-model</code> which should be binded to an Array of Strings in your scope.</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>frame-color</code></td>
<td>String</td>
<td>One from <a href="/components/color-palette.html">Quasar Color Palette</a>. See “Coloring” section.</td>
</tr>
<tr>
<td><code>readonly</code></td>
<td>Boolean</td>
<td>If readonly user can not add or remove chips.</td>
</tr>
</tbody>
</table>
<p>Common input field properties:</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>autofocus</code></td>
<td>Boolean</td>
<td>Focus input field after rendering component.</td>
</tr>
<tr>
<td><code>placeholder</code></td>
<td>String</td>
<td>A text to be shown on textfield, mainly to explain what should be entered.</td>
</tr>
<tr>
<td><code>name</code></td>
<td>String</td>
<td>Adds a “name” attribute to the input field.</td>
</tr>
<tr>
<td><code>max-length</code></td>
<td>Number/String</td>
<td>Maximum characters allowed on input field.</td>
</tr>
<tr>
<td><code>loading</code></td>
<td>Boolean</td>
<td>Place the default spinner of the theme after textfield to highlight some process takes place in the background.</td>
</tr>
</tbody>
</table>
<p>Common input frame properties:</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>prefix</code></td>
<td>String</td>
<td>A text that should be shown before the textfield.</td>
</tr>
<tr>
<td><code>suffix</code></td>
<td>String</td>
<td>A text that should be shown after the textfield.</td>
</tr>
<tr>
<td><code>float-label</code></td>
<td>String</td>
<td>A text label that will “float” up above the input field, once the input field gets focus.</td>
</tr>
<tr>
<td><code>stack-label</code></td>
<td>String</td>
<td>A text label that will be shown above the input field and is static.</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>One from <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>inverted</code></td>
<td>Boolean</td>
<td>Inverted mode. Color is applied to background instead.</td>
</tr>
<tr>
<td><code>dark</code></td>
<td>Boolean</td>
<td>Is QChipsInput rendered on a dark background?</td>
</tr>
<tr>
<td><code>align</code></td>
<td>String</td>
<td>One of ‘left’, ‘center’ or ‘right’ which determines the text align within textfield.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, textfield is disabled and the user cannot type anything.</td>
</tr>
<tr>
<td><code>error</code></td>
<td>Boolean</td>
<td>If set to true, the input fields colors are changed to show there is an error.</td>
</tr>
<tr>
<td><code>before</code></td>
<td>Array of Objects</td>
<td>Icon buttons on left side of input frame. Read below more details.</td>
</tr>
<tr>
<td><code>after</code></td>
<td>Array of Objects</td>
<td>Icon buttons on right side of input frame. Read below more details.</td>
</tr>
</tbody>
</table>
<h3 id="Icon-buttons"><a href="#Icon-buttons" class="headerlink" title="Icon buttons"></a>Icon buttons</h3><p>This section refers to <code>before</code> and <code>after</code> properties which can add additional buttons as icons to the textfield. Here is the structure of the two properties:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="comment">// required icon</span></div><div class="line">  icon: <span class="built_in">String</span>,</div><div class="line">  <span class="comment">// required function to call when</span></div><div class="line">  <span class="comment">// icon is clicked/tapped</span></div><div class="line">  handler: <span class="built_in">Function</span>,</div><div class="line"></div><div class="line">  <span class="comment">// Optional. Show icon button</span></div><div class="line">  <span class="comment">// if model has a value</span></div><div class="line">  content: <span class="built_in">Boolean</span>,</div><div class="line"></div><div class="line">  <span class="comment">// Optional. Show icon button</span></div><div class="line">  <span class="comment">// if textfield is marked with error</span></div><div class="line">  error: <span class="built_in">Boolean</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Examples:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-chips-input</span></span></div><div class="line">  <span class="attr">v-model</span>=<span class="string">"model"</span></div><div class="line">  <span class="attr">color</span>=<span class="string">"secondary"</span></div><div class="line">  <span class="attr">:after</span>=<span class="string">"[</span></div><div class="line">    &#123;</div><div class="line">      icon: 'warning',</div><div class="line">      error: true,</div><div class="line">      handler () &#123;</div><div class="line">        // do something...</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]"</div><div class="line">/&gt;</div></pre></td></tr></table></figure></p>
<h3 id="Coloring"><a href="#Coloring" class="headerlink" title="Coloring"></a>Coloring</h3><p>As you may have noticed above, there’s a “color” and “frame-color” along “inverted” and “dark” properties.<br>By default, if you only use “color” then the input frame and Chips will share the color. If there’s also a “frame-color” specified then the input frame color can differ from Chips’ one.<br>When you want the frame inverted (color is applied to background), then specify “inverted” property.<br>When used on a dark background, specify “dark” property.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Use a color. --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-chips-input</span> <span class="attr">color</span>=<span class="string">"secondary"</span> <span class="attr">v-model</span>=<span class="string">"model"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Use a color on inverted mode (background gets colored). --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-chips-input</span> <span class="attr">color</span>=<span class="string">"secondary"</span> <span class="attr">v-model</span>=<span class="string">"model"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line">  Using "frame-color" for the input frame,</div><div class="line">  and "color" for the color of Chips.</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">q-chips-input</span> <span class="attr">color</span>=<span class="string">"dark"</span> <span class="attr">bg-color</span>=<span class="string">"amber"</span> <span class="attr">v-model</span>=<span class="string">"model"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line">  Using "frame-color" for the input frame,</div><div class="line">  and "color" for the color of Chips</div><div class="line">  on inverted mode (frame-color is applied as background).</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">q-chips-input</span> <span class="attr">color</span>=<span class="string">"dark"</span> <span class="attr">bg-color</span>=<span class="string">"amber"</span> <span class="attr">v-model</span>=<span class="string">"model"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line">  When we use the component on a dark background,</div><div class="line">  so we specify "dark" property.</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg-grey-9"</span> <span class="attr">style</span>=<span class="string">"padding: 15px"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-chips-input</span> <span class="attr">dark</span> <span class="attr">color</span>=<span class="string">"amber"</span> <span class="attr">v-model</span>=<span class="string">"model"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Vue-Methods"><a href="#Vue-Methods" class="headerlink" title="Vue Methods"></a>Vue Methods</h2><table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>add(value)</code></td>
<td>Adds <code>value</code> to the model.</td>
</tr>
<tr>
<td><code>remove(index)</code></td>
<td>Removes value at <code>index</code> in model.</td>
</tr>
<tr>
<td><code>focus()</code></td>
<td>Focuses the input text field within Chips Input.</td>
</tr>
<tr>
<td><code>select()</code></td>
<td>Selects all textfield text and focuses.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Vue Event</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@change(newVal)</code></td>
<td>Triggered on model value change.</td>
</tr>
</tbody>
</table>
<h2 id="More-Examples"><a href="#More-Examples" class="headerlink" title="More Examples"></a>More Examples</h2><h3 id="Wrapped-with-QField"><a href="#Wrapped-with-QField" class="headerlink" title="Wrapped with QField"></a>Wrapped with QField</h3><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-field</span></span></div><div class="line">  <span class="attr">icon</span>=<span class="string">"account_box"</span></div><div class="line">  <span class="attr">label</span>=<span class="string">"Birthday"</span></div><div class="line">  <span class="attr">:count</span>=<span class="string">"10"</span></div><div class="line">  <span class="attr">helper</span>=<span class="string">"Some helper here"</span></div><div class="line">&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">q-chips-input</span> <span class="attr">float-label</span>=<span class="string">"Float Label"</span> <span class="attr">v-model</span>=<span class="string">"model"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-field</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Usage-Inside-of-a-List"><a href="#Usage-Inside-of-a-List" class="headerlink" title="Usage Inside of a List"></a>Usage Inside of a List</h3><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-list</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">multiline</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"edit"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-chips-input</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">class</span>=<span class="string">"no-margin"</span> <span class="attr">placeholder</span>=<span class="string">"Type names"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Chip]]></title>
      <url>http://beta.quasar-framework.org/components/chip.html</url>
      <content type="html"><![CDATA[<p>The Chip component is basically a simple UI block entity,,representing for example more advanced underlying data, such as a contact, in a compact way.</p>
<p>Chips can contain entities such as an avatar, text or an icon, optionally having a pointer too. They can also be closed or removed if configured so.</p>
<input type="hidden" data-fullpage-demo="other-components/chip">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>Some basic examples:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- icon on left side --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-chip</span> <span class="attr">icon</span>=<span class="string">"alarm"</span> <span class="attr">color</span>=<span class="string">"primary"</span>&gt;</span></div><div class="line">  q-chip</div><div class="line"><span class="tag">&lt;/<span class="name">q-chip</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- icon on right side --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-chip</span> <span class="attr">icon-right</span>=<span class="string">"alarm"</span> <span class="attr">color</span>=<span class="string">"primary"</span>&gt;</span></div><div class="line">  q-chip</div><div class="line"><span class="tag">&lt;/<span class="name">q-chip</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- avatar on left side --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-chip</span> <span class="attr">avatar</span>=<span class="string">"/statics/some.png"</span> <span class="attr">color</span>=<span class="string">"primary"</span>&gt;</span></div><div class="line">  q-chip</div><div class="line"><span class="tag">&lt;/<span class="name">q-chip</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><p>There are a number of properties available:</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>floating</code></td>
<td>Boolean</td>
<td>Allows the chip to float over other elements.</td>
</tr>
<tr>
<td><code>tag</code></td>
<td>Boolean</td>
<td>Makes it a “tag” type.</td>
</tr>
<tr>
<td><code>detail</code></td>
<td>Boolean</td>
<td>Highlights the area on the right (icon or avatar), should there be one.</td>
</tr>
<tr>
<td><code>icon</code></td>
<td>String</td>
<td>Icon for left side.</td>
</tr>
<tr>
<td><code>icon-right</code></td>
<td>String</td>
<td>Icon for right side.</td>
</tr>
<tr>
<td><code>avatar</code></td>
<td>String</td>
<td>URL pointing to statics folder for an image which gets placed on left side.</td>
</tr>
<tr>
<td><code>small</code></td>
<td>Boolean</td>
<td>Reduces the size of the chip. Makes it compact.</td>
</tr>
<tr>
<td><code>square</code></td>
<td>Boolean</td>
<td>Gives the chip right-angled corners. Rounded corners are default.</td>
</tr>
<tr>
<td><code>pointing</code></td>
<td>String</td>
<td>Adds a carat to the chip, pointing either <code>up</code>, <code>right</code>, <code>down</code> or <code>left</code>.</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>The color the chip should be.</td>
</tr>
<tr>
<td><code>closable</code></td>
<td>Boolean</td>
<td>Adds a close button to the right of the chip, which when clicked, will emit <code>@close</code> event.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@close</code></td>
<td>The close button has been clicked/tapped.</td>
</tr>
<tr>
<td><code>@click</code></td>
<td>Chip has been clicked/tapped outside of close button.</td>
</tr>
</tbody>
</table>
<p>When using <code>closable</code> property a close button will be displayed on the right side. When clicking/tapping on the button the <code>@close</code> event will be triggered. This does not removes the chip by itself. You will have to handle it yourself.</p>
<p>The two events fire independently but not both simultaneously, depending on where the user has clicked/tapped (on close button or anywhere else within the Chip).</p>
<h2 id="More-Examples"><a href="#More-Examples" class="headerlink" title="More Examples"></a>More Examples</h2><p>You can add the ability to close the chip too.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-chip</span> <span class="attr">closable</span> <span class="attr">color</span>=<span class="string">"red"</span>&gt;</span></div><div class="line">  Joe</div><div class="line"><span class="tag">&lt;/<span class="name">q-chip</span>&gt;</span></div></pre></td></tr></table></figure>
<p>You can also use a chip to label a button.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">class</span>=<span class="string">"light relative-position"</span>&gt;</span></div><div class="line">  Inbox</div><div class="line">  <span class="tag">&lt;<span class="name">q-chip</span> <span class="attr">floating</span> <span class="attr">color</span>=<span class="string">"primary"</span>&gt;</span>22<span class="tag">&lt;/<span class="name">q-chip</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div></pre></td></tr></table></figure>
<p>You can also use chips as pointing labels.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-chip</span> <span class="attr">pointing</span>=<span class="string">"up"</span> <span class="attr">color</span>=<span class="string">"primary"</span>&gt;</span></div><div class="line">  Pointing Up</div><div class="line"><span class="tag">&lt;/<span class="name">q-chip</span>&gt;</span></div></pre></td></tr></table></figure>
<p>You can create advanced label chips, with an avatar/image and a closeable button to delete the chip.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-chip</span> <span class="attr">closable</span> <span class="attr">avatar</span>=<span class="string">"/statics/some.png"</span> <span class="attr">color</span>=<span class="string">"red"</span>&gt;</span></div><div class="line">  Joe</div><div class="line"><span class="tag">&lt;/<span class="name">q-chip</span>&gt;</span></div></pre></td></tr></table></figure>
<p>You can also create chips that look like tags.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-chip</span> <span class="attr">tag</span> <span class="attr">color</span>=<span class="string">"secondary"</span> <span class="attr">icon-right</span>=<span class="string">"mail"</span>&gt;</span></div><div class="line">  New</div><div class="line"><span class="tag">&lt;/<span class="name">q-chip</span>&gt;</span></div></pre></td></tr></table></figure>
<p>This chip highlights the icon by using the <code>detail</code> property.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-chip</span> <span class="attr">tag</span> <span class="attr">color</span>=<span class="string">"secondary"</span> <span class="attr">detail</span> <span class="attr">icon</span>=<span class="string">"mail"</span>&gt;</span></div><div class="line">  10 emails</div><div class="line"><span class="tag">&lt;/<span class="name">q-chip</span>&gt;</span></div></pre></td></tr></table></figure>
<p>One more example where we add a shadow to a chip:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-chip</span> <span class="attr">class</span>=<span class="string">"shadow-1"</span> <span class="attr">square</span> <span class="attr">color</span>=<span class="string">"primary"</span>&gt;</span>10k<span class="tag">&lt;/<span class="name">q-chip</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Collapsible (+ Accordion)]]></title>
      <url>http://beta.quasar-framework.org/components/collapsible.html</url>
      <content type="html"><![CDATA[<p>Quasar Collapsibles allow the hiding of content that is not immediately relevant to the user. Think of them as accordion elements that expand when clicked on.</p>
<input type="hidden" data-fullpage-demo="grouping/collapsible">

<p>They are basically QItem components wrapped with additional functionality. So they can be included in QLists and inherit QItem component properties.</p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-list</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-collapsible</span> <span class="attr">icon</span>=<span class="string">"explore"</span> <span class="attr">label</span>=<span class="string">"First"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">      Content</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-collapsible</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-collapsible</span> <span class="attr">icon</span>=<span class="string">"perm_identity"</span> <span class="attr">label</span>=<span class="string">"Second"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">      Content</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-collapsible</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-collapsible</span> <span class="attr">icon</span>=<span class="string">"shopping_cart"</span> <span class="attr">label</span>=<span class="string">"Third"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">      Content</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-collapsible</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Accordion"><a href="#Accordion" class="headerlink" title="Accordion"></a>Accordion</h3><p>You can group multiple Collapsibles to act as an Accordion, which is to open only one Collapsible at a time while closing the others automatically. For this, use <code>group</code> Vue property and specify a unique name within the Vue parent container of the Collapsibles.<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-list</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-collapsible</span> <span class="attr">group</span>=<span class="string">"somegroup"</span> <span class="attr">icon</span>=<span class="string">"explore"</span> <span class="attr">label</span>=<span class="string">"First"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">      Content</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-collapsible</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-collapsible</span> <span class="attr">group</span>=<span class="string">"somegroup"</span> <span class="attr">icon</span>=<span class="string">"perm_identity"</span> <span class="attr">label</span>=<span class="string">"Second"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">      Content</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-collapsible</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-collapsible</span> <span class="attr">group</span>=<span class="string">"somegroup"</span> <span class="attr">icon</span>=<span class="string">"shopping_cart"</span> <span class="attr">label</span>=<span class="string">"Third"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">      Content</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-collapsible</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>You can add <code>item-separator</code> class on the list <code>&lt;div&gt;</code> element if you want separators between Collapsibles.</p>
<h2 id="Preselecting-Items"><a href="#Preselecting-Items" class="headerlink" title="Preselecting Items"></a>Preselecting Items</h2><p>Collapsible items can be opened by default:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-collapsible</span> <span class="attr">opened</span> <span class="attr">icon</span>=<span class="string">"explore"</span> <span class="attr">label</span>=<span class="string">"First"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    Content</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-collapsible</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- or --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-collapsible</span> <span class="attr">:opened</span>=<span class="string">"boolean_variable"</span> <span class="attr">icon</span>=<span class="string">"explore"</span> <span class="attr">label</span>=<span class="string">"First"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    Content</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-collapsible</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Indenting-Content"><a href="#Indenting-Content" class="headerlink" title="Indenting Content"></a>Indenting Content</h2><p>When you are building a complex menu (with sub-menus), like for example on a Left or Right side of QLayout, it’s useful to also have some kind of left-side indentation on the Collapsible content:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-collapsible</span> <span class="attr">indent</span> <span class="attr">icon</span>=<span class="string">"explore"</span> <span class="attr">label</span>=<span class="string">"First"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">link</span> <span class="attr">...</span>&gt;</span>...<span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">link</span> <span class="attr">...</span>&gt;</span>...<span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">link</span> <span class="attr">...</span>&gt;</span>...<span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-collapsible</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><p>Since QCollapsible is a wrapper over QItem components, it inherits some of their properties as you can see below.</p>
<table>
<thead>
<tr>
<th>Own Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>opened</code></td>
<td>Boolean</td>
<td>Control if Collapsible is opened or not.</td>
</tr>
<tr>
<td><code>group</code></td>
<td>String</td>
<td>Unique name which allows to group multiple Collapsible so they work as an Accordion.</td>
</tr>
<tr>
<td><code>indent</code></td>
<td>Boolean</td>
<td>Indent Collapsible content. Useful when building a menu with it.</td>
</tr>
<tr>
<td><code>icon-toggle</code></td>
<td>Boolean</td>
<td>Expand/Contract only by clicking/tapping on the arrow on the right.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>Disable current Collapsible.</td>
</tr>
</tbody>
</table>
<p>QItem components inherited properties:</p>
<table>
<thead>
<tr>
<th>Inherited Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>icon</code></td>
<td>String</td>
<td>Icon to use. Either use an icon, image, avatar or letter.</td>
</tr>
<tr>
<td><code>image</code></td>
<td>String</td>
<td>URL to image to use (point to statics). Either use an icon, image, avatar or letter.</td>
</tr>
<tr>
<td><code>avatar</code></td>
<td>String</td>
<td>URL to avatar to use (point to statics). Either use an icon, image, avatar or letter.</td>
</tr>
<tr>
<td><code>letter</code></td>
<td>String</td>
<td>One character String to define a letter. Either use an icon, image, avatar or letter.</td>
</tr>
<tr>
<td><code>label</code></td>
<td>String</td>
<td>Label to use as title.</td>
</tr>
<tr>
<td><code>sublabel</code></td>
<td>String</td>
<td>Label to use as subtitle.</td>
</tr>
<tr>
<td><code>label-lines</code></td>
<td>String / Number</td>
<td>Number of lines the label can span to. Ellipsis are used when overflowing.</td>
</tr>
<tr>
<td><code>sublabel-lines</code></td>
<td>String / Number</td>
<td>Number of lines the sublabel can span to. Ellipsis are used when overflowing.</td>
</tr>
<tr>
<td><code>dense</code></td>
<td>Boolean</td>
<td>Use a dense QItem.</td>
</tr>
<tr>
<td><code>sparse</code></td>
<td>Boolean</td>
<td>Use a sparse QItem.</td>
</tr>
<tr>
<td><code>multiline</code></td>
<td>Boolean</td>
<td>Use a multiline QItem. Useful in cases where you use label and sublabel that spans multiple lines, but even then it’s optional.</td>
</tr>
<tr>
<td><code>separator</code></td>
<td>Boolean</td>
<td>Use a separator from other QItems or QCollapsibles, just like on QItem.</td>
</tr>
<tr>
<td><code>inset-separator</code></td>
<td>Boolean</td>
<td>Inset separator, same behavior as <code>separator</code>.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Methods"><a href="#Vue-Methods" class="headerlink" title="Vue Methods"></a>Vue Methods</h2><table>
<thead>
<tr>
<th>Vue Methods</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>toggle()</code></td>
<td>Toggle open/close state.</td>
</tr>
<tr>
<td><code>open()</code></td>
<td>Open it.</td>
</tr>
<tr>
<td><code>close()</code></td>
<td>Close it.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@open</code></td>
<td>Triggered after opening Collapsible.</td>
</tr>
<tr>
<td><code>@close</code></td>
<td>Triggered after closing Collapsible.</td>
</tr>
</tbody>
</table>
<h2 id="Ubiquity"><a href="#Ubiquity" class="headerlink" title="Ubiquity"></a>Ubiquity</h2><p>Be creative. In the example below we’re using a Card as Collapsible content.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-collapsible</span> <span class="attr">icon</span>=<span class="string">"explore"</span> <span class="attr">label</span>=<span class="string">"First Card"</span> <span class="attr">sublabel</span>=<span class="string">"Contains a Card"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-card</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-card-title</span>&gt;</span></div><div class="line">      Card Title</div><div class="line">    <span class="tag">&lt;/<span class="name">q-card-title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-card-main</span>&gt;</span></div><div class="line">      Lorem ipsum dolor sit amet, consectetur adipiscing elit.</div><div class="line">    <span class="tag">&lt;/<span class="name">q-card-main</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-card</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-collapsible</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Color Palette]]></title>
      <url>http://beta.quasar-framework.org/components/color-palette.html</url>
      <content type="html"><![CDATA[<p>Quasar Framework offers a wide selection of colors out of the box. You can use them both as Stylus variables in your CSS code or directly as CSS classes in your HTML templates.</p>
<input type="hidden" data-fullpage-demo="style-and-identity/color-palette">

<p>This page comes really handy after reading <a href="/guide/quasar-theming.html">Quasar Theming</a>.</p>
<h2 id="Brand-Colors"><a href="#Brand-Colors" class="headerlink" title="Brand Colors"></a>Brand Colors</h2><p>There can be three main colors used throughout your App, called <code>primary</code>, <code>secondary</code> and <code>tertiary</code>.</p>
<p>Most of the colors that Quasar Components use are strongly linked with these three colors that you can change. Choosing these colors is the first step one should take when differentiating the design of its own App. You’ll notice immediately on changing their default values that Quasar Components follow these colors as a guideline.</p>
<h2 id="Color-List"><a href="#Color-List" class="headerlink" title="Color List"></a>Color List</h2><p>Here’s the list of colors provided out of the box. Use them as CSS classes (in HTML templates) or as Stylus variables (in <code>&lt;style lang=&quot;stylus&quot;&gt;</code> tags) within your app’s <code>*.vue</code> files.</p>
<p><code>primary</code>, <code>secondary</code>, <code>tertiary</code><br><code>positive</code>, <code>negative</code>, <code>info</code>, <code>warning</code>, <code>white</code>, <code>light</code>, <code>dark</code>, <code>faded</code></p>
<p>On the following colors there are variations available:<br><code>red</code>, <code>pink</code>, <code>purple</code>, <code>deep-purple</code>, <code>indigo</code>, <code>blue</code>, <code>light-blue</code>, <code>cyan</code>, <code>teal</code>, <code>green</code>, <code>light-green</code>, <code>lime</code>, <code>yellow</code>, <code>amber</code>, <code>orange</code>, <code>deep-orange</code>, <code>brown</code>, <code>grey</code>, <code>blue-grey</code></p>
<p>Example of color variation: <code>red</code>, <code>red-1</code>, <code>red-2</code>, …, <code>red-14</code>. See the demo to make a good picture of what variations are. Variation 11 to 14 are color accents.</p>
<h2 id="Using-as-CSS-Classes"><a href="#Using-as-CSS-Classes" class="headerlink" title="Using as CSS Classes"></a>Using as CSS Classes</h2><p>Use <code>text-</code> or <code>bg-</code> prefixes as class names to change the color of text or the color of the background.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- changing text color --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-primary"</span>&gt;</span>....<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- changing background color --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"bg-positive"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Using-Stylus-Variables"><a href="#Using-Stylus-Variables" class="headerlink" title="Using Stylus Variables"></a>Using Stylus Variables</h2><p>In your app’s <code>*.vue</code> files you can use the colors as <code>$primary</code>, <code>$red-1</code>, and so on.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Notice lang="stylus" --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"stylus"</span>&gt;</span><span class="undefined"></span></div><div class="line">// "variables" is a Webpack alias (defined in /config/index.js)</div><div class="line">// which points to /src/themes/quasar.variables.styl</div><div class="line">// in your starter kit</div><div class="line">@import '~variables'</div><div class="line"></div><div class="line">div</div><div class="line">  color $red-1</div><div class="line">  background-color $grey-5</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Context Menu]]></title>
      <url>http://beta.quasar-framework.org/components/context-menu.html</url>
      <content type="html"><![CDATA[<p>This component allows you to display a context menu (popup) instead of the default browser one when user performs a right-click (or long tap on touch capable devices).</p>
<input type="hidden" data-fullpage-demo="navigation/context-menu">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>Context menus can contain anything. In the example below, we display a menu.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-context-menu</span> <span class="attr">ref</span>=<span class="string">"context"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-list</span> <span class="attr">link</span> <span class="attr">separator</span> <span class="attr">style</span>=<span class="string">"min-width: 150px; max-height: 300px;"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item</span> @<span class="attr">click</span>=<span class="string">"showToast(), $refs.context.close()"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Label"</span> <span class="attr">sublabel</span>=<span class="string">"Value"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">q-item</span> @<span class="attr">click</span>=<span class="string">"showOtherToast(), $refs.context.close()"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Other Label"</span> <span class="attr">sublabel</span>=<span class="string">"Other Value"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-context-menu</span>&gt;</span></div></pre></td></tr></table></figure>
<p>The position of the popup is calculated so that it will be displayed on the available screen real estate, switching sides (right/left and/or top/bottom) when necessary.<br>Clicking/Tapping outside of the popup will close the Context Menu.</p>
<blockquote>
<p>Use a Vue reference on <code>&lt;q-context-menu&gt;</code> to call <code>close()</code> method if you want an element to be able to close the Context Menu.</p>
<p><strong>IMPORTANT</strong><br>When on a mobile device and user hits the phone/tablet back button, the Context Menu will get closed automatically.<br>When on a desktop browser and user hits the &lt;ESCAPE&gt; key, the Context Menu will get close automatically.</p>
</blockquote>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>Disabled or not</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Methods"><a href="#Vue-Methods" class="headerlink" title="Vue Methods"></a>Vue Methods</h2><table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>close()</code></td>
<td>Close Context Menu</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@open</code></td>
<td>Triggered when showing up.</td>
</tr>
<tr>
<td><code>@close</code></td>
<td>Triggered when closing/hiding.</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Cookies]]></title>
      <url>http://beta.quasar-framework.org/components/cookies.html</url>
      <content type="html"><![CDATA[<p>This is a wrapper over the standardized <code>document.cookie</code>.</p>
<blockquote>
<p><strong>NOTE</strong><br>In addition, you can read and write cookies using JSON objects.</p>
</blockquote>
<h2 id="Read-a-Cookie"><a href="#Read-a-Cookie" class="headerlink" title="Read a Cookie"></a>Read a Cookie</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Cookies &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> value = Cookies.get(<span class="string">'cookie_name'</span>)</div></pre></td></tr></table></figure>
<p>When cookie is not set, the return value is <code>undefined</code>.</p>
<h2 id="Read-All-Cookies"><a href="#Read-All-Cookies" class="headerlink" title="Read All Cookies"></a>Read All Cookies</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Cookies &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> cookies = Cookies.all()</div></pre></td></tr></table></figure>
<p><code>cookies</code> variable will be an object with key-value pairs (cookie_name : cookie_value).</p>
<h2 id="Verify-if-Cookie-is-Set"><a href="#Verify-if-Cookie-is-Set" class="headerlink" title="Verify if Cookie is Set"></a>Verify if Cookie is Set</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Cookies &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">(<span class="built_in">Boolean</span>) Cookies.has(<span class="string">'cookie_name'</span>)</div></pre></td></tr></table></figure>
<h2 id="Write-a-Cookie"><a href="#Write-a-Cookie" class="headerlink" title="Write a Cookie"></a>Write a Cookie</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Cookies &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">Cookies.set(<span class="string">'cookie_name'</span>, cookie_value, options)</div></pre></td></tr></table></figure>
<p><code>options</code> is an Object which can have the following properties: <code>expire</code>, <code>path</code>, <code>domain</code>, <code>secure</code>. They are explained below.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Cookies &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">Cookies.set(<span class="string">'quasar'</span>, <span class="string">'framework'</span>, &#123;</div><div class="line">  secure: <span class="literal">true</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="Option-expires"><a href="#Option-expires" class="headerlink" title="Option expires"></a>Option <code>expires</code></h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">expires: <span class="number">10</span></div></pre></td></tr></table></figure>
<p>Define lifetime of the cookie. Value can be a Number which will be interpreted as days from time of creation or a Date object. If omitted, the cookie becomes a session cookie.</p>
<h3 id="Option-path"><a href="#Option-path" class="headerlink" title="Option path"></a>Option <code>path</code></h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">path: <span class="string">'/'</span></div></pre></td></tr></table></figure>
<p>Define the path where the cookie is valid. By default the path of the cookie is the path of the page where the cookie was created (standard browser behavior). If you want to make it available for instance across the entire domain use path: ‘/‘. Default: path of page where the cookie was created.</p>
<h3 id="Option-domain"><a href="#Option-domain" class="headerlink" title="Option domain"></a>Option <code>domain</code></h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">domain: <span class="string">'quasar-framework.org'</span></div></pre></td></tr></table></figure>
<p>Define the domain where the cookie is valid. Default: domain of page where the cookie was created.</p>
<h3 id="Option-secure"><a href="#Option-secure" class="headerlink" title="Option secure"></a>Option <code>secure</code></h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">secure: <span class="literal">true</span></div></pre></td></tr></table></figure>
<p>If true, the cookie transmission requires a secure protocol (HTTPS) and will NOT be sent over HTTP. Default value is <code>false</code>.</p>
<h2 id="Remove-a-Cookie"><a href="#Remove-a-Cookie" class="headerlink" title="Remove a Cookie"></a>Remove a Cookie</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Cookies &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">Cookies.remove(<span class="string">'cookie_name'</span>)</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Data Table]]></title>
      <url>http://beta.quasar-framework.org/components/datatable.html</url>
      <content type="html"><![CDATA[<p>Quasar Grid is a Vue Component which allows you to display data in a tabular manner. Features:</p>
<ul>
<li>Responsive (changes design when width is smaller than 600px to best accommodate small screens)</li>
<li>Sticky columns</li>
<li>Sticky headers</li>
<li>Filter (by all columns or by one column)</li>
<li>Sorting by columns</li>
<li>Cell formatter methods</li>
<li>Cell component renderer (through Vue scoped slots)</li>
<li>Pagination</li>
<li>Columns picker</li>
<li>Row selection (single or multiple)</li>
<li>Refresh functionality</li>
</ul>
<p><strong>Data Table is highly optimized to support a large number of rows</strong>, but its good to check “Performance” section below to make the most of it.</p>
<p><em>Best way to display a Grid is on a desktop so you might want to check that first</em>. Resize the browser window to see sticky columns and the responsiveness.</p>
<input type="hidden" data-fullpage-demo="grouping/data-table">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-data-table</span></span></div><div class="line">  <span class="attr">:data</span>=<span class="string">"table"</span></div><div class="line">  <span class="attr">:config</span>=<span class="string">"config"</span></div><div class="line">  <span class="attr">:columns</span>=<span class="string">"columns"</span></div><div class="line">  @<span class="attr">refresh</span>=<span class="string">"refresh"</span></div><div class="line">&gt;</div><div class="line">  <span class="comment">&lt;!-- Custom renderer for "message" column --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">"col-message"</span> <span class="attr">scope</span>=<span class="string">"cell"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"light-paragraph"</span>&gt;</span>&#123;&#123;cell.data&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- Custom renderer for "source" column --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">"col-source"</span> <span class="attr">scope</span>=<span class="string">"cell"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">"cell.data === 'Audit'"</span> <span class="attr">class</span>=<span class="string">"label text-white bg-primary"</span>&gt;</span></div><div class="line">      Audit</div><div class="line">      <span class="tag">&lt;<span class="name">q-tooltip</span>&gt;</span>Some data<span class="tag">&lt;/<span class="name">q-tooltip</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span> <span class="attr">class</span>=<span class="string">"label text-white bg-negative"</span>&gt;</span>&#123;&#123;cell.data&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- Custom renderer for "action" column with button for custom action --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">'col-action'</span> <span class="attr">scope</span>=<span class="string">'cell'</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">'doSomethingMethod(cell.row.id)'</span>&gt;</span>View<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- Custom renderer when user selected one or more rows --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">"selection"</span> <span class="attr">scope</span>=<span class="string">"selection"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"primary clear"</span> @<span class="attr">click</span>=<span class="string">"changeMessage(selection)"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">i</span>&gt;</span>edit<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"primary clear"</span> @<span class="attr">click</span>=<span class="string">"deleteRow(selection)"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">i</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-data-table</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><p>All Vue properties are <strong>required</strong>.</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>config</code></td>
<td>Config object (see “Config Property” below).</td>
</tr>
<tr>
<td><code>columns</code></td>
<td>Object defining columns (see “Columns Definition” below).</td>
</tr>
<tr>
<td><code>data</code></td>
<td>Data containing Array of rows to display.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Methods"><a href="#Vue-Methods" class="headerlink" title="Vue Methods"></a>Vue Methods</h2><table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>refresh([Boolean])</code></td>
<td>If parameter is missing or <code>true</code> then it puts Data Table in refresh mode. If parameter is <code>false</code> then components gets out of refresh mode.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Vue Event</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@refresh(Function done)</code></td>
<td>Triggered when user clicks/taps on “Refresh” button. Call <code>done()</code> when refresh is over.</td>
</tr>
<tr>
<td><code>@selection(Array selection)</code></td>
<td>Triggered when user selects/deselects a row. Parameter has all selected rows.</td>
</tr>
<tr>
<td><code>@rowclick</code></td>
<td>Triggered when user clicks on a row.</td>
</tr>
</tbody>
</table>
<h2 id="Configuring-Data-Table"><a href="#Configuring-Data-Table" class="headerlink" title="Configuring Data Table"></a>Configuring Data Table</h2><p>Some things worth mentioning before digging into how to configure Data Table:</p>
<ul>
<li>You must specify <code>rowHeight</code> property</li>
<li>You must specify each columns’ width</li>
</ul>
<h3 id="Config-Property"><a href="#Config-Property" class="headerlink" title="Config Property"></a>Config Property</h3><p>Below is an example enabling all features:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">config = &#123;</div><div class="line">  <span class="comment">// [REQUIRED] Set the row height</span></div><div class="line">  rowHeight: <span class="string">'50px'</span>,</div><div class="line"></div><div class="line">  <span class="comment">// (optional) Title to display</span></div><div class="line">  title: <span class="string">'Data Table'</span>,</div><div class="line"></div><div class="line">  <span class="comment">// (optional) No columns header</span></div><div class="line">  noHeader: <span class="literal">true</span>,</div><div class="line"></div><div class="line">  <span class="comment">// (optional) Display refresh button</span></div><div class="line">  refresh: <span class="literal">true</span>,</div><div class="line"></div><div class="line">  <span class="comment">// (optional)</span></div><div class="line">  <span class="comment">// User will be able to choose which columns</span></div><div class="line">  <span class="comment">// should be displayed</span></div><div class="line">  columnPicker: <span class="literal">true</span>,</div><div class="line"></div><div class="line">  <span class="comment">// (optional) How many columns from the left are sticky</span></div><div class="line">  leftStickyColumns: <span class="number">0</span>,</div><div class="line"></div><div class="line">  <span class="comment">// (optional) How many columns from the right are sticky</span></div><div class="line">  rightStickyColumns: <span class="number">2</span>,</div><div class="line"></div><div class="line">  <span class="comment">// (optional)</span></div><div class="line">  <span class="comment">// Styling the body of the data table;</span></div><div class="line">  <span class="comment">// "minHeight", "maxHeight" or "height" are important</span></div><div class="line">  bodyStyle: &#123;</div><div class="line">    maxHeight: <span class="string">'500px'</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">// (optional) By default, Data Table is responsive,</span></div><div class="line">  <span class="comment">// but you can disable this by setting the property to "false"</span></div><div class="line">  responsive: <span class="literal">true</span>,</div><div class="line"></div><div class="line">  <span class="comment">// (optional) Use pagination. Set how many rows per page</span></div><div class="line">  <span class="comment">// and also specify an additional optional parameter ("options")</span></div><div class="line">  <span class="comment">// which forces user to make a selection of how many rows per</span></div><div class="line">  <span class="comment">// page he wants from a specific list</span></div><div class="line">  pagination: &#123;</div><div class="line">    rowsPerPage: <span class="number">15</span>,</div><div class="line">    options: [<span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">30</span>, <span class="number">50</span>, <span class="number">500</span>]</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">// (optional) Select one or more rows for an action</span></div><div class="line">  <span class="comment">// "single" adds a column with radio buttons for single row selection</span></div><div class="line">  <span class="comment">// "multiple" adds a column with checkboxes for multiple row selection</span></div><div class="line">  <span class="comment">// omitting the property will result in no selection column at all</span></div><div class="line">  selection: <span class="string">'multiple'</span>,</div><div class="line"></div><div class="line">  <span class="comment">// (optional) Override default messages when no data is available</span></div><div class="line">  <span class="comment">// or the user filtering returned no results.</span></div><div class="line">  messages: &#123;</div><div class="line">    noData: <span class="string">'&lt;i&gt;warning&lt;/i&gt; No data available to show.'</span>,</div><div class="line">    noDataAfterFiltering: <span class="string">'&lt;i&gt;warning&lt;/i&gt; No results. Please refine your search terms.'</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">// (optional) Override default labels. Useful for I18n.</span></div><div class="line">  labels: &#123;</div><div class="line">    columns: <span class="string">'Coluuuuumns'</span>,</div><div class="line">    allCols: <span class="string">'Eeeeeeeeevery Cols'</span>,</div><div class="line">    rows: <span class="string">'Rooows'</span>,</div><div class="line">    selected: &#123;</div><div class="line">      singular: <span class="string">'item selected.'</span>,</div><div class="line">      plural: <span class="string">'items selected.'</span></div><div class="line">    &#125;,</div><div class="line">    clear: <span class="string">'clear'</span>,</div><div class="line">    search: <span class="string">'Search'</span>,</div><div class="line">    all: <span class="string">'All'</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Columns-definition"><a href="#Columns-definition" class="headerlink" title="Columns definition"></a>Columns definition</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">columns = [</div><div class="line">  &#123;</div><div class="line">    <span class="comment">// [REQUIRED] Column name</span></div><div class="line">    label: <span class="string">'Date'</span>,</div><div class="line"></div><div class="line">    <span class="comment">// [REQUIRED] Row property name</span></div><div class="line">    field: <span class="string">'isodate'</span>,</div><div class="line"></div><div class="line">    <span class="comment">// [REQUIRED] Column width</span></div><div class="line">    width: <span class="string">'100px'</span>,</div><div class="line"></div><div class="line">    <span class="comment">// (optional) Column CSS style</span></div><div class="line">    style: &#123;color: <span class="string">'#ff09fa'</span>&#125;,</div><div class="line">    <span class="comment">// "style" can be a function too if you want to apply</span></div><div class="line">    <span class="comment">// certain CSS style based on cell value:</span></div><div class="line">    <span class="comment">// style (cell_value) &#123; return .... &#125;</span></div><div class="line"></div><div class="line">    <span class="comment">// (optional) Column CSS classes</span></div><div class="line">    classes: <span class="string">'bg-primary'</span>,</div><div class="line">    <span class="comment">// "classes" can be a function too if you want to apply</span></div><div class="line">    <span class="comment">// certain CSS class based on cell value:</span></div><div class="line">    <span class="comment">// classes (cell_value) &#123; return .... &#125;</span></div><div class="line"></div><div class="line">    <span class="comment">// (optional) Can filter/search be applied to this column?</span></div><div class="line">    filter: <span class="literal">true</span>,</div><div class="line"></div><div class="line">    <span class="comment">// (optional) Sortable column?</span></div><div class="line">    <span class="comment">// If yes, then also specify `type` prop to know how to sort</span></div><div class="line">    sort: <span class="literal">true</span>,</div><div class="line">    <span class="comment">// or you can specify a custom sorting method;</span></div><div class="line">    <span class="comment">// works same as Array.prototype.sort().</span></div><div class="line">    <span class="comment">// Return codes:</span></div><div class="line">    <span class="comment">//   &lt; 0 --&gt; "a" should be before "b"</span></div><div class="line">    <span class="comment">//   0   --&gt; "a" is same as "b"</span></div><div class="line">    <span class="comment">//   &gt; 0 --&gt; "a" should be after "b"</span></div><div class="line">    sort (a, b) &#123;</div><div class="line">      <span class="keyword">return</span> (<span class="keyword">new</span> <span class="built_in">Date</span>(a)) - (<span class="keyword">new</span> <span class="built_in">Date</span>(b))</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// Type required if using sort.</span></div><div class="line">    <span class="comment">// Available values: "string", "number", "date", "boolean"</span></div><div class="line">    type: <span class="string">'string'</span>,</div><div class="line"></div><div class="line">    <span class="comment">// (optional)</span></div><div class="line">    <span class="comment">// use a formatter for this column;</span></div><div class="line">    <span class="comment">// transforms original String in another String</span></div><div class="line">    format (value, row) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(value).toLocaleString()</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  ...</div><div class="line">]</div></pre></td></tr></table></figure>
<h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><p>Describing below some of the features so it makes configuring more clear.</p>
<h3 id="Data-Table-Height"><a href="#Data-Table-Height" class="headerlink" title="Data Table Height"></a>Data Table Height</h3><p>Use <code>config.bodyStyle</code> optional property to define the height of your Data Table component. This property of <code>config</code> should contain CSS props and values:</p>
<ul>
<li>If you want to have a maximum height, specify <code>maxHeight</code> CSS prop</li>
<li>If you want to have a minimum height, specify <code>minHeight</code> CSS prop</li>
<li>If you want to have a fixed height, specify <code>height</code> CSS prop</li>
</ul>
<h3 id="Making-a-column-sortable"><a href="#Making-a-column-sortable" class="headerlink" title="Making a column sortable"></a>Making a column sortable</h3><p>In the columns definition array specify <code>sort: true</code> (and also <code>type</code>) for the Object defining that column.<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">columns = [</div><div class="line">  &#123;</div><div class="line">    label: <span class="string">'...'</span>,</div><div class="line">    ...,</div><div class="line">    sort: <span class="literal">true</span>, <span class="comment">// &lt;&lt;&lt;&lt;</span></div><div class="line"></div><div class="line">    <span class="comment">// Available values: "string", "number", "date", "boolean"</span></div><div class="line">    type: <span class="string">'string'</span> <span class="comment">// &lt;&lt;&lt; required to know how to sort</span></div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure></p>
<h3 id="Formatting-a-Cell"><a href="#Formatting-a-Cell" class="headerlink" title="Formatting a Cell"></a>Formatting a Cell</h3><p>There are two options to do this: use a formatter method or render cell through a component.</p>
<h4 id="Formatter-Method"><a href="#Formatter-Method" class="headerlink" title="Formatter Method"></a>Formatter Method</h4><p>In the columns definition array specify <code>format()</code> method for the Object defining that column.<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">columns = [</div><div class="line">  &#123;</div><div class="line">    label: <span class="string">'...'</span>,</div><div class="line">    ...,</div><div class="line">    format (value) &#123; <span class="comment">// &lt;&lt;&lt;&lt;</span></div><div class="line">      <span class="keyword">return</span> <span class="string">'a'</span> + value + <span class="string">'b'</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure></p>
<h4 id="Rendering-with-Component"><a href="#Rendering-with-Component" class="headerlink" title="Rendering with Component"></a>Rendering with Component</h4><p>Sometimes you need to use a Tooltip or some specific component to render the cell. You can define a Vue component through a scoped slot:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-data-table</span> <span class="attr">...</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- Custom renderer for "message" column --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">"col-message"</span> <span class="attr">scope</span>=<span class="string">"cell"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"light-paragraph"</span>&gt;</span>&#123;&#123;cell.data&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-data-table</span>&gt;</span></div></pre></td></tr></table></figure>
<p>The <code>scope</code> property here (named <code>cell</code>) is an Object containing:</p>
<table>
<thead>
<tr>
<th>Scope Property</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>row</code></td>
<td>Object containing the row of the respective cell.</td>
</tr>
<tr>
<td><code>col</code></td>
<td>Object containing column definition for the respective cell.</td>
</tr>
<tr>
<td><code>data</code></td>
<td>Cell value.</td>
</tr>
</tbody>
</table>
<blockquote>
<p>Slot attribute must have a value of the following form: <code>col-[field_name]</code>.<br>Examples: “col-msg” (for field “msg”), “col-date” (for field “date”).</p>
</blockquote>
<p>A field is a property name of a row. Example of Data Table <code>data</code> Vue property (which is an Array of all rows):<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">data = [</div><div class="line">  &#123;</div><div class="line">    id: <span class="number">1</span>,</div><div class="line">    date: <span class="string">'21-10-2016'</span>,</div><div class="line">    msg: <span class="string">'Some message'</span>,</div><div class="line">    ...</div><div class="line">  &#125;,</div><div class="line">  ...</div><div class="line">]</div></pre></td></tr></table></figure></p>
<h2 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a>Performance</h2><p>Performance is always important when dealing with a high number of rows. Data Table component is written to be as efficient as possible (with lots of optimizations behind the scenes – <strong>it’s one of the fastest data table component out there!</strong>), but it’s a good thing to make an idea of what features are the most costly to have. So, in descending order:</p>
<ul>
<li>Rendering a cell with a component</li>
<li>Rendering a cell with a formatter method. The formatter method must be really quick, so strip out whatever is not needed and avoid making complex computations.</li>
</ul>
<p>The more rows you are displaying at a time the more time it will take for Data Table to render the cells. It’s a good idea to force pagination when you’re using lots of formatters or rendering with lots of components.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Dialog]]></title>
      <url>http://beta.quasar-framework.org/components/dialog.html</url>
      <content type="html"><![CDATA[<p>Quasar Dialogs are a great way to offer the user the ability to choose a specific action or list of actions. They also can provide the user with important information, or require them to make a decision (or multiple decisions).</p>
<p>From a UI perspective, you can think of Dialogs as a type of “floating” modal, which covers only a portion of the screen. This means Dialogs should only be used for quick actions, like password verification, small App notifications or quick options. More in depth user flows should be reserved for ​Modals​.</p>
<input type="hidden" data-fullpage-demo="popups/dialog">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Dialog &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">Dialog.create(configObj) (<span class="built_in">Object</span> <span class="keyword">with</span> <span class="string">`close`</span> method)</div></pre></td></tr></table></figure>
<p>A real life example:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Dialog &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">Dialog.create(&#123;</div><div class="line">  title: <span class="string">'Warning'</span>,</div><div class="line">  message: <span class="string">'You are about to run out of disk space.'</span>,</div><div class="line">  buttons: [</div><div class="line">    <span class="string">'Cancel'</span>,</div><div class="line">    &#123;</div><div class="line">      label: <span class="string">'Empty Trash Bin'</span>,</div><div class="line">      handler () &#123;</div><div class="line">        <span class="comment">// empty the trash bin, yo</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>IMPORTANT</strong><br><br>When the user hits the browser/phone/tablet back button, the Dialog will be closed automatically..<br><br>Also, when on a browser, hitting the &lt;ESCAPE&gt; key also closes the Dialog.</p>
</blockquote>
<h2 id="Dialog-Config-Object"><a href="#Dialog-Config-Object" class="headerlink" title="Dialog Config Object"></a>Dialog Config Object</h2><p>In order to create a Dialog, you’ll need an object as a parameter to configure it (<em>configObj</em> above). Below are the properties of this object (all properties are optional):</p>
<table>
<thead>
<tr>
<th>Property Name</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>title</code></td>
<td>String</td>
<td>Title of the Dialog.</td>
</tr>
<tr>
<td><code>message</code></td>
<td>String</td>
<td>Additional message below the title.</td>
</tr>
<tr>
<td><code>position</code></td>
<td>String</td>
<td>Optional. One of ‘top’, ‘right’, ‘bottom’, ‘left’.</td>
</tr>
<tr>
<td><code>form</code></td>
<td>Object</td>
<td>Configure what types of form components to show.</td>
</tr>
<tr>
<td><code>buttons</code></td>
<td>Array of Objects</td>
<td>Bottom buttons for the Dialog. Regardless of the <code>handler</code> that you specify, each button closes the Dialog. You can also specify a String instead of an Object as part of your Array for buttons that only closes the Dialog.</td>
</tr>
<tr>
<td><code>stackButtons</code></td>
<td>Boolean</td>
<td>If you want your buttons placed one below the previous one instead of in the same row.</td>
</tr>
<tr>
<td><code>nobuttons</code></td>
<td>Boolean</td>
<td>When you don’t want any buttons on your Dialog. By default, if no buttons are specified, an “OK” button is added. This property avoids this default addition.</td>
</tr>
<tr>
<td><code>progress</code></td>
<td>Object</td>
<td>When you want to make your Dialog display a progress bar. Check <a href="#Progress-Dialog">Progress Dialog</a> below.</td>
</tr>
<tr>
<td><code>onDismiss</code></td>
<td>Function</td>
<td>Function to be called when the Dialog gets closed (or dismissed).</td>
</tr>
<tr>
<td><code>noBackdropDismiss</code></td>
<td>Boolean</td>
<td>If set true, the Dialog cannot be dismissed by clicking/tapping on backdrop.</td>
</tr>
<tr>
<td><code>noEscDismiss</code></td>
<td>Boolean</td>
<td>If set true, the Dialog cannot be dismissed by hitting Escape key.</td>
</tr>
</tbody>
</table>
<h2 id="Tip-on-using-“this”-in-handlers"><a href="#Tip-on-using-“this”-in-handlers" class="headerlink" title="Tip on using “this” in handlers"></a>Tip on using “this” in handlers</h2><p>A common use case is this scenario in script part of a Vue file, where you’d like the button handler to be able to access the Vue component scope with <code>this</code>.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  ...,</div><div class="line">  methods: &#123;</div><div class="line">    data () &#123;</div><div class="line">      <span class="comment">// defining a variable for this example</span></div><div class="line">      <span class="comment">// to highlight how you can access it</span></div><div class="line">      <span class="comment">// later when we call the Dialog</span></div><div class="line">      <span class="keyword">return</span> &#123;</div><div class="line">        variable: <span class="string">'alright'</span></div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    showDialog () &#123;</div><div class="line">      <span class="comment">// "this" here refers to current component</span></div><div class="line"></div><div class="line">      <span class="comment">// prints: "alright"</span></div><div class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.variable)</div><div class="line"></div><div class="line">      Dialog.create(&#123;</div><div class="line">        title: <span class="string">'Some title'</span>,</div><div class="line">        message: <span class="string">'Some message'</span>,</div><div class="line">        buttons: [</div><div class="line">          <span class="string">'Cancel'</span>,</div><div class="line">          &#123;</div><div class="line">            label: <span class="string">'Empty Trash Bin'</span>,</div><div class="line">            handler () &#123;</div><div class="line">              <span class="comment">// "this" refers to the scope of this method only,</span></div><div class="line">              <span class="comment">// not your Vue component</span></div><div class="line"></div><div class="line">              <span class="comment">// prints: undefined</span></div><div class="line">              <span class="built_in">console</span>.log(<span class="keyword">this</span>.variable)</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">        ]</div><div class="line">      &#125;)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>What you need to do is use ES6 arrow functions instead:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// instead of:</span></div><div class="line">handler () &#123; .... &#125;</div><div class="line"></div><div class="line"><span class="comment">// use this:</span></div><div class="line">handler: () =&gt; &#123;</div><div class="line">  <span class="comment">// now "this" points to the method's outer JS scope,</span></div><div class="line">  <span class="comment">// in this case your Vue component scope</span></div><div class="line"></div><div class="line">  <span class="comment">// correctly prints out "alright"</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.variable)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Since using ES6, it’s time to forget about temporary variables in your code, like in the following example:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// use ES6 arrow function instead!</span></div><div class="line"><span class="comment">// it's much cleaner</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> self = <span class="keyword">this</span></div><div class="line"></div><div class="line">Dialog.create(&#123;</div><div class="line">  ...,</div><div class="line">  buttons: [&#123;</div><div class="line">    handler () &#123;</div><div class="line">      <span class="built_in">console</span>.log(self.variable)</div><div class="line">    &#125;</div><div class="line">  &#125;]</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h2 id="Progress-Dialog"><a href="#Progress-Dialog" class="headerlink" title="Progress Dialog"></a>Progress Dialog</h2><p>There are two types of progress bars you can display in a Dialog: determinate (when you can quantify the progress) or indeterminate (when you don’t know the moment the progress will be done).</p>
<h3 id="Determinate-Mode"><a href="#Determinate-Mode" class="headerlink" title="Determinate Mode"></a>Determinate Mode</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Dialog, Toast &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="comment">// "progress" property from "configObj"</span></div><div class="line"><span class="keyword">let</span> progress = &#123;</div><div class="line">  model: <span class="number">5</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> dialog = Dialog.create(&#123;</div><div class="line">  title: <span class="string">'Progress'</span>,</div><div class="line">  message: <span class="string">'Computing...'</span>,</div><div class="line">  progress,</div><div class="line">  buttons: [</div><div class="line">    &#123;</div><div class="line">      label: <span class="string">'Cancel'</span>,</div><div class="line">      handler () &#123;</div><div class="line">        clearInterval(timeout)</div><div class="line">        Toast.create(<span class="string">'Canceled on progress '</span> + progress.model)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">const</span> timeout = setInterval(() =&gt; &#123;</div><div class="line">  progress.model += <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">5</span>) + <span class="number">5</span></div><div class="line">  <span class="keyword">if</span> (progress.model &gt;= <span class="number">96</span>) &#123;</div><div class="line">    clearInterval(timeout)</div><div class="line">    dialog.close()</div><div class="line">  &#125;</div><div class="line">&#125;, <span class="number">300</span>)</div></pre></td></tr></table></figure>
<h3 id="Indeterminate-Mode"><a href="#Indeterminate-Mode" class="headerlink" title="Indeterminate Mode"></a>Indeterminate Mode</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Dialog, Toast &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> dialog = Dialog.create(&#123;</div><div class="line">  title: <span class="string">'Progress'</span>,</div><div class="line">  message: <span class="string">'Computing...'</span>,</div><div class="line">  progress: &#123;</div><div class="line">    indeterminate: <span class="literal">true</span></div><div class="line">  &#125;,</div><div class="line">  buttons: [</div><div class="line">    &#123;</div><div class="line">      label: <span class="string">'Cancel'</span>,</div><div class="line">      handler (data) &#123;</div><div class="line">        clearTimeout(timeout)</div><div class="line">        Toast.create(<span class="string">'Canceled...'</span>)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">const</span> timeout = setTimeout(() =&gt; &#123;</div><div class="line">  clearInterval(timeout)</div><div class="line">  dialog.close()</div><div class="line">&#125;, <span class="number">3000</span>)</div></pre></td></tr></table></figure>
<h2 id="Dialog-with-Form-Components"><a href="#Dialog-with-Form-Components" class="headerlink" title="Dialog with Form Components"></a>Dialog with Form Components</h2><p>You can combine multiple form components (textfields, chips, radios, checkboxes, …), to configure your Dialog through the <code>form</code> Object property.</p>
<p>Each property of <code>form</code> is an Object itself. The key will be used later, when the user closes the Dialog. For example:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&#123;form: &#123;name: &#123;...&#125;&#125;&#125;</div><div class="line"><span class="comment">// will pass a "name" property later:</span></div><div class="line">handler (data) &#123;</div><div class="line">  <span class="comment">// data.name --&gt; model of your form component</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Each Form Component has a certain syntax that you must follow as described below. At the end, you’ll learn how to separate these into sections by using a “heading”.</p>
<blockquote>
<p>The default value for the following Form Components is taken from the <code>model</code> property.</p>
</blockquote>
<h3 id="Textfields"><a href="#Textfields" class="headerlink" title="Textfields"></a>Textfields</h3><p>Supported types: ‘text’, ‘textarea’, ‘email’, ‘tel’, ‘file’, ‘number’, ‘password’, ‘url’, ‘chips’:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Dialog, Toast &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">Dialog.create(&#123;</div><div class="line">  title: <span class="string">'Prompt'</span>,</div><div class="line">  form: &#123;</div><div class="line">    name: &#123;</div><div class="line">      type: <span class="string">'text'</span>,</div><div class="line">      label: <span class="string">'Textbox'</span>,</div><div class="line">      model: <span class="string">''</span></div><div class="line">    &#125;,</div><div class="line">    pass: &#123;</div><div class="line">      type: <span class="string">'password'</span>,</div><div class="line">      label: <span class="string">'Password'</span>,</div><div class="line">      model: <span class="string">''</span></div><div class="line">    &#125;,</div><div class="line">    age: &#123;</div><div class="line">      type: <span class="string">'number'</span>,</div><div class="line">      label: <span class="string">'Numeric'</span>,</div><div class="line">      model: <span class="number">10</span>,</div><div class="line">      min: <span class="number">1</span>,</div><div class="line">      max: <span class="number">100</span></div><div class="line">    &#125;,</div><div class="line">    tags: &#123;</div><div class="line">      type: <span class="string">'chips'</span>,</div><div class="line">      label: <span class="string">'Chips'</span>,</div><div class="line">      model: [<span class="string">'Joe'</span>, <span class="string">'John'</span>]</div><div class="line">    &#125;,</div><div class="line">    comments: &#123;</div><div class="line">      type: <span class="string">'textarea'</span>,</div><div class="line">      label: <span class="string">'Textarea'</span>,</div><div class="line">      model: <span class="string">''</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  buttons: [</div><div class="line">    <span class="string">'Cancel'</span>,</div><div class="line">    &#123;</div><div class="line">      label: <span class="string">'Ok'</span>,</div><div class="line">      handler (data) &#123;</div><div class="line">        Toast.create(<span class="string">'Returned '</span> + <span class="built_in">JSON</span>.stringify(data))</div><div class="line">        <span class="comment">// data.name is 'Quasar'</span></div><div class="line">        <span class="comment">// data.pass is 'rulz!'</span></div><div class="line">        <span class="comment">// data.age is 1</span></div><div class="line">        <span class="comment">// data.tags is ['Joe', 'John'],</span></div><div class="line">        <span class="comment">// data.comments is 'Some comments...'</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="Radios"><a href="#Radios" class="headerlink" title="Radios"></a>Radios</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Dialog, Toast &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">Dialog.create(&#123;</div><div class="line">  title: <span class="string">'Radios'</span>,</div><div class="line">  message: <span class="string">'Message can be used for all types of Dialogs.'</span>,</div><div class="line">  form: &#123;</div><div class="line">    option: &#123;</div><div class="line">      type: <span class="string">'radio'</span>,</div><div class="line">      model: <span class="string">'opt1'</span>,</div><div class="line">      items: [</div><div class="line">        &#123;label: <span class="string">'Option 1'</span>, value: <span class="string">'opt1'</span>, color: <span class="string">'secondary'</span>&#125;,</div><div class="line">        &#123;label: <span class="string">'Option 2'</span>, value: <span class="string">'opt2'</span>&#125;,</div><div class="line">        &#123;label: <span class="string">'Option 3'</span>, value: <span class="string">'opt3'</span>&#125;</div><div class="line">      ]</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  buttons: [</div><div class="line">    <span class="string">'Cancel'</span>,</div><div class="line">    &#123;</div><div class="line">      label: <span class="string">'Ok'</span>,</div><div class="line">      handler (data) &#123;</div><div class="line">        Toast.create(<span class="string">'Returned '</span> + <span class="built_in">JSON</span>.stringify(data))</div><div class="line">        <span class="comment">// data.option is 'opt1'</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="Checkboxes-amp-Toggles"><a href="#Checkboxes-amp-Toggles" class="headerlink" title="Checkboxes &amp; Toggles"></a>Checkboxes &amp; Toggles</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Dialog, Toast &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">Dialog.create(&#123;</div><div class="line">  title: <span class="string">'Checkbox &amp; Toggle'</span>,</div><div class="line">  message: <span class="string">'Message can be used for all types of Dialogs.'</span>,</div><div class="line">  form: &#123;</div><div class="line">    header1: &#123;</div><div class="line">      type: <span class="string">'heading'</span>,</div><div class="line">      label: <span class="string">'Checkboxes'</span></div><div class="line">    &#125;,</div><div class="line">    group1: &#123;</div><div class="line">      type: <span class="string">'checkbox'</span>,</div><div class="line">      model: [<span class="string">'opt2'</span>, <span class="string">'opt3'</span>],</div><div class="line">      items: [</div><div class="line">        &#123;label: <span class="string">'Option 1'</span>, value: <span class="string">'opt1'</span>&#125;,</div><div class="line">        &#123;label: <span class="string">'Option 2'</span>, value: <span class="string">'opt2'</span>, color: <span class="string">'secondary'</span>&#125;,</div><div class="line">        &#123;label: <span class="string">'Option 3'</span>, value: <span class="string">'opt3'</span>, color: <span class="string">'amber'</span>&#125;</div><div class="line">      ]</div><div class="line">    &#125;,</div><div class="line">    header2: &#123;</div><div class="line">      type: <span class="string">'heading'</span>,</div><div class="line">      label: <span class="string">'Toggles'</span></div><div class="line">    &#125;,</div><div class="line">    group2: &#123;</div><div class="line">      type: <span class="string">'toggle'</span>,</div><div class="line">      model: [],</div><div class="line">      items: [</div><div class="line">        &#123;label: <span class="string">'Option 1'</span>, value: <span class="string">'opt1'</span>&#125;,</div><div class="line">        &#123;label: <span class="string">'Option 2'</span>, value: <span class="string">'opt2'</span>, color: <span class="string">'secondary'</span>&#125;,</div><div class="line">        &#123;label: <span class="string">'Option 3'</span>, value: <span class="string">'opt3'</span>, color: <span class="string">'amber'</span>&#125;</div><div class="line">      ]</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  buttons: [</div><div class="line">    <span class="string">'Cancel'</span>,</div><div class="line">    &#123;</div><div class="line">      label: <span class="string">'Ok'</span>,</div><div class="line">      handler (data) &#123;</div><div class="line">        Toast.create(<span class="string">'Returned '</span> + <span class="built_in">JSON</span>.stringify(data))</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="Slider-amp-Range"><a href="#Slider-amp-Range" class="headerlink" title="Slider &amp; Range"></a>Slider &amp; Range</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Dialog, Toast &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">Dialog.create(&#123;</div><div class="line">  title: <span class="string">'Slider &amp; Range'</span>,</div><div class="line">  form: &#123;</div><div class="line">    slider: &#123;</div><div class="line">      type: <span class="string">'slider'</span>,</div><div class="line">      label: <span class="string">'Slider'</span>,</div><div class="line">      min: <span class="number">10</span>,</div><div class="line">      max: <span class="number">20</span>,</div><div class="line">      withLabel: <span class="literal">true</span>,</div><div class="line">      model: <span class="number">12</span>,</div><div class="line">      color: <span class="string">'secondary'</span></div><div class="line">    &#125;,</div><div class="line">    range: &#123;</div><div class="line">      type: <span class="string">'range'</span>,</div><div class="line">      label: <span class="string">'Range'</span>,</div><div class="line">      model: &#123;</div><div class="line">        min: <span class="number">7</span>,</div><div class="line">        max: <span class="number">12</span></div><div class="line">      &#125;,</div><div class="line">      min: <span class="number">5</span>,</div><div class="line">      max: <span class="number">15</span>,</div><div class="line">      withLabel: <span class="literal">true</span></div><div class="line">    &#125;,</div><div class="line">    step: &#123;</div><div class="line">      type: <span class="string">'slider'</span>,</div><div class="line">      label: <span class="string">'With step &amp; snap'</span>,</div><div class="line">      model: <span class="number">-6</span>,</div><div class="line">      min: <span class="number">-10</span>,</div><div class="line">      max: <span class="number">10</span>,</div><div class="line">      step: <span class="number">4</span>,</div><div class="line">      snap: <span class="literal">true</span>,</div><div class="line">      markers: <span class="literal">true</span>,</div><div class="line">      withLabel: <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  buttons: [</div><div class="line">    <span class="string">'Cancel'</span>,</div><div class="line">    &#123;</div><div class="line">      label: <span class="string">'Ok'</span>,</div><div class="line">      handler (data) &#123;</div><div class="line">        Toast.create(<span class="string">'Returned '</span> + <span class="built_in">JSON</span>.stringify(data))</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="Rating"><a href="#Rating" class="headerlink" title="Rating"></a>Rating</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Dialog, Toast &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">Dialog.create(&#123;</div><div class="line">  title: <span class="string">'Rating'</span>,</div><div class="line">  form: &#123;</div><div class="line">    rating: &#123;</div><div class="line">      type: <span class="string">'rating'</span>,</div><div class="line">      label: <span class="string">'How many stars?'</span>,</div><div class="line">      model: <span class="number">0</span>,</div><div class="line">      max: <span class="number">5</span></div><div class="line">    &#125;,</div><div class="line">    rating2: &#123;</div><div class="line">      type: <span class="string">'rating'</span>,</div><div class="line">      label: <span class="string">'How many pencils?'</span>,</div><div class="line">      model: <span class="number">3</span>,</div><div class="line">      max: <span class="number">6</span>,</div><div class="line">      icon: <span class="string">'create'</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  buttons: [</div><div class="line">    <span class="string">'Cancel'</span>,</div><div class="line">    &#123;</div><div class="line">      label: <span class="string">'Ok'</span>,</div><div class="line">      handler (data) &#123;</div><div class="line">        Toast.create(<span class="string">'Returned '</span> + <span class="built_in">JSON</span>.stringify(data))</div><div class="line">        <span class="comment">// data.rating is 0</span></div><div class="line">        <span class="comment">// data.rating2 is 3</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="Headings"><a href="#Headings" class="headerlink" title="Headings"></a>Headings</h3><p>Since you can combine different components within the Dialog, sometimes you may need to separate them into sections. For this purpose Quasar offers the “heading” type:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Dialog, Toast &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">Dialog.create(&#123;</div><div class="line">  ...,</div><div class="line">  form: &#123;</div><div class="line">    header1: &#123;</div><div class="line">      type: <span class="string">'heading'</span>,</div><div class="line">      label: <span class="string">'Checkboxes'</span></div><div class="line">    &#125;,</div><div class="line">    group1: &#123;</div><div class="line">      type: <span class="string">'checkbox'</span>,</div><div class="line">      items: [...]</div><div class="line">    &#125;,</div><div class="line">    ...,</div><div class="line">    header2: &#123;</div><div class="line">      type: <span class="string">'heading'</span>,</div><div class="line">      label: <span class="string">'Toggles'</span></div><div class="line">    &#125;,</div><div class="line">    group2: &#123;</div><div class="line">      type: <span class="string">'toggle'</span>,</div><div class="line">      items: [...]</div><div class="line">    &#125;,</div><div class="line">    ...</div><div class="line">  &#125;,</div><div class="line">  buttons: [</div><div class="line">    <span class="string">'Cancel'</span>,</div><div class="line">    &#123;</div><div class="line">      label: <span class="string">'Ok'</span>,</div><div class="line">      handler (data) &#123;</div><div class="line">        Toast.create(<span class="string">'Returned '</span> + <span class="built_in">JSON</span>.stringify(data))</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>See demo with “Multiple Selections”.</p>
<h2 id="More-Examples"><a href="#More-Examples" class="headerlink" title="More Examples"></a>More Examples</h2><h3 id="Alert"><a href="#Alert" class="headerlink" title="Alert"></a>Alert</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Dialog &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">Dialog.create(&#123;</div><div class="line">  title: <span class="string">'Alert'</span>,</div><div class="line">  message: <span class="string">'Modern HTML5 Single Page Application front-end framework on steroids.'</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="Confirm"><a href="#Confirm" class="headerlink" title="Confirm"></a>Confirm</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Dialog &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">Dialog.create(&#123;</div><div class="line">  title: <span class="string">'Confirm'</span>,</div><div class="line">  message: <span class="string">'Modern HTML5 Single Page Application front-end framework on steroids.'</span>,</div><div class="line">  buttons: [</div><div class="line">    &#123;</div><div class="line">      label: <span class="string">'Disagree'</span>,</div><div class="line">      handler () &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Disagreed...'</span>)</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      label: <span class="string">'Agree'</span>,</div><div class="line">      handler () &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Agreed!'</span>)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="Styling-Buttons"><a href="#Styling-Buttons" class="headerlink" title="Styling Buttons"></a>Styling Buttons</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">Dialog.create(&#123;</div><div class="line">  title: <span class="string">'Confirm'</span>,</div><div class="line">  message: <span class="string">'Custom button classes.'</span>,</div><div class="line">  buttons: [</div><div class="line">    &#123;</div><div class="line">      label: <span class="string">'Disagree'</span>,</div><div class="line">      color: <span class="string">'negative'</span>,</div><div class="line">      outline: <span class="literal">true</span>,</div><div class="line">      style: <span class="string">'text-decoration: underline'</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      label: <span class="string">'Agree'</span>,</div><div class="line">      color: <span class="string">'positive'</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="Stacked-Buttons"><a href="#Stacked-Buttons" class="headerlink" title="Stacked Buttons"></a>Stacked Buttons</h3><p>If you have many buttons or buttons with lots of text, you can set the <code>stackButtons</code> property to <code>true</code> when creating your Dialog. This will display your in separate rows:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Dialog &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">Dialog.create(&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  stackButtons: <span class="literal">true</span>,</div><div class="line">  buttons: [......]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="Prevent-Closing-the-Dialog"><a href="#Prevent-Closing-the-Dialog" class="headerlink" title="Prevent Closing the Dialog"></a>Prevent Closing the Dialog</h3><p>You can prevent a button from closing the Dialog. This is useful, when you need to do some validations on form fields.</p>
<p>Add <code>preventClose: true</code> to the button definition. This will make the <code>handler()</code> method receive a second parameter, which when called, closes the Dialog. Not calling it obviously keeps the Dialog opened.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Dialog, Toast &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">Dialog.create(&#123;</div><div class="line">  title: <span class="string">'Prevent Close'</span>,</div><div class="line">  message: <span class="string">'Having "Prevent" checkbox ticked and then hitting "Try to Close" button will prevent the dialog from closing.'</span>,</div><div class="line">  form: &#123;</div><div class="line">    prevent: &#123;</div><div class="line">      type: <span class="string">'checkbox'</span>,</div><div class="line">      model: [<span class="string">'prevent'</span>],</div><div class="line">      items: [</div><div class="line">        &#123;label: <span class="string">'Prevent dialog close'</span>, value: <span class="string">'prevent'</span>&#125;</div><div class="line">      ]</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  buttons: [</div><div class="line">    &#123;</div><div class="line">      label: <span class="string">'Try to Close'</span>,</div><div class="line">      preventClose: <span class="literal">true</span>,</div><div class="line">      handler (data, close) &#123;</div><div class="line">        <span class="keyword">if</span> (!data.prevent.length) &#123;</div><div class="line">          close(() =&gt; &#123;</div><div class="line">            Toast.create(<span class="string">`Finally. It's closed now.`</span>)</div><div class="line">          &#125;)</div><div class="line">          <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        Toast.create(<span class="string">'Untick "Prevent" checkbox to be able to close the Dialog.'</span>)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="Complex-Dialog-with-Form"><a href="#Complex-Dialog-with-Form" class="headerlink" title="Complex Dialog with Form"></a>Complex Dialog with Form</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Dialog, Toast &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">Dialog.create(&#123;</div><div class="line">  title: <span class="string">'Prompt'</span>,</div><div class="line">  message: <span class="string">'Modern HTML5 Single Page Application front-end framework on steroids.'</span>,</div><div class="line">  form: &#123;</div><div class="line">    name: &#123;</div><div class="line">      type: <span class="string">'text'</span>,</div><div class="line">      label: <span class="string">'Textbox'</span>,</div><div class="line">      model: <span class="string">''</span></div><div class="line">    &#125;,</div><div class="line">    age: &#123;</div><div class="line">      type: <span class="string">'number'</span>,</div><div class="line">      label: <span class="string">'Numeric'</span>,</div><div class="line">      model: <span class="number">10</span>,</div><div class="line">      min: <span class="number">5</span>,</div><div class="line">      max: <span class="number">90</span></div><div class="line">    &#125;,</div><div class="line">    rating: &#123;</div><div class="line">      type: <span class="string">'rating'</span>,</div><div class="line">      label: <span class="string">'How many stars?'</span>,</div><div class="line">      model: <span class="number">0</span>,</div><div class="line">      max: <span class="number">5</span></div><div class="line">    &#125;,</div><div class="line">    tags: &#123;</div><div class="line">      type: <span class="string">'chips'</span>,</div><div class="line">      label: <span class="string">'Chips'</span>,</div><div class="line">      model: [<span class="string">'Joe'</span>, <span class="string">'John'</span>]</div><div class="line">    &#125;,</div><div class="line">    group1: &#123;</div><div class="line">      type: <span class="string">'checkbox'</span>,</div><div class="line">      model: [<span class="string">'opt2'</span>],</div><div class="line">      items: [</div><div class="line">        &#123;label: <span class="string">'Option 1'</span>, value: <span class="string">'opt1'</span>&#125;,</div><div class="line">        &#123;label: <span class="string">'Option 2'</span>, value: <span class="string">'opt2'</span>&#125;,</div><div class="line">        &#123;label: <span class="string">'Option 3'</span>, value: <span class="string">'opt3'</span>&#125;</div><div class="line">      ]</div><div class="line">    &#125;,</div><div class="line">    comments: &#123;</div><div class="line">      type: <span class="string">'textarea'</span>,</div><div class="line">      label: <span class="string">'Textarea'</span>,</div><div class="line">      model: <span class="string">''</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  buttons: [</div><div class="line">    <span class="string">'Cancel'</span>,</div><div class="line">    &#123;</div><div class="line">      label: <span class="string">'Ok'</span>,</div><div class="line">      handler (data) &#123;</div><div class="line">        Toast.create(<span class="string">'Returned '</span> + <span class="built_in">JSON</span>.stringify(data))</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="Sticking-Dialog-to-an-Edge"><a href="#Sticking-Dialog-to-an-Edge" class="headerlink" title="Sticking Dialog to an Edge"></a>Sticking Dialog to an Edge</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Dialog &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="comment">// works with any type of Dialog</span></div><div class="line">Dialog.create(&#123;</div><div class="line">  title: <span class="string">'Positioned'</span>,</div><div class="line">  message: <span class="string">'This dialog appears from top.'</span>,</div><div class="line">  position: <span class="string">'top'</span> <span class="comment">// or 'right', 'bottom', 'left'</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Datetime Range]]></title>
      <url>http://beta.quasar-framework.org/components/datetime-range.html</url>
      <content type="html"><![CDATA[<p>The Datetime Range component offers the users the ability to input a date, time or datetime interval. It is based off of the <a href="/components/datetime.html">Datetime component</a>. Before diving in, make sure you know how to use the Datetime component, since this component shares same properties.</p>
<input type="hidden" data-fullpage-demo="forms/datetime/range-datetime">

<p>In essense, Datetime Range is made up of two Datetime components, one for “from” and one for “to”, making up a date interval together.</p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Date Range --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-datetime-range</span></span></div><div class="line">  <span class="attr">type</span>=<span class="string">"date"</span></div><div class="line">  <span class="attr">v-model</span>=<span class="string">"range"</span></div><div class="line">  <span class="attr">:min</span>=<span class="string">"min"</span></div><div class="line">  <span class="attr">:max</span>=<span class="string">"max"</span></div><div class="line">/&gt;</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Time Range --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-datetime-range</span></span></div><div class="line">  <span class="attr">type</span>=<span class="string">"time"</span></div><div class="line">  <span class="attr">v-model</span>=<span class="string">"range"</span></div><div class="line">  <span class="attr">:min</span>=<span class="string">"min"</span></div><div class="line">  <span class="attr">:max</span>=<span class="string">"max"</span></div><div class="line">/&gt;</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Datetime Range --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-datetime-range</span></span></div><div class="line">  <span class="attr">type</span>=<span class="string">"datetime"</span></div><div class="line">  <span class="attr">v-model</span>=<span class="string">"range"</span></div><div class="line">  <span class="attr">:min</span>=<span class="string">"min"</span></div><div class="line">  <span class="attr">:max</span>=<span class="string">"max"</span></div><div class="line">/&gt;</div></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><blockquote>
<p><strong>Note</strong><br>The properties below are only special to the Datetime Range component. This component also shares all of the properties of the <a href="/components/datetime.html">Datetime component</a> which get applied to both inner Datetimes.</p>
</blockquote>
<p>Supports <code>v-model</code> which must be an Object with <code>from</code> and <code>to</code> properties, which each holding the same types <code>String</code>, <code>Number</code> and <code>Date</code> as the model used for <a href="/components/datetime.html">Datetime component</a>. In effect, these are the models for each of the two datetime components used to create the range.</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>default-from</code></td>
<td>String, Number, Date</td>
<td>Used as “default-selection” for “from” model.</td>
</tr>
<tr>
<td><code>default-to</code></td>
<td>String, Number, Date</td>
<td>Used as “default-selection” for “to” model.</td>
</tr>
<tr>
<td><code>css</code></td>
<td>String/Object</td>
<td>CSS applied to each Datetime component</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Vue Event</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@change(newVal)</code></td>
<td>Triggered when model (Object with <code>to</code> and <code>from</code> props) changes.</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Datetime]]></title>
      <url>http://beta.quasar-framework.org/components/datetime.html</url>
      <content type="html"><![CDATA[<p>The Datetime component provides a method to input dates and time or both. There are also two more version available: <a href="/components/inline-datetime.html">Inline Datetime</a> and <a href="/components/datetime-range.html">Datetime Range</a>.</p>
<input type="hidden" data-fullpage-demo="forms/datetime/input-datetime">

<p>You’ll notice in the demos that the iOS and Material Datetime pickers look and act totally different, just like their native counterparts.</p>
<p>Works well with <a href="/components/field.html">QField</a> for additional functionality such as a helper, error message placeholder and many others.</p>
<input type="hidden" data-fullpage-demo="form/datetime/input">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Only Date --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-datetime</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">type</span>=<span class="string">"date"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Only Time --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-datetime</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">type</span>=<span class="string">"time"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Date &amp; Time --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-datetime</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">type</span>=<span class="string">"datetime"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><p>Supports <code>v-model</code> which must be a String, Number or Date Object.</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>type</code></td>
<td>String</td>
<td>One of <code>date</code>, <code>time</code> or <code>datetime</code>. Default is <code>date</code>.</td>
</tr>
<tr>
<td><code>min</code></td>
<td>String</td>
<td>Optional minimum value it can take. Has same format as Datetime model.</td>
</tr>
<tr>
<td><code>max</code></td>
<td>String</td>
<td>Optional maximum value it can take. Has same format as Datetime model.</td>
</tr>
<tr>
<td><code>month-names</code></td>
<td>Array</td>
<td>Array of month names, starting with January.</td>
</tr>
<tr>
<td><code>day-names</code></td>
<td>Array</td>
<td>Array of day names, starting with Sunday, Monday, …</td>
</tr>
<tr>
<td><code>default-selection</code></td>
<td>String/Number/Date</td>
<td>Default date/time for picker when model is not yet set.</td>
</tr>
<tr>
<td><code>monday-first</code></td>
<td>Boolean</td>
<td>Use Monday as first day of week. Otherwise it’s Sunday.</td>
</tr>
<tr>
<td><code>saturday-first</code></td>
<td>Boolean</td>
<td>Use Saturday as first day of week. Otherwise it’s Sunday.</td>
</tr>
<tr>
<td><code>format</code></td>
<td>String</td>
<td>Format as described on Handling JS Date page under <a href="/components/handling-js-date.html#Format-for-display">Format for display</a> section.</td>
</tr>
<tr>
<td><code>format24h</code></td>
<td>Boolean</td>
<td>Use 24 hour time for Material picker instead of AM/PM system which is default.</td>
</tr>
<tr>
<td><code>placeholder</code></td>
<td>String</td>
<td>Placeholder text for input frame to use when model is not set (empty).</td>
</tr>
<tr>
<td><code>display-value</code></td>
<td>String</td>
<td>Text to display on input frame. Superseeds ‘placeholder’.</td>
</tr>
<tr>
<td><code>no-clear</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, the clear button won’t be shown.</td>
</tr>
<tr>
<td><code>ok-label</code></td>
<td>String</td>
<td>Text for the button to accept the input.</td>
</tr>
<tr>
<td><code>clear-label</code></td>
<td>String</td>
<td>Text for the button to clear the field.</td>
</tr>
<tr>
<td><code>cancel-label</code></td>
<td>String</td>
<td>Text for the button to cancel input with no change.</td>
</tr>
</tbody>
</table>
<p>Common input frame properties:</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>prefix</code></td>
<td>String</td>
<td>A text that should be shown before the textfield.</td>
</tr>
<tr>
<td><code>suffix</code></td>
<td>String</td>
<td>A text that should be shown after the textfield.</td>
</tr>
<tr>
<td><code>float-label</code></td>
<td>String</td>
<td>A text label that will “float” up above the input field, once the input field gets focus.</td>
</tr>
<tr>
<td><code>stack-label</code></td>
<td>String</td>
<td>A text label that will be shown above the input field and is static.</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>One from <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>inverted</code></td>
<td>Boolean</td>
<td>Inverted mode. Color is applied to background instead.</td>
</tr>
<tr>
<td><code>dark</code></td>
<td>Boolean</td>
<td>Is QDatetime rendered on a dark background?</td>
</tr>
<tr>
<td><code>align</code></td>
<td>String</td>
<td>One of ‘left’, ‘center’ or ‘right’ which determines the text align within textfield.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, textfield is disabled and the user cannot type anything.</td>
</tr>
<tr>
<td><code>error</code></td>
<td>Boolean</td>
<td>If set to true, the input fields colors are changed to show there is an error.</td>
</tr>
<tr>
<td><code>before</code></td>
<td>Array of Objects</td>
<td>Icon buttons on left side of input frame. Read below more details.</td>
</tr>
<tr>
<td><code>after</code></td>
<td>Array of Objects</td>
<td>Icon buttons on right side of input frame. Read below more details.</td>
</tr>
</tbody>
</table>
<h3 id="Icon-buttons"><a href="#Icon-buttons" class="headerlink" title="Icon buttons"></a>Icon buttons</h3><p>This section refers to <code>before</code> and <code>after</code> properties which can add additional buttons as icons to the textfield. Here is the structure of the two properties:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="comment">// required icon</span></div><div class="line">  icon: <span class="built_in">String</span>,</div><div class="line">  <span class="comment">// required function to call when</span></div><div class="line">  <span class="comment">// icon is clicked/tapped</span></div><div class="line">  handler: <span class="built_in">Function</span>,</div><div class="line"></div><div class="line">  <span class="comment">// Optional. Show icon button</span></div><div class="line">  <span class="comment">// if model has a value</span></div><div class="line">  content: <span class="built_in">Boolean</span>,</div><div class="line"></div><div class="line">  <span class="comment">// Optional. Show icon button</span></div><div class="line">  <span class="comment">// if textfield is marked with error</span></div><div class="line">  error: <span class="built_in">Boolean</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Examples:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!--</span></div><div class="line">  Show an icon button (with 'warning' as icon)</div><div class="line">  when there is an error on QDatetime (through "error" prop)</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">q-datetime</span></span></div><div class="line">  <span class="attr">v-model</span>=<span class="string">"date"</span></div><div class="line">  <span class="attr">:error</span>=<span class="string">"error"</span></div><div class="line">  <span class="attr">type</span>=<span class="string">"password"</span></div><div class="line">  <span class="attr">:after</span>=<span class="string">"[</span></div><div class="line">    &#123;</div><div class="line">      icon: 'warning',</div><div class="line">      error: true,</div><div class="line">      handler () &#123;</div><div class="line">        // do something...</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]"</div><div class="line">/&gt;</div><div class="line"></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line">  Show an icon button (with 'arrow_forward' as icon)</div><div class="line">  when the model has a non empty value</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">q-datetime</span></span></div><div class="line">  <span class="attr">v-model</span>=<span class="string">"date"</span></div><div class="line">  <span class="attr">:after</span>=<span class="string">"[</span></div><div class="line">    &#123;</div><div class="line">      icon: 'arrow_forward',</div><div class="line">      content: true,</div><div class="line">      handler () &#123;</div><div class="line">        // do something...</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]"</div><div class="line">/&gt;</div></pre></td></tr></table></figure></p>
<h2 id="Vue-Methods"><a href="#Vue-Methods" class="headerlink" title="Vue Methods"></a>Vue Methods</h2><table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>open()</code></td>
<td>Show Popover (on desktop) and Dialog (on mobile) to select date and/or time.</td>
</tr>
<tr>
<td><code>close([Function])</code></td>
<td>Hide Popover (on desktop) and Dialog (on mobile) to select date and/or time and execute Function after it’s been hidden.</td>
</tr>
<tr>
<td><code>clear()</code></td>
<td>Sets model to empty string (removes current value).</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Vue Event</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@change(newValue)</code></td>
<td>Triggered on model value change.</td>
</tr>
<tr>
<td><code>@blur</code></td>
<td>Triggered, when the modal/ popup is closed.</td>
</tr>
<tr>
<td><code>@focus</code></td>
<td>Triggered, when the modal/ popup is opened.</td>
</tr>
</tbody>
</table>
<h2 id="The-Model"><a href="#The-Model" class="headerlink" title="The Model"></a>The Model</h2><p>Quasar uses its own date utility to work with date values within the model of the component.</p>
<blockquote>
<p><strong>IMPORTANT</strong><br>The model (variable binded to <code>v-model</code>) must either be empty (undefined) or a string in the form of a valid ISO 8601 datetime value, like <code>2016-10-24T10:40:14.674Z</code>. It can also be a shorter derivative of this string, like <code>2016-10-24</code> or <code>2016-10-24T10:40</code>. The value can also be a Unix Timestamp (including milliseconds), like <code>1477298414674</code>. Last but not least, it can also be an instance of the Javascript Date Object, like <code>new Date()</code>.</p>
</blockquote>
<p>For more information about how Quasar works with dates, please refer to the <a href="/components/handling-js-date.html">Handling JS Date</a> documentation page.</p>
<p>Here are a few examples of setting up the value prop:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-datetime</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">type</span>=<span class="string">"datetime"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="comment">// ....</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  data () &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      model: <span class="literal">undefined</span> <span class="comment">// empty value</span></div><div class="line">      <span class="comment">// OR</span></div><div class="line">      model: <span class="keyword">new</span> <span class="built_in">Date</span>() <span class="comment">// as in "right this moment"</span></div><div class="line">      <span class="comment">// OR</span></div><div class="line">      model: <span class="number">1477298414674</span> <span class="comment">// Unix Timestamp with milliseconds</span></div><div class="line">      <span class="comment">// OR</span></div><div class="line">      model: <span class="string">'2016-10-24T10:40:14.674Z'</span> <span class="comment">// full ISO 8601 compliant value</span></div><div class="line">      <span class="comment">// OR</span></div><div class="line">      model: <span class="string">`2016-10-24`</span> <span class="comment">// Any dirivative of a valid ISO 8601 datetime value will</span></div><div class="line">                          <span class="comment">// also work, like '2016-10-24T10:40:14'</span></div><div class="line">      <span class="comment">// OR</span></div><div class="line">      model: <span class="string">`2016-10-24T10:40`</span>, <span class="comment">// For an ISO 8601 value, the time must be included</span></div><div class="line">                                 <span class="comment">// A Unix Timestamp will also work.</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="More-Examples"><a href="#More-Examples" class="headerlink" title="More Examples"></a>More Examples</h2><h3 id="Error-State"><a href="#Error-State" class="headerlink" title="Error State"></a>Error State</h3><p>Use the <code>error</code> prop, if you’d like for the component to turn red:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-datetime</span> <span class="attr">:error</span>=<span class="string">"hasError"</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">type</span>=<span class="string">"datetime"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="Disabled-State"><a href="#Disabled-State" class="headerlink" title="Disabled State"></a>Disabled State</h3><p>Use the <code>disable</code> prop to completely disable the field.<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-datetime</span> <span class="attr">disable</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">type</span>=<span class="string">"datetime"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="24h-Mode"><a href="#24h-Mode" class="headerlink" title="24h Mode"></a>24h Mode</h3><p>Sometimes, the locale of your user will be one where 24h formatting is needed. Use the <code>format24h</code> prop for this purpose.<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-datetime</span> <span class="attr">format24h</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">type</span>=<span class="string">"time"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="Coloring"><a href="#Coloring" class="headerlink" title="Coloring"></a>Coloring</h3><p>Use the <code>color</code> and <code>inverse</code> props to control the color.<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-datetime</span></span></div><div class="line">  <span class="attr">color</span>=<span class="string">"amber-7"</span></div><div class="line">  <span class="attr">float-label</span>=<span class="string">"Float Label"</span></div><div class="line">  <span class="attr">v-model</span>=<span class="string">"model"</span></div><div class="line">  <span class="attr">type</span>=<span class="string">"date"</span></div><div class="line">/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">q-datetime</span></span></div><div class="line">  <span class="attr">inverted</span></div><div class="line">  <span class="attr">color</span>=<span class="string">"primary"</span></div><div class="line">  <span class="attr">float-label</span>=<span class="string">"Float Label"</span></div><div class="line">  <span class="attr">v-model</span>=<span class="string">"model"</span></div><div class="line">  <span class="attr">type</span>=<span class="string">"date"</span></div><div class="line">/&gt;</div></pre></td></tr></table></figure></p>
<p>Also, if QDatetime is displayed on a dark background, add the <code>dark</code> property.<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-datetime</span> <span class="attr">dark</span> <span class="attr">color</span>=<span class="string">"secondary"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="Usage-Inside-of-a-List"><a href="#Usage-Inside-of-a-List" class="headerlink" title="Usage Inside of a List"></a>Usage Inside of a List</h3><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-list</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-list-header</span>&gt;</span>Date or Time<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"access_time"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-datetime</span> <span class="attr">class</span>=<span class="string">"no-margin"</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">type</span>=<span class="string">"time"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"update"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-datetime</span> <span class="attr">class</span>=<span class="string">"no-margin"</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">type</span>=<span class="string">"date"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item-separator</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-list-header</span>&gt;</span>Date &amp; Time<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"notifications"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-datetime</span> <span class="attr">class</span>=<span class="string">"no-margin"</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">type</span>=<span class="string">"datetime"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Dialog Select]]></title>
      <url>http://beta.quasar-framework.org/components/dialog-select.html</url>
      <content type="html"><![CDATA[<p>Dialog Select component offers two types of selection: single selection (using Radios) or multiple selection (using Checkboxes or Toggles). This component opens up a <a href="/components/dialog.html">Dialog</a> for the selection list and action. If for some reason you want an in-place Popover to open for the selection, use the sibling <a href="/components/select.html">Select</a> component.</p>
<input type="hidden" data-fullpage-demo="forms/select/dialog-select">

<p>Works well with <a href="/components/field.html">QField</a> for additional functionality such as a helper, error message placeholder and many others.</p>
<input type="hidden" data-fullpage-demo="form/select/dialog">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- With Radios --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-dialog-select</span></span></div><div class="line">      <span class="attr">v-model</span>=<span class="string">"select"</span></div><div class="line">      <span class="attr">:options</span>=<span class="string">"selectOptions"</span></div><div class="line">      <span class="attr">ok-label</span>=<span class="string">"Pick"</span></div><div class="line">      <span class="attr">cancel-label</span>=<span class="string">"Neah"</span></div><div class="line">      <span class="attr">title</span>=<span class="string">"Radios"</span></div><div class="line">    /&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- With Checkboxes --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-dialog-select</span></span></div><div class="line">      <span class="attr">multiple</span></div><div class="line">      <span class="attr">v-model</span>=<span class="string">"multipleSelect"</span></div><div class="line">      <span class="attr">:options</span>=<span class="string">"selectOptions"</span></div><div class="line">      <span class="attr">ok-label</span>=<span class="string">"Pick"</span></div><div class="line">      <span class="attr">cancel-label</span>=<span class="string">"Neah"</span></div><div class="line">      <span class="attr">title</span>=<span class="string">"Checkboxes"</span></div><div class="line">    /&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- With Toggles --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-dialog-select</span></span></div><div class="line">      <span class="attr">multiple</span> <span class="attr">toggle</span></div><div class="line">      <span class="attr">v-model</span>=<span class="string">"multipleSelect"</span></div><div class="line">      <span class="attr">:options</span>=<span class="string">"selectOptions"</span></div><div class="line">      <span class="attr">ok-label</span>=<span class="string">"Pick"</span></div><div class="line">      <span class="attr">cancel-label</span>=<span class="string">"Neah"</span></div><div class="line">      <span class="attr">title</span>=<span class="string">"Toggles"</span></div><div class="line">    /&gt;</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  data () &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      selectOptions: [</div><div class="line">        &#123;</div><div class="line">          label: <span class="string">'Google'</span>,</div><div class="line">          value: <span class="string">'goog'</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          label: <span class="string">'Facebook'</span>,</div><div class="line">          value: <span class="string">'fb'</span></div><div class="line">        &#125;</div><div class="line">      ]</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><p>Supports <code>v-model</code> which should be the String for single selection and Array for multiple selection.</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>options</code></td>
<td>Array</td>
<td>(<strong>Required</strong>) Array of options (as Objects with required <code>label</code> and <code>value</code> props - for full list read next sections).</td>
</tr>
<tr>
<td><code>multiple</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, multiple selections will be allowed.</td>
</tr>
<tr>
<td><code>toggle</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, the selection options will offer a toggle to select them. Needs <code>multiple</code> set to <code>true</code>.</td>
</tr>
<tr>
<td><code>chips</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, the selections will appear as chips (instead of comma separated strings) on the input frame (works for multiple selection only).</td>
</tr>
<tr>
<td><code>frame-color</code></td>
<td>String</td>
<td>One from <a href="/components/color-palette.html">Quasar Color Palette</a>. Useful when <code>color</code> is to be used for Chips alone and you want a different color for the input frame.</td>
</tr>
<tr>
<td><code>title</code></td>
<td>String</td>
<td>The title of Dialog.</td>
</tr>
<tr>
<td><code>message</code></td>
<td>String</td>
<td>An additional informational text for the Dialog.</td>
</tr>
<tr>
<td><code>display-value</code></td>
<td>String</td>
<td>A text to show in the selection field, after selections have been made.</td>
</tr>
<tr>
<td><code>okLabel</code></td>
<td>String</td>
<td>Label for the “OK” button on the Dialog.</td>
</tr>
<tr>
<td><code>cancelLabel</code></td>
<td>String</td>
<td>Label for “Cancel” button on the Dialog.</td>
</tr>
</tbody>
</table>
<p>Common input frame properties:</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>prefix</code></td>
<td>String</td>
<td>A text that should be shown before the textfield.</td>
</tr>
<tr>
<td><code>suffix</code></td>
<td>String</td>
<td>A text that should be shown after the textfield.</td>
</tr>
<tr>
<td><code>float-label</code></td>
<td>String</td>
<td>A text label that will “float” up above the input field, once the input field gets focus.</td>
</tr>
<tr>
<td><code>stack-label</code></td>
<td>String</td>
<td>A text label that will be shown above the input field and is static.</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>A color from the <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>inverted</code></td>
<td>Boolean</td>
<td>Inverted mode. The color is applied to the background instead.</td>
</tr>
<tr>
<td><code>dark</code></td>
<td>Boolean</td>
<td>Is QDialogSelect rendered on a dark background?</td>
</tr>
<tr>
<td><code>align</code></td>
<td>String</td>
<td>One of ‘left’, ‘center’ or ‘right’ which determines the text align within the textfield.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, the field is disabled and the user cannot select anything.</td>
</tr>
<tr>
<td><code>error</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, the input field’s colors are changed to show there is an error.</td>
</tr>
<tr>
<td><code>before</code></td>
<td>Array of Objects</td>
<td>Icon buttons positioned on the left side of the field.</td>
</tr>
<tr>
<td><code>after</code></td>
<td>Array of Objects</td>
<td>Icon buttons on the right side of the field.</td>
</tr>
</tbody>
</table>
<h3 id="Icon-buttons"><a href="#Icon-buttons" class="headerlink" title="Icon buttons"></a>Icon buttons</h3><p>This section refers to <code>before</code> and <code>after</code> properties which can add additional buttons as icons to the textfield. Here is the structure of the two properties:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="comment">// required icon</span></div><div class="line">  icon: <span class="built_in">String</span>,</div><div class="line">  <span class="comment">// required function to call when</span></div><div class="line">  <span class="comment">// icon is clicked/tapped</span></div><div class="line">  handler: <span class="built_in">Function</span>,</div><div class="line"></div><div class="line">  <span class="comment">// Optional. Show icon button</span></div><div class="line">  <span class="comment">// if model has a value</span></div><div class="line">  content: <span class="built_in">Boolean</span>,</div><div class="line"></div><div class="line">  <span class="comment">// Optional. Show icon button</span></div><div class="line">  <span class="comment">// if textfield is marked with error</span></div><div class="line">  error: <span class="built_in">Boolean</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Examples:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!--</span></div><div class="line">  Show an icon button (with 'warning' as icon)</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">q-dialog-select</span></span></div><div class="line">  <span class="attr">v-model</span>=<span class="string">"selection"</span></div><div class="line">  <span class="attr">multiple</span> <span class="attr">toggle</span></div><div class="line">  <span class="attr">:options</span>=<span class="string">"selectListOptions"</span></div><div class="line">  <span class="attr">:after</span>=<span class="string">"[</span></div><div class="line">    &#123;</div><div class="line">      icon: 'warning',</div><div class="line">      handler () &#123;</div><div class="line">        // do something...</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]"</div><div class="line">/&gt;</div><div class="line"></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line">  Show an icon button (with 'arrow_forward' as icon)</div><div class="line">  when the model has a non empty value (like something has</div><div class="line">  been selected).</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">q-dialog-select</span></span></div><div class="line">  <span class="attr">v-model</span>=<span class="string">"selection"</span></div><div class="line">  <span class="attr">multiple</span> <span class="attr">toggle</span></div><div class="line">  <span class="attr">:options</span>=<span class="string">"selectListOptions"</span></div><div class="line">  <span class="attr">:after</span>=<span class="string">"[</span></div><div class="line">    &#123;</div><div class="line">      icon: 'arrow_forward',</div><div class="line">      content: true,</div><div class="line">      handler () &#123;</div><div class="line">        // do something...</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]"</div><div class="line">/&gt;</div></pre></td></tr></table></figure></p>
<h3 id="The-Options-Array-Format"><a href="#The-Options-Array-Format" class="headerlink" title="The Options Array Format"></a>The Options Array Format</h3><p>Below are examples of the array of options you must use to create the selection options:</p>
<p>Select options object:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">selectOptions: [</div><div class="line">  &#123;</div><div class="line">    label: <span class="string">'Google'</span>,</div><div class="line">    value: <span class="string">'goog'</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    label: <span class="string">'Facebook'</span>,</div><div class="line">    value: <span class="string">'fb'</span></div><div class="line">  &#125;,</div><div class="line">  ...</div><div class="line">]</div></pre></td></tr></table></figure></p>
<h3 id="Working-with-Display-Value"><a href="#Working-with-Display-Value" class="headerlink" title="Working with Display Value"></a>Working with Display Value</h3><p>If for some reason you want to have total control over the text in the input frame (replacing the comma delimited option strings), then use <code>display-value</code> property:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-dialog-select</span></span></div><div class="line">  <span class="attr">:display-value</span>=<span class="string">"`$&#123; multipleSelect.length &#125; item$&#123; multipleSelect.length !== 1 ? 's' : '' &#125; selected`"</span></div><div class="line">  <span class="attr">multiple</span></div><div class="line">  <span class="attr">v-model</span>=<span class="string">"multipleSelect"</span></div><div class="line">  <span class="attr">:options</span>=<span class="string">"selectOptions"</span></div><div class="line">  <span class="attr">ok-label</span>=<span class="string">"Pick"</span></div><div class="line">  <span class="attr">cancel-label</span>=<span class="string">"Neah"</span></div><div class="line">  <span class="attr">title</span>=<span class="string">"Checkboxes"</span></div><div class="line">/&gt;</div></pre></td></tr></table></figure>
<p>For a more elegant solution (and more efficient too), use a computed property:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- Notice "display-value" is binded to "text" variable --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-dialog-select</span></span></div><div class="line">    <span class="attr">:display-value</span>=<span class="string">"text"</span></div><div class="line">    <span class="attr">multiple</span></div><div class="line">    <span class="attr">v-model</span>=<span class="string">"multipleSelect"</span></div><div class="line">    <span class="attr">:options</span>=<span class="string">"selectOptions"</span></div><div class="line">    <span class="attr">ok-label</span>=<span class="string">"Pick"</span></div><div class="line">    <span class="attr">cancel-label</span>=<span class="string">"Neah"</span></div><div class="line">    <span class="attr">title</span>=<span class="string">"Checkboxes"</span></div><div class="line">  /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  data () &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      multipleSelect: <span class="comment">/* value */</span>,</div><div class="line">      selectOptions: <span class="comment">/* options */</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  computed: &#123;</div><div class="line">    text () &#123;</div><div class="line">      <span class="comment">// in this example we want to show how many items are selected,</span></div><div class="line">      <span class="comment">// so we need to check model (multipleSelect) length</span></div><div class="line">      <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;this.multipleSelect.length&#125;</span> item<span class="subst">$&#123;this.multipleSelect.length &gt; 1 ? 's' : ''&#125;</span> selected`</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="Vue-Methods"><a href="#Vue-Methods" class="headerlink" title="Vue Methods"></a>Vue Methods</h2><table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>pick()</code></td>
<td>Opens up the Dialog, so user can pick options.</td>
</tr>
<tr>
<td><code>close()</code></td>
<td>Closes the Dialog.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Vue Event</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@change(newVal)</code></td>
<td>Triggered on model value change.</td>
</tr>
<tr>
<td><code>@focus</code></td>
<td>Triggered, when the field gets focus.</td>
</tr>
<tr>
<td><code>@blur</code></td>
<td>Triggered, when the field loses focus.</td>
</tr>
</tbody>
</table>
<h2 id="More-Examples"><a href="#More-Examples" class="headerlink" title="More Examples"></a>More Examples</h2><h3 id="Error-State"><a href="#Error-State" class="headerlink" title="Error State"></a>Error State</h3><p>Use the <code>error</code> prop, to change the color of the component to red:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-dialog-select</span></span></div><div class="line">  <span class="attr">error</span></div><div class="line">  <span class="attr">v-model</span>=<span class="string">"select"</span></div><div class="line">  <span class="attr">:options</span>=<span class="string">"selectOptions"</span></div><div class="line">/&gt;</div></pre></td></tr></table></figure></p>
<h3 id="Disable"><a href="#Disable" class="headerlink" title="Disable"></a>Disable</h3><p>Use the <code>disable</code> prop, to stop access to the field.<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-dialog-select</span></span></div><div class="line">  <span class="attr">disable</span></div><div class="line">  <span class="attr">v-model</span>=<span class="string">"select"</span></div><div class="line">  <span class="attr">:options</span>=<span class="string">"selectOptions"</span></div><div class="line">/&gt;</div></pre></td></tr></table></figure></p>
<h3 id="Labeling"><a href="#Labeling" class="headerlink" title="Labeling"></a>Labeling</h3><p>As with any input, you have two options for labels. Stack and Floating.<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Floating Label --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-dialog-select</span></span></div><div class="line">  <span class="attr">float-label</span>=<span class="string">"Float Label"</span></div><div class="line">  <span class="attr">multiple</span>  </div><div class="line">  <span class="attr">v-model</span>=<span class="string">"multipleSelect"</span></div><div class="line">  <span class="attr">:options</span>=<span class="string">"selectOptions"</span></div><div class="line">  <span class="attr">placeholder</span>=<span class="string">"Pick Company"</span></div><div class="line">/&gt;</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Stack Label --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-select</span></span></div><div class="line">  <span class="attr">static-label</span>=<span class="string">"Company"</span></div><div class="line">  <span class="attr">multiple</span></div><div class="line">  <span class="attr">v-model</span>=<span class="string">"multipleSelect"</span></div><div class="line">  <span class="attr">:options</span>=<span class="string">"selectOptions"</span></div><div class="line">/&gt;</div></pre></td></tr></table></figure></p>
<h3 id="Coloring"><a href="#Coloring" class="headerlink" title="Coloring"></a>Coloring</h3><p>Use the <code>color</code>, <code>inverted</code> and <code>frame-color</code> props to control the coloring of the component.<br><figure class="highlight"><table><tr><td class="code"><pre><div class="line">&lt;!-- Color --&gt;</div><div class="line">&lt;q-dialog-select</div><div class="line">  color="amber"</div><div class="line">  @change="onChange"</div><div class="line">  v-model="select"</div><div class="line">  :options="selectOptions"</div><div class="line">  ok-label="Pick"</div><div class="line">  cancel-label="Neah"</div><div class="line">  title="Radios"</div><div class="line">/&gt;</div><div class="line"></div><div class="line">&lt;!-- Inverted Color --&gt;</div><div class="line">&lt;q-dialog-select</div><div class="line">  color="secondary"</div><div class="line">  inverted</div><div class="line">  @change="onChange"</div><div class="line">  v-model="select"</div><div class="line">  :options="selectOptions"</div><div class="line">  ok-label="Pick"</div><div class="line">  cancel-label="Neah"</div><div class="line">  title="Radios"</div><div class="line">/&gt;</div><div class="line"></div><div class="line">&lt;!--</div><div class="line">  With a color for chips and a different color for the frame.</div><div class="line">  Notice "color" and "frame-color". By default, "color" is used</div><div class="line">  for both frame and chips, but specifying a frame-color overrides</div><div class="line">  the color for the frame.</div><div class="line">--&gt;</div><div class="line">&lt;q-select</div><div class="line">  &lt;q-dialog-select</div><div class="line">  frame-color="amber"</div><div class="line">  inverted</div><div class="line">  color="dark"</div><div class="line">  @change="onChange"</div><div class="line">  chips</div><div class="line">  float-label="Float Label"</div><div class="line">  multiple</div><div class="line">  v-model="multipleSelect"</div><div class="line">  :options="selectOptions"</div><div class="line">  placeholder="Pick Company"</div><div class="line">/&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>Note</strong><br>The optional <code>frame-color</code> prop is useful when using chips as selected values, so the chips stand out from the background color.</p>
</blockquote>
<h3 id="Usage-Inside-of-a-List"><a href="#Usage-Inside-of-a-List" class="headerlink" title="Usage Inside of a List"></a>Usage Inside of a List</h3><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-list</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-list-header</span>&gt;</span>Single Selection<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"supervisor_account"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-dialog-select</span> <span class="attr">class</span>=<span class="string">"no-margin"</span>  <span class="attr">v-model</span>=<span class="string">"select"</span> <span class="attr">:options</span>=<span class="string">"selectOptions"</span> <span class="attr">ok-label</span>=<span class="string">"Pick"</span> <span class="attr">cancel-label</span>=<span class="string">"Neah"</span> <span class="attr">title</span>=<span class="string">"Company"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"supervisor_account"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-dialog-select</span> <span class="attr">class</span>=<span class="string">"no-margin"</span>  <span class="attr">v-model</span>=<span class="string">"select"</span> <span class="attr">:options</span>=<span class="string">"selectOptions"</span> <span class="attr">ok-label</span>=<span class="string">"Pick"</span> <span class="attr">cancel-label</span>=<span class="string">"Neah"</span> <span class="attr">title</span>=<span class="string">"Company"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item-separator</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-list-header</span>&gt;</span>Multiple Selection<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"supervisor_account"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-dialog-select</span> <span class="attr">class</span>=<span class="string">"no-margin"</span> <span class="attr">multiple</span> <span class="attr">v-model</span>=<span class="string">"multipleSelect"</span> <span class="attr">:options</span>=<span class="string">"selectOptions"</span> <span class="attr">ok-label</span>=<span class="string">"Pick"</span> <span class="attr">title</span>=<span class="string">"Companies"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"supervisor_account"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-dialog-select</span> <span class="attr">class</span>=<span class="string">"no-margin"</span> <span class="attr">multiple</span> <span class="attr">toggle</span> <span class="attr">v-model</span>=<span class="string">"multipleSelect"</span> <span class="attr">:options</span>=<span class="string">"selectOptions"</span> <span class="attr">ok-label</span>=<span class="string">"Pick"</span> <span class="attr">title</span>=<span class="string">"Companies"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[DOM Utils]]></title>
      <url>http://beta.quasar-framework.org/components/dom-utils.html</url>
      <content type="html"><![CDATA[<h3 id="Helping-Tree-Shake"><a href="#Helping-Tree-Shake" class="headerlink" title="Helping Tree-Shake"></a>Helping Tree-Shake</h3><p>You will notice all examples import different parts of Quasar. However, if you need only one specific util method, then you can use ES6 destructuring to help Tree Shaking embed only that method and not all around it.</p>
<p>Example with <code>dom</code> utils:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; dom &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"><span class="keyword">const</span> &#123; offset &#125; = dom</div><div class="line"></div><div class="line"><span class="comment">// Offset on screen</span></div><div class="line"><span class="built_in">console</span>.log(offset(DomElement))</div><div class="line"><span class="comment">// &#123; top: 10, left: 100 &#125;</span></div></pre></td></tr></table></figure></p>
<p>You can also import all of dom utils and use whatever you need like this (but note that your bundle will contain unused methods too):<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; dom &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="comment">// Offset on screen</span></div><div class="line"><span class="built_in">console</span>.log(dom.offset(DomElement))</div><div class="line"><span class="comment">// &#123; top: 10, left: 100 &#125;</span></div></pre></td></tr></table></figure></p>
<h2 id="Offset-on-screen-viewport"><a href="#Offset-on-screen-viewport" class="headerlink" title="Offset on screen viewport"></a>Offset on screen viewport</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; dom &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"><span class="keyword">const</span> &#123; offset &#125; = dom</div><div class="line"></div><div class="line"><span class="comment">// Offset on screen</span></div><div class="line"><span class="built_in">console</span>.log(offset(DomElement))</div><div class="line"><span class="comment">// &#123; top: 10, left: 100 &#125;</span></div></pre></td></tr></table></figure>
<h2 id="Get-Computed-Style"><a href="#Get-Computed-Style" class="headerlink" title="Get Computed Style"></a>Get Computed Style</h2><p>This applies only when DomElement is visible! It returns the <strong>computed</strong> browser style, so the property you are asking for doesn’t necessary has to be applied within a <code>style</code> attribute.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; dom &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"><span class="keyword">const</span> &#123; style &#125; = dom</div><div class="line"></div><div class="line"><span class="comment">// Get COMPUTED style (when DomElement is visible!)</span></div><div class="line"><span class="comment">// Computed means a DomElement might not have "height" CSS property set,</span></div><div class="line"><span class="comment">// but that does not mean it doesn't have a height when it's displayed.</span></div><div class="line"><span class="comment">// The follosing method accesses the computed CSS provided by the browser:</span></div><div class="line"><span class="built_in">console</span>.log(style(DomElement, <span class="string">'height'</span>))</div><div class="line"><span class="comment">// '10px' &lt;&lt;&lt; notice it returns a String ending in 'px'</span></div></pre></td></tr></table></figure>
<h2 id="Get-Height-Width"><a href="#Get-Height-Width" class="headerlink" title="Get Height / Width"></a>Get Height / Width</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; dom &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"><span class="keyword">const</span> &#123; height, width &#125; = dom</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Some aliases of the previous method for "width" and "height" which</span></div><div class="line"><span class="comment">// returns Numbers instead of Strings:</span></div><div class="line"><span class="built_in">console</span>.log(</div><div class="line">  height(DomElement),</div><div class="line">  width(DomElement)</div><div class="line">)</div><div class="line"><span class="comment">// 10 100</span></div></pre></td></tr></table></figure>
<h2 id="Apply-CSS-Properties-in-Batch"><a href="#Apply-CSS-Properties-in-Batch" class="headerlink" title="Apply CSS Properties in Batch"></a>Apply CSS Properties in Batch</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; dom &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"><span class="keyword">const</span> &#123; css &#125; = dom</div><div class="line"></div><div class="line"><span class="comment">// Apply a list of CSS properties to a DomNode</span></div><div class="line">css(DomElement, &#123;</div><div class="line">  height: <span class="string">'10px'</span>,</div><div class="line">  display: <span class="string">'flex'</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="Get-Viewport-Dimensions"><a href="#Get-Viewport-Dimensions" class="headerlink" title="Get Viewport Dimensions"></a>Get Viewport Dimensions</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; dom &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"><span class="keyword">const</span> &#123; viewport &#125; = dom</div><div class="line"></div><div class="line"><span class="comment">// Get Window height and width</span></div><div class="line"><span class="keyword">let</span> &#123;height, width&#125; = viewport()</div><div class="line"><span class="built_in">console</span>.log(height, width)</div><div class="line"><span class="comment">// 800 600</span></div></pre></td></tr></table></figure>
<h2 id="Execute-when-DOM-is-ready"><a href="#Execute-when-DOM-is-ready" class="headerlink" title="Execute when DOM is ready"></a>Execute when DOM is ready</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; dom &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"><span class="keyword">const</span> &#123; ready &#125; = dom</div><div class="line"></div><div class="line"><span class="comment">// Execute a Function when DOM is ready:</span></div><div class="line">ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// ....</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="Get-Crossbrowser-CSS-Transform-Property"><a href="#Get-Crossbrowser-CSS-Transform-Property" class="headerlink" title="Get Crossbrowser CSS Transform Property"></a>Get Crossbrowser CSS Transform Property</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; dom &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"><span class="keyword">const</span> &#123; cssTransform &#125; = dom</div><div class="line"></div><div class="line"><span class="keyword">let</span> props = cssTransform(<span class="string">'rotateX(30deg)'</span>)</div><div class="line"><span class="comment">// props = &#123;</span></div><div class="line"><span class="comment">//   transform: 'rotateX(30deg)',</span></div><div class="line"><span class="comment">//   '-webkit-transform': 'rotateX(30deg)',</span></div><div class="line"><span class="comment">//   '-ms-transform': 'rotateX(30deg)',</span></div><div class="line"><span class="comment">//   '-o-transform': 'rotateX(30deg)',</span></div><div class="line"><span class="comment">//   '-moz-transform': 'rotateX(30deg)'</span></div><div class="line"><span class="comment">// &#125;</span></div><div class="line"></div><div class="line"><span class="comment">// Then you can apply it with css(el, props)</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Element Resize Observable]]></title>
      <url>http://beta.quasar-framework.org/components/element-resize-observable.html</url>
      <content type="html"><![CDATA[<p>QResizeObservable is a Quasar component that emits a <code>resize</code> event whenever the wrapping DOM element / component (defined as direct parent of QResizeObservable) changes its size. Note that no polling is involved, but overusing it is costly too.</p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!--</span></div><div class="line">    we listen for size changes on this next</div><div class="line">    &lt;div&gt;, so we place the observer as direct child:</div><div class="line">  --&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-resize-observable</span> @<span class="attr">resize</span>=<span class="string">"onResize"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  ...,</div><div class="line">  methods: &#123;</div><div class="line">    ...,</div><div class="line">    onResize (size) &#123;</div><div class="line">      <span class="built_in">console</span>.log(size)</div><div class="line">      <span class="comment">// &#123;</span></div><div class="line">      <span class="comment">//   width: 20 // width of container (in px)</span></div><div class="line">      <span class="comment">//   height: 50 // height of container (in px)</span></div><div class="line">      <span class="comment">// &#125;</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Please note that QResizeObservable will issue an event as soon as it gets rendered and attached to DOM, so you can have the initial size of the container.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Field]]></title>
      <url>http://beta.quasar-framework.org/components/field.html</url>
      <content type="html"><![CDATA[<p>Field component allows you to easily build your responsive Forms UI by wrapping each Form component (QInput, QSelect, QDatetime, QChipsInput and so on) to enrich it with a main label, an icon, error placeholder and error state, helper placeholder and/or item/character counter.</p>
<input type="hidden" data-fullpage-demo="forms/field">

<p>On small windows, label and content will stack vertically, while on bigger windows label will be placed on the left of QField content. Icons are always placed at the left of label and content, regardless of window width.</p>
<p>Works with ANY component, not only Form ones.</p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-field</span></span></div><div class="line">  <span class="attr">icon</span>=<span class="string">"cloud"</span></div><div class="line">  <span class="attr">label</span>=<span class="string">"Your Gmail"</span></div><div class="line">  <span class="attr">helper</span>=<span class="string">"Helper"</span></div><div class="line">  <span class="attr">:error</span>=<span class="string">"mailHasError"</span></div><div class="line">  <span class="attr">error-label</span>=<span class="string">"We need a valid email"</span></div><div class="line">  <span class="attr">:count</span>=<span class="string">"10"</span></div><div class="line">&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">q-input</span> <span class="attr">suffix</span>=<span class="string">"@gmail.com"</span> <span class="attr">v-model</span>=<span class="string">"model"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-field</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>label</code></td>
<td>String</td>
<td>Main label to use.</td>
</tr>
<tr>
<td><code>icon</code></td>
<td>String</td>
<td>An icon to use on left of label.</td>
</tr>
<tr>
<td><code>helper</code></td>
<td>String</td>
<td>Helper text which gets placed below your wrapped form component.</td>
</tr>
<tr>
<td><code>error</code></td>
<td>Boolean</td>
<td>Highlight field and wrapped form component has an error.</td>
</tr>
<tr>
<td><code>error-label</code></td>
<td>String</td>
<td>If <code>error</code> is specified and <code>true</code>, then field helper is replaced by this prop. Doesn’t depends on field helper existance.</td>
</tr>
<tr>
<td><code>count</code></td>
<td>Number/Boolean</td>
<td>Add a counter of characters or items (like Chips) in your wrapped form component. If Boolean, it just counts them. If Number, it also adds a maximum number to it, but doesn’t acts as a restraint.</td>
</tr>
<tr>
<td><code>inset</code></td>
<td>String</td>
<td>Inset you field to align with other fields when current one is missing an icon and/or label. One of ‘icon’, ‘label’ or ‘full’ (inset for both icon and label).</td>
</tr>
<tr>
<td><code>dark</code></td>
<td>Boolean</td>
<td>Is your field used on a dark background?</td>
</tr>
<tr>
<td><code>labelWidth</code></td>
<td>Number</td>
<td>Out of 12 grid points, how much should the label take? Default is 5. Minimum is 1 and maximum is 11.</td>
</tr>
</tbody>
</table>
<h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><p>The following are just a glimpse of what QField can do for you.</p>
<h3 id="Using-Counter"><a href="#Using-Counter" class="headerlink" title="Using Counter"></a>Using Counter</h3><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!--</span></div><div class="line">  16 characters max.</div><div class="line">  Notice "count" property (and optional max-length</div><div class="line">  to enforce max number of characters)</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">q-field</span></span></div><div class="line">  <span class="attr">:count</span>=<span class="string">"16"</span></div><div class="line">&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">q-input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">max-length</span>=<span class="string">"16"</span> <span class="attr">v-model</span>=<span class="string">"model"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-field</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Counting Chips. Notice "count" property --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-field</span></span></div><div class="line">  <span class="attr">count</span></div><div class="line">  <span class="attr">icon</span>=<span class="string">"account_box"</span></div><div class="line">  <span class="attr">helper</span>=<span class="string">"Some helper here"</span></div><div class="line">  <span class="attr">:label-width</span>=<span class="string">"3"</span></div><div class="line">&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">q-chips-input</span> <span class="attr">float-label</span>=<span class="string">"Float Label"</span> <span class="attr">v-model</span>=<span class="string">"model"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-field</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Counting selected options --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-field</span></span></div><div class="line">  <span class="attr">count</span></div><div class="line">&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">q-select</span></span></div><div class="line">    <span class="attr">v-model</span>=<span class="string">"select"</span></div><div class="line">    <span class="attr">:options</span>=<span class="string">"[</span></div><div class="line">      &#123;</div><div class="line">        label: 'Google',</div><div class="line">        icon: 'email',</div><div class="line">        value: 'goog'</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        label: 'Facebook',</div><div class="line">        description: 'Enables communication',</div><div class="line">        value: 'fb'</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        label: 'Twitter',</div><div class="line">        secondIcon: 'alarm',</div><div class="line">        value: 'twtr'</div><div class="line">      &#125;</div><div class="line">    ]"</div><div class="line">  /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">q-field</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Validations-with-Vuelidate"><a href="#Validations-with-Vuelidate" class="headerlink" title="Validations with Vuelidate"></a>Validations with Vuelidate</h3><p>Quasar’s recommendation for doing form components validations is  <a href="https://monterail.github.io/vuelidate/" target="_blank" rel="external">Vuelidate</a> as it fits great with the overall architecture. It’s simple, lightweight and <strong>model-based</strong>.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-field</span></span></div><div class="line">    <span class="attr">icon</span>=<span class="string">"mail"</span></div><div class="line">    <span class="attr">label</span>=<span class="string">"Email"</span></div><div class="line">    <span class="attr">helper</span>=<span class="string">"Type the email we can use to contact you"</span></div><div class="line">    <span class="attr">:error</span>=<span class="string">"$v.email.$error"</span></div><div class="line">    <span class="attr">error-label</span>=<span class="string">"Please type a valid email"</span></div><div class="line">    <span class="attr">count</span></div><div class="line">  &gt;</div><div class="line">    <span class="tag">&lt;<span class="name">q-input</span></span></div><div class="line">      <span class="attr">type</span>=<span class="string">"email"</span></div><div class="line">      <span class="attr">v-model</span>=<span class="string">"email"</span></div><div class="line">      @<span class="attr">blur</span>=<span class="string">"$v.email.$touch"</span></div><div class="line">    /&gt;</div><div class="line">  <span class="tag">&lt;/<span class="name">q-field</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">import</span> &#123; required, email &#125; <span class="keyword">from</span> <span class="string">'vuelidate/lib/validators'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  data () &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      email: <span class="string">''</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  validations: &#123;</div><div class="line">    email: &#123; required, email &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Stacked-Label-QInput"><a href="#Stacked-Label-QInput" class="headerlink" title="Stacked Label QInput"></a>Stacked Label QInput</h3><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-field</span></span></div><div class="line">  <span class="attr">icon</span>=<span class="string">"cloud"</span></div><div class="line">  <span class="attr">helper</span>=<span class="string">"Helper"</span></div><div class="line">&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">q-input</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">float-label</span>=<span class="string">"Float Label"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-field</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Custom-Label-Width"><a href="#Custom-Label-Width" class="headerlink" title="Custom Label Width"></a>Custom Label Width</h3><p>If you customize label width for one QField then it’s best to apply it to all its sibling QFields for UI consistency.<br>Since Quasar is using a 12 point grid system, assign a number &gt;= 1 and &lt; 12 for the label width. Default is <code>5</code>.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-field</span></span></div><div class="line">  <span class="attr">helper</span>=<span class="string">"Helper"</span></div><div class="line">  <span class="attr">:label-width</span>=<span class="string">"3"</span></div><div class="line">  <span class="attr">label</span>=<span class="string">"Label"</span></div><div class="line">&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">q-input</span> <span class="attr">v-model</span>=<span class="string">"model"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-field</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Using-Inset"><a href="#Using-Inset" class="headerlink" title="Using Inset"></a>Using Inset</h3><p>Inset is useful to perfectly align all QFields when some have icons and labels and some are missing either or both of them.</p>
<p>If, for example, no QField uses icon, then it makes sense to not add inset for any of the QFields. Same goes for label.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!--</span></div><div class="line">  This example has icon and label. Since having</div><div class="line">  both of them, it gets set as reference for</div><div class="line">  the other QFields when adding inset to them.</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">q-field</span></span></div><div class="line">  <span class="attr">icon</span>=<span class="string">"cloud"</span></div><div class="line">  <span class="attr">helper</span>=<span class="string">"Helper"</span></div><div class="line">  <span class="attr">label</span>=<span class="string">"Horizontal"</span></div><div class="line">&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">q-input</span> <span class="attr">v-model</span>=<span class="string">"model"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-field</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line">  This example has only label, so</div><div class="line">  we inset for the icon (because there</div><div class="line">  is at least one QField having icon too)</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">q-field</span></span></div><div class="line">  <span class="attr">helper</span>=<span class="string">"Helper"</span></div><div class="line">  <span class="attr">label</span>=<span class="string">"Label"</span></div><div class="line">  <span class="attr">inset</span>=<span class="string">"icon"</span></div><div class="line">&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">q-input</span> <span class="attr">v-model</span>=<span class="string">"model"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-field</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line">  This example has no icon or label, so</div><div class="line">  we inset for them both (as there is a</div><div class="line">  sibling QField with both icon and label).</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">q-field</span></span></div><div class="line">  <span class="attr">helper</span>=<span class="string">"Helper"</span></div><div class="line">  <span class="attr">inset</span>=<span class="string">"full"</span></div><div class="line">&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">q-input</span> <span class="attr">v-model</span>=<span class="string">"model"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-field</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Wrapping-Side-by-Side-QInputs"><a href="#Wrapping-Side-by-Side-QInputs" class="headerlink" title="Wrapping Side by Side QInputs"></a>Wrapping Side by Side QInputs</h3><p>We use Quasar CSS Flex to create a non wrappable row where we place two QInputs.</p>
<p>When more than one Form component is wrapped by QField, avoid adding a counter to QField because only one will end up synching its length to it. Each Form component has its own length and there’s only one placeholder for the counter, so in the end you will only confuse the user.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-field</span></span></div><div class="line">  <span class="attr">icon</span>=<span class="string">"security"</span></div><div class="line">  <span class="attr">helper</span>=<span class="string">"Helper"</span></div><div class="line">  <span class="attr">label</span>=<span class="string">"Label"</span></div><div class="line">&gt;</div><div class="line">  <span class="comment">&lt;!-- We create a row --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row no-wrap"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-input</span> <span class="attr">class</span>=<span class="string">"col"</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">stack-label</span>=<span class="string">"Input 1"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-input</span> <span class="attr">class</span>=<span class="string">"col"</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">stack-label</span>=<span class="string">"Input 2"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-field</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Dark-Background"><a href="#Dark-Background" class="headerlink" title="Dark Background"></a>Dark Background</h3><p>When placing a QField on a dark background, use <code>dark</code> property to inform QField it needs to adjust colors.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!--</span></div><div class="line">  This example has a wrapping &lt;div&gt; with a dark</div><div class="line">  background associated with it.</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg-grey-9"</span> <span class="attr">style</span>=<span class="string">"padding: 10px"</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- Notice "dark" property --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-field</span></span></div><div class="line">    <span class="attr">dark</span></div><div class="line">    <span class="attr">label</span>=<span class="string">"Knob"</span></div><div class="line">    <span class="attr">helper</span>=<span class="string">"Touch to change"</span></div><div class="line">    <span class="attr">icon</span>=<span class="string">"cake"</span></div><div class="line">    <span class="attr">:error</span>=<span class="string">"error"</span></div><div class="line">  &gt;</div><div class="line">    <span class="tag">&lt;<span class="name">q-knob</span></span></div><div class="line">      <span class="attr">v-model</span>=<span class="string">"knob"</span></div><div class="line">      <span class="attr">:min</span>=<span class="string">"knobMin"</span></div><div class="line">      <span class="attr">:max</span>=<span class="string">"knobMax"</span></div><div class="line">    &gt;</div><div class="line">      <span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">class</span>=<span class="string">"on-left"</span> <span class="attr">name</span>=<span class="string">"volume_up"</span> /&gt;</span> &#123;&#123;knob&#125;&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">q-knob</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-field</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Option-Group"><a href="#Option-Group" class="headerlink" title="Option Group"></a>Option Group</h3><p>Here’s an example with an Option Group component.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-field</span></span></div><div class="line">  <span class="attr">icon</span>=<span class="string">"flight_takeoff"</span></div><div class="line">  <span class="attr">label</span>=<span class="string">"Flight"</span></div><div class="line">  <span class="attr">helper</span>=<span class="string">"Pick the day when you want to go"</span></div><div class="line">&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">q-option-group</span></span></div><div class="line">    <span class="attr">type</span>=<span class="string">"radio"</span></div><div class="line">    <span class="attr">v-model</span>=<span class="string">"option"</span></div><div class="line">    <span class="attr">:options</span>=<span class="string">"[</span></div><div class="line">      &#123; label: 'Monday', value: 'monday' &#125;,</div><div class="line">      &#123; label: 'Tuesday', value: 'tuesday' &#125;,</div><div class="line">      &#123; label: 'Friday', value: 'friday' &#125;</div><div class="line">    ]"</div><div class="line">  /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">q-field</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Fixed Positioning on Layout]]></title>
      <url>http://beta.quasar-framework.org/components/fixed-positioning-on-layout.html</url>
      <content type="html"><![CDATA[<p>The Quasar Fixed Position component helps to fix HTML elements wrapped by it to a static position within the content area of your application. The HTML elements will also stay in that fixed position, no matter where the user scrolls. A good example of this would be a “Back to top” button, which would first appear at the bottom of the screen, once the user scrolls down to a certain level on the screen.</p>
<p>The great advantage of this is that the elements wrapped by this component will never overlap the layout header, footer or left/right sides, even if those are not configured to be fixed. In the latter case, the position will be offsetted so that the overlap won’t occur.<br>Try it out with a non fixed footer for example. When user reaches bottom of screen and footer comes into view, the component will shift up so it won’t overlap with the footer.</p>
<input type="hidden" data-fullpage-demo="layout/fixed-positioning">

<blockquote>
<p><strong>Important!</strong><br>In order for <code>&lt;q-fixed-position&gt;</code> to work, it must be within a <code>&lt;q-layout&gt;</code> component.</p>
</blockquote>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-layout</span>&gt;</span></div><div class="line">  ...</div><div class="line">  <span class="tag">&lt;<span class="name">q-fixed-position</span> <span class="attr">corner</span>=<span class="string">"top-right"</span> <span class="attr">:offset</span>=<span class="string">"[18, 18]"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">round</span> <span class="attr">color</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"alert"</span> <span class="attr">icon</span>=<span class="string">"alarm"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-fixed-position</span>&gt;</span></div><div class="line">  ...</div><div class="line"><span class="tag">&lt;/<span class="name">q-layout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>The above would position a circular button at the top right corner of the content area of a layout. It would also pad the button with 18 pixels from the top and right edges of the layout.</p>
<p>If you have a header or footer in your layout, the HTML elements wrapped by <code>&lt;q-fixed-position&gt;</code> will automatically stay within the area delimited by those header and footer.</p>
<h3 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h3><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>corner</code></td>
<td>String</td>
<td>The corner of the element where the content should be places. The choices are <code>top-right</code>, <code>top-left</code>, <code>bottom-right</code> or <code>bottom-left</code>.</td>
</tr>
<tr>
<td><code>offset</code></td>
<td>Array (2 integers)</td>
<td>Optional. The offset of the content, relative to the corner. First is offset on X axis, then on Y axis.<br>Example: <code>[0, 18]</code> (offset 0 on X axis and 18px on Y axis).</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Flex CSS]]></title>
      <url>http://beta.quasar-framework.org/components/flex-css.html</url>
      <content type="html"><![CDATA[<p>Quasar provides lots of CSS classes to help you build your UI easily with the help of <a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/" target="_blank" rel="external">Flexbox</a>. Think of it like operating with rows and columns with many options at hand.</p>
<blockquote>
<p>The final section of this page will show you how to create responsive UIs. Also take a look at the demo (best viewed by clicking “Desktop View” when on a desktop, because that’s where you can resize the window width to see helper classes in action). Click on “View Source” too to see the demo’s source code.</p>
<input type="hidden" data-fullpage-demo="css-helpers/flex-css">

</blockquote>
<h2 id="Background-on-Flexbox"><a href="#Background-on-Flexbox" class="headerlink" title="Background on Flexbox"></a>Background on Flexbox</h2><p>The Flexbox Layout (Flexible Box) module (currently a W3C Last Call Working Draft) aims at providing a more efficient way to lay out, align and distribute space among items in a container, even when their size is unknown and/or dynamic (thus the word “flex”).</p>
<p>The main idea behind the flex layout is to give the container the ability to alter its items’ width/height (and order) to best fill the available space (mostly to accommodate to all kind of display devices and screen sizes). A flex container expands items to fill available free space, or shrinks them to prevent overflow.</p>
<p>Most importantly, the flexbox layout is direction-agnostic as opposed to the regular layouts (block which is vertically-based and inline which is horizontally-based). While those work well for pages, they lack flexibility (no pun intended) to support large or complex applications (especially when it comes to orientation changing, resizing, stretching, shrinking, etc.).</p>
<h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><p>Quasar Flex CSS classes apply to either the Container (Parent) or the Container’s items (Children).</p>
<p><img src="/images/flexbox-container.svg" alt="Flexbox Container"><br><img src="/images/flexbox-items.svg" alt="Flexbox Items"></p>
<h2 id="Parent-Classes"><a href="#Parent-Classes" class="headerlink" title="Parent Classes"></a>Parent Classes</h2><h3 id="Setting-Direction"><a href="#Setting-Direction" class="headerlink" title="Setting Direction"></a>Setting Direction</h3><p>One of the following CSS classes is mandatory for the parent in order for the children ones (described in next sections) to have any effect.</p>
<p><img src="/images/flexbox-direction.svg" alt="Flexbox Direction"></p>
<table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>row</code></td>
<td>Flex row</td>
</tr>
<tr>
<td><code>row inline</code></td>
<td>Inline Flex row</td>
</tr>
<tr>
<td><code>column</code></td>
<td>Flex column</td>
</tr>
<tr>
<td><code>column inline</code></td>
<td>Inline Flex column</td>
</tr>
<tr>
<td><code>row reverse</code></td>
<td>Flex row with <code>flex-direction</code> set to <code>row-reverse</code></td>
</tr>
<tr>
<td><code>column reverse</code></td>
<td>Flex column with <code>flex-direction</code> set to <code>column-reverse</code></td>
</tr>
</tbody>
</table>
<p>Example:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>First column<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Second column<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Third column<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="Wrapping-by-default"><a href="#Wrapping-by-default" class="headerlink" title="Wrapping by default"></a>Wrapping by default</h3><p>By default, all rows and columns are wrapping content.</p>
<p><img src="/images/flexbox-wrap.svg" alt="Flexbox Direction"></p>
<p>However if you explicitly do not want to wrap and by so doing you want to fit all content into one line, then add <code>no-wrap</code> CSS helper class.</p>
<p>Also, if you want to wrap in reverse order, then <code>reverse-wrap</code> is available.</p>
<table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>wrap</code></td>
<td>Wrap if necessary (“on” by default, no need to specify it)</td>
</tr>
<tr>
<td><code>no-wrap</code></td>
<td>Do NOT wrap even if necessary</td>
</tr>
<tr>
<td><code>reverse-wrap</code></td>
<td>Wrap backwards if necessary</td>
</tr>
</tbody>
</table>
<h3 id="Alignment"><a href="#Alignment" class="headerlink" title="Alignment"></a>Alignment</h3><p><strong>For alignment along the main axis</strong>, use classes below. It helps distribute extra free space left over when either all the flex items on a line are inflexible, or are flexible but have reached their maximum size. It also exerts some control over the alignment of items when they overflow the line.</p>
<p><img src="/images/flexbox-main-axis-align.svg" alt="Flexbox Justify Content"></p>
<p><strong>For alignment perpendicular to the main axis</strong>, use classes below. This defines the default behavior for how flex items are laid out along the cross axis on the current line. Think of it as the horizontal-* version for the cross-axis (perpendicular to the main-axis).</p>
<p><img src="/images/flexbox-cross-axis-align.svg" alt="Flexbox Items Align"></p>
<p>The next classes <strong>align a flex container’s lines</strong> within when there is extra space in the cross-axis, similar to how horizontal-* aligns individual items within the main-axis.</p>
<p><img src="/images/flexbox-content-align.svg" alt="Flexbox Content Align"></p>
<h2 id="Children-Classes"><a href="#Children-Classes" class="headerlink" title="Children Classes"></a>Children Classes</h2><h3 id="Distribution-of-Size"><a href="#Distribution-of-Size" class="headerlink" title="Distribution of Size"></a>Distribution of Size</h3><p>Quasar uses a 12 point column system for distributing size of row children. Here are some examples of the CSS helper classes available:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-8"</span>&gt;</span>two thirds<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-2"</span>&gt;</span>one sixth<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-auto"</span>&gt;</span>auto size based on content and available space<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span>fills remaining available space<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>In the example above, <code>col-8</code> fills two thirds (2/3) of the row width, because 8/12 = 2/3 = 66%, while <code>col-2</code> occupies one sixth (2/12 = 1/6 ~ 16.67%).</p>
<p>CSS helper class <code>col-auto</code> makes the cell fill only the space it needs to be rendered, with the possibility to shrink when not enough space is available. <code>col</code>, on the other hand, tries to fill all space available while also shrinking if needed.</p>
<p>Another example with a visual representation below it:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!--</span></div><div class="line">     we have 3 children, so equivalent</div><div class="line">     to above would be to use `col-4`</div><div class="line">     on each of the children</div><div class="line">  --&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-3"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-6"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-3"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><img src="/images/flexbox-grow.svg" alt="Flexbox Grow"></p>
<p>There’s also the possible to offset a cell. Example: <code>offset-4</code> which offsets a third of space (4/12 = 1/3 = 33%).</p>
<h3 id="Wrapping"><a href="#Wrapping" class="headerlink" title="Wrapping"></a>Wrapping</h3><p>Wrapping is a key feature in understanding Flex CSS classes. You are not bound to use exactly 12 points per row. You can use less or even more.</p>
<p>This allows you, among other things, to dynamically stack rows vertically on smaller screens while displaying them on a single line on bigger screens. Read “Responsive Design” section.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-2"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 2 + 6 &lt; 12, so next element is placed on same line --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-6"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 2 + 6 + 10 &gt; 12, so next element wraps to next line --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-10"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!--</span></div><div class="line">    10 + 3 &gt; 12, so next element wraps to next line.</div><div class="line">    Note that we take into consideration the current line only</div><div class="line">    (with col-10 only, since it was wrapped to its own line).</div><div class="line">  --&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-3"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>Note that rows are wrappable by default. Should you wish to disable this, use <code>no-wrap</code> CSS helper class.</p>
</blockquote>
<h3 id="Self-Alignment"><a href="#Self-Alignment" class="headerlink" title="Self Alignment"></a>Self Alignment</h3><p><strong>An item can override the aligned specified on parent</strong>. This allows alignment to be overridden for individual flex items. Please see the <a href="#Alignment">Alignment</a> explanation from Parent Classes to understand the available values (<code>self-start</code>, <code>self-center</code>, <code>self-baseline</code>, <code>self-end</code>, <code>self-stretch</code>).</p>
<p><img src="/images/flexbox-self.svg" alt="Flexbox Grow"></p>
<h3 id="Order"><a href="#Order" class="headerlink" title="Order"></a>Order</h3><p><strong>You can set the order</strong> of children elements by using <code>order-first</code> and <code>order-last</code> CSS helper classes.</p>
<p>By default, flex items are laid out in the source order. However, the order property controls the order in which they appear in the flex container. If you need more granularity, use <code>order</code> CSS property and assign the desired value.</p>
<p>Example:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"order: 2"</span>&gt;</span>Second column<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"order-last"</span>&gt;</span>Third column<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"order-first"</span>&gt;</span>First column<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>Here is how the CSS <code>order</code> property works:</p>
<p><img src="/images/flexbox-order.svg" alt="Flexbox Order"></p>
<h2 id="Responsive-Design"><a href="#Responsive-Design" class="headerlink" title="Responsive Design"></a>Responsive Design</h2><p>Flex CSS Helper classes can be applied based on the width of the screen, to help you in making a responsive UI. The 12 points grid is inspired by Bootstrap’s, so there are a lot of similarities.</p>
<p>What we’ve learned so far is that, for example, we can size the columns regardless of window width. If we are to create a response UI, we need to dynamically change the sizing while taking into account how wide the window is. First, let’s learn about some tokens that you can inject at middle of <code>col-*</code>, <code>offset-*</code> and <code>col-auto</code> helper classes (look at table below for tokens).</p>
<table>
<thead>
<tr>
<th>Token</th>
<th>Max window width</th>
<th>Description / When it applies</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>xs</code></td>
<td>576px</td>
<td>Extra small sized window</td>
</tr>
<tr>
<td><code>sm</code></td>
<td>768px</td>
<td>Small sized window</td>
</tr>
<tr>
<td><code>md</code></td>
<td>992px</td>
<td>Medium-sized window</td>
</tr>
<tr>
<td><code>lg</code></td>
<td>1200px</td>
<td>Large sized window</td>
</tr>
<tr>
<td><code>xl</code></td>
<td>1201+ px</td>
<td>Extra large sized window</td>
</tr>
</tbody>
</table>
<p>Example: <code>col-md-7</code>, <code>offset-lg-3</code>, <code>col-xs-auto</code>.</p>
<blockquote>
<p>Before diving into examples, make sure you read and understood <a href="#Wrapping">Children Classes &gt; Wrapping</a> because it is key to understanding how you can build a responsive design.</p>
</blockquote>
<p>A full example: let’s say we have a row with three children. On extra small windows, we need to stack the children vertically, on small windows we need to display them side by side (each having equal width), and starting with medium windows we should display them all on same line:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12 col-sm-6 col-md-4"</span>&gt;</span></div><div class="line">    col</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12 col-sm-6 col-md-4"</span>&gt;</span></div><div class="line">    col</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12 col-sm-6 col-md-4"</span>&gt;</span></div><div class="line">    col</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Notice in the above example that we used <code>col-xs-12</code> (12/12 = 100% of row, so each child will take full width of the container making all children stack vertically, since rows are wrapping content by default), <code>col-sm-6</code> (6/12 = 50% of row) and <code>col-md-4</code> (4/12 = 33% of row).</p>
<p>Like previously mentioned, rows wrap content by default, so when 12 (or more) grid points are used for a row, content is wrapped to the next line. If we have two <code>&lt;div&gt;</code>s and we use <code>col-8</code> on both, they will also stack, since 8 + 8 = 16 and we can only display 12 points on a single line.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!--</span></div><div class="line">    more than 12 grid points together,</div><div class="line">    so second &lt;div&gt; will wrap on next line</div><div class="line">  --&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-8"</span>&gt;</span>col<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-8"</span>&gt;</span>col<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Also check <a href="/components/visibility.html#Window-Width-Related">CSS Helpers &gt; Visibility</a> page to see thresholds on window width and these tokens (xs, sm, md, lg, xl) used on their own to hide or show DOM elements.</p>
<h2 id="Using-Gutters"><a href="#Using-Gutters" class="headerlink" title="Using Gutters"></a>Using Gutters</h2><p>There are 5 types of gutter, depending on the amount of space that you want between your elements:</p>
<table>
<thead>
<tr>
<th>Class Name</th>
<th>Size</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>xs-gutter</code></td>
<td>8px</td>
<td>extra small gutter</td>
</tr>
<tr>
<td><code>sm-gutter</code></td>
<td>16px</td>
<td>small gutter</td>
</tr>
<tr>
<td><code>md-gutter</code></td>
<td>32px</td>
<td>medium gutter</td>
</tr>
<tr>
<td><code>lg-gutter</code></td>
<td>48px</td>
<td>large gutter</td>
</tr>
<tr>
<td><code>xl-gutter</code></td>
<td>64px</td>
<td>extra large gutter</td>
</tr>
</tbody>
</table>
<p>Let’s look at a basic example. Please take note of the structure. You need a wrapping <code>&lt;div&gt;</code> and your content must be <strong>inside</strong> the <code>&lt;div&gt;</code> which has <code>col-*</code> CSS helper classes.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Example with extra small gutter and two equal width cols --&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- wrapping &lt;div&gt; required --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- the row with a type of gutter --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row xs-gutter"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-6"</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- Your content here --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-6"</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- Your content here --&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p><strong>IMPORTANT</strong><br>Some components have default margins, like the form components. This will add to the gutter, which is probably not what you want. For such cases, use <code>no-margin</code> class on those components, like in the example below:</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row xs-gutter"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-6"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-input</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">class</span>=<span class="string">"no-margin"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-6"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-input</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">class</span>=<span class="string">"no-margin"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>By default, the gutter applies both horizontally and vertically. If for example you want gutter only horizontally or only vertically, add <code>no-vert-gutter</code> or <code>no-horiz-gutter</code> (but not both).</p>
<h3 id="QInput-Example"><a href="#QInput-Example" class="headerlink" title="QInput Example"></a>QInput Example</h3><p>Let’s say we want to build something depicted in the two picture below.<br><img src="/images/gutter-sm.png" alt="QInput on sm+ windows"><br>… which becomes like below on xs windows:<br><img src="/images/gutter-xs.png" alt="QInput on xs windows"></p>
<p>The template for this would look like below. Note we are using <code>no-margin</code> CSS helper class for QInputs to not add additional space to gutter.<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row sm-gutter"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-12"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-input</span> <span class="attr">inverted</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">class</span>=<span class="string">"no-margin"</span> <span class="attr">float-label</span>=<span class="string">"col-12"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12 col-sm-6"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-input</span> <span class="attr">inverted</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">class</span>=<span class="string">"no-margin"</span> <span class="attr">float-label</span>=<span class="string">"col-xs-12 col-sm-6 TOP LEFT"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12 col-sm-6"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-input</span> <span class="attr">inverted</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">class</span>=<span class="string">"no-margin"</span> <span class="attr">float-label</span>=<span class="string">"col-xs-12 col-sm-6 TOP RIGHT"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12 col-sm-6"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-input</span> <span class="attr">inverted</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">class</span>=<span class="string">"no-margin"</span> <span class="attr">float-label</span>=<span class="string">"col-xs-12 col-sm-6 BOTTOM LEFT"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-12 col-sm-6"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-input</span> <span class="attr">inverted</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">class</span>=<span class="string">"no-margin"</span> <span class="attr">float-label</span>=<span class="string">"col-xs-12 col-sm-6 BOTTOM RIGHT"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-12"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-input</span> <span class="attr">inverted</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">class</span>=<span class="string">"no-margin"</span> <span class="attr">float-label</span>=<span class="string">"col-12"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Floating Action Buttons]]></title>
      <url>http://beta.quasar-framework.org/components/floating-action-button.html</url>
      <content type="html"><![CDATA[<p>A Quasar Floating Action Button (FAB) represents the primary action in an App Page. But, it’s not limited to only a single action. It can contain any number of sub-actions too. And more importantly, it can also be used inline in your Pages or Layouts.</p>
<input type="hidden" data-fullpage-demo="layout/floating-action-button">

<p>Note that you don’t need a QLayout to use FABs.</p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>There are two types of FABs: expandable (has sub-actions) and non-expandable.</p>
<h3 id="Non-Expandable"><a href="#Non-Expandable" class="headerlink" title="Non-Expandable"></a>Non-Expandable</h3><p>If you want a non-expandable FAB, <a href="/components/button.html">all you need is a round button</a> – wrapped in <a href="/components/fixed-positioning-on-layout.html">QFixedPosition</a> if used on a QLayout.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Non-expandable without being on a QLayout --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-btn</span></span></div><div class="line">  <span class="attr">round</span></div><div class="line">  <span class="attr">color</span>=<span class="string">"primary"</span></div><div class="line">  @<span class="attr">click</span>=<span class="string">"method"</span></div><div class="line">  <span class="attr">class</span>=<span class="string">"fixed"</span></div><div class="line">  <span class="attr">style</span>=<span class="string">"right: 18px; bottom: 18px"</span></div><div class="line">&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"mail"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Non-expandable on a QLayout --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-fixed-position</span> <span class="attr">corner</span>=<span class="string">"bottom-right"</span> <span class="attr">:offset</span>=<span class="string">"[18, 18]"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">round</span> <span class="attr">color</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"method"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"mail"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-fixed-position</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Expandable"><a href="#Expandable" class="headerlink" title="Expandable"></a>Expandable</h3><p>Expandable FABs are defined by two components: QFab (parent) and QFabAction (children).<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Expandable --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-fab</span></span></div><div class="line">  <span class="attr">color</span>=<span class="string">"purple"</span></div><div class="line">  <span class="attr">icon</span>=<span class="string">"keyboard_arrow_up"</span></div><div class="line">  <span class="attr">direction</span>=<span class="string">"up"</span></div><div class="line">&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">q-fab-action</span></span></div><div class="line">    <span class="attr">color</span>=<span class="string">"primary"</span></div><div class="line">    @<span class="attr">click</span>=<span class="string">"someMethod"</span></div><div class="line">    <span class="attr">icon</span>=<span class="string">"mail"</span></div><div class="line">  /&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">q-fab-action</span></span></div><div class="line">    <span class="attr">color</span>=<span class="string">"secondary"</span></div><div class="line">    @<span class="attr">click</span>=<span class="string">"someMethod"</span></div><div class="line">    <span class="attr">icon</span>=<span class="string">"alarm"</span></div><div class="line">  /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">q-fab</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Expandable, fixed position without a QLayout --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-fab</span></span></div><div class="line">  <span class="attr">class</span>=<span class="string">"fixed"</span></div><div class="line">  <span class="attr">style</span>=<span class="string">"right: 18px; bottom: 18px"</span></div><div class="line">  <span class="attr">color</span>=<span class="string">"primary"</span></div><div class="line">  <span class="attr">icon</span>=<span class="string">"wifi"</span></div><div class="line">&gt;....<span class="tag">&lt;/<span class="name">q-fab</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Expandable, fixed position on a QLayout --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-fixed-position</span> <span class="attr">corner</span>=<span class="string">"bottom-right"</span> <span class="attr">:offset</span>=<span class="string">"[18, 18]"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-fab</span></span></div><div class="line">    <span class="attr">color</span>=<span class="string">"primary"</span></div><div class="line">    <span class="attr">icon</span>=<span class="string">"wifi"</span></div><div class="line">  &gt;....<span class="tag">&lt;/<span class="name">q-fab</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-fixed-position</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>We’ll continue describing only the expandable FAB, as the non-expandable FAB is, as mentioned above, a simple <a href="/components/button.html">round button</a>.</p>
<h2 id="QFab-Parent"><a href="#QFab-Parent" class="headerlink" title="QFab (Parent)"></a>QFab (Parent)</h2><h3 id="QFab-Vue-Properties"><a href="#QFab-Vue-Properties" class="headerlink" title="QFab Vue Properties"></a>QFab Vue Properties</h3><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Default Value</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>n/a</td>
<td>The color of the button, from <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>direction</code></td>
<td>String</td>
<td>“right”</td>
<td>The direction in which to expand; one of the following values: “up”, “down”, “left”, “right”.</td>
</tr>
<tr>
<td><code>icon</code></td>
<td>String</td>
<td>“add”</td>
<td>Icon to use when not expanded</td>
</tr>
<tr>
<td><code>active-icon</code></td>
<td>String</td>
<td>“close”</td>
<td>The icon to change to when expanded.</td>
</tr>
<tr>
<td><code>outline</code></td>
<td>Boolean</td>
<td>n/a</td>
<td>Set true, for an outlined button.</td>
</tr>
<tr>
<td><code>push</code></td>
<td>Boolean</td>
<td>n/a</td>
<td>Set true, for a push styled button.</td>
</tr>
<tr>
<td><code>flat</code></td>
<td>Boolean</td>
<td>n/a</td>
<td>Set true, for a flat styled button.</td>
</tr>
<tr>
<td><code>glossy</code></td>
<td>Boolean</td>
<td>n/a</td>
<td>Make button “glossy”.</td>
</tr>
</tbody>
</table>
<h3 id="QFab-Vue-Methods"><a href="#QFab-Vue-Methods" class="headerlink" title="QFab Vue Methods"></a>QFab Vue Methods</h3><table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>toggle()</code></td>
<td>Toggle open/close state.</td>
</tr>
<tr>
<td><code>open()</code></td>
<td>Open FAB.</td>
</tr>
<tr>
<td><code>close()</code></td>
<td>Close FAB.</td>
</tr>
</tbody>
</table>
<h3 id="QFab-Vue-Events"><a href="#QFab-Vue-Events" class="headerlink" title="QFab Vue Events"></a>QFab Vue Events</h3><table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@open</code></td>
<td>Triggered when clicking/tapping on main FAB to open it.</td>
</tr>
<tr>
<td><code>@close</code></td>
<td>Triggered when clicking/tapping on main FAB to close it.</td>
</tr>
<tr>
<td><code>@click</code></td>
<td>Triggered when clicking/tapping on main FAB after it was already opened.</td>
</tr>
</tbody>
</table>
<h2 id="QFabAction-Child"><a href="#QFabAction-Child" class="headerlink" title="QFabAction (Child)"></a>QFabAction (Child)</h2><p>The cool bit about FABs is, they give the user the ability to select from a number of actions. These actions can be offered through a list of <code>q-fab-action</code> components witin the FAB component.</p>
<h3 id="Basic-Usage-1"><a href="#Basic-Usage-1" class="headerlink" title="Basic Usage"></a>Basic Usage</h3><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- a q-fab with two actions --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-fab</span></span></div><div class="line">  <span class="attr">color</span>=<span class="string">"purple"</span></div><div class="line">  <span class="attr">icon</span>=<span class="string">"keyboard_arrow_up"</span></div><div class="line">  <span class="attr">direction</span>=<span class="string">"up"</span></div><div class="line">&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">q-fab-action</span></span></div><div class="line">    <span class="attr">class</span>=<span class="string">"white"</span></div><div class="line">    @<span class="attr">click</span>=<span class="string">"someMethod()"</span></div><div class="line">    <span class="attr">icon</span>=<span class="string">"mail"</span></div><div class="line">  /&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">q-fab-action</span></span></div><div class="line">    <span class="attr">class</span>=<span class="string">"white"</span></div><div class="line">    @<span class="attr">click</span>=<span class="string">"someMethod()"</span></div><div class="line">    <span class="attr">icon</span>=<span class="string">"alarm"</span></div><div class="line">  /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">q-fab</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="QFabAction-Vue-Properties"><a href="#QFabAction-Vue-Properties" class="headerlink" title="QFabAction Vue Properties"></a>QFabAction Vue Properties</h3><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>The color of the button.</td>
</tr>
<tr>
<td><code>icon</code></td>
<td>String</td>
<td>The icon of the button.</td>
</tr>
<tr>
<td><code>outline</code></td>
<td>Boolean</td>
<td>Set true, for an outlined button.</td>
</tr>
<tr>
<td><code>push</code></td>
<td>Boolean</td>
<td>Set true, for a push styled button.</td>
</tr>
<tr>
<td><code>flat</code></td>
<td>Boolean</td>
<td>Set true, for a flat styled button.</td>
</tr>
<tr>
<td><code>glossy</code></td>
<td>Boolean</td>
<td>Make button “glossy”.</td>
</tr>
</tbody>
</table>
<h3 id="QFabAction-Vue-Events"><a href="#QFabAction-Vue-Events" class="headerlink" title="QFabAction Vue Events"></a>QFabAction Vue Events</h3><table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@click</code></td>
<td>Triggered when clicking/tapping on the small fab.</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>Note</strong><br>Clicking on a QFabAction will automatically close the list of sub-actions and return the FAB to its original state.</p>
</blockquote>
<h3 id="Labeling-QFabAction-with-Tooltips"><a href="#Labeling-QFabAction-with-Tooltips" class="headerlink" title="Labeling QFabAction with Tooltips"></a>Labeling QFabAction with Tooltips</h3><p>You can also add labels to the actions with a Tooltip. Below is an example of how to do this.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-fab</span></span></div><div class="line">  <span class="attr">color</span>=<span class="string">"primary"</span></div><div class="line">  <span class="attr">active-icon</span>=<span class="string">"alarm"</span></div><div class="line">  <span class="attr">direction</span>=<span class="string">"right"</span></div><div class="line">&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">q-fab-action</span> <span class="attr">color</span>=<span class="string">"purple"</span> @<span class="attr">click</span>=<span class="string">"toast('mail')"</span> <span class="attr">icon</span>=<span class="string">"mail"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-tooltip</span> <span class="attr">anchor</span>=<span class="string">"center left"</span> <span class="attr">self</span>=<span class="string">"center right"</span> <span class="attr">:offset</span>=<span class="string">"[20, 0]"</span>&gt;</span>Mail<span class="tag">&lt;/<span class="name">q-tooltip</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-fab-action</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-fab-action</span> <span class="attr">color</span>=<span class="string">"secondary"</span> @<span class="attr">click</span>=<span class="string">"toast('alarm')"</span> <span class="attr">icon</span>=<span class="string">"alarm"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-tooltip</span> <span class="attr">anchor</span>=<span class="string">"center left"</span> <span class="attr">self</span>=<span class="string">"center right"</span> <span class="attr">:offset</span>=<span class="string">"[20, 0]"</span>&gt;</span>Alarm<span class="tag">&lt;/<span class="name">q-tooltip</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-fab-action</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-fab</span>&gt;</span></div></pre></td></tr></table></figure>
<p>For more information about Tooltips, please refer to the <a href="/components/tooltip.html">Tooltip documentation</a>.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Form Validation]]></title>
      <url>http://beta.quasar-framework.org/components/form-validation.html</url>
      <content type="html"><![CDATA[<p>Recommended package for Form Validations is <code>Vuelidate</code>.<br>Get started with the <a href="https://monterail.github.io/vuelidate/" target="_blank" rel="external">documentation</a>.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-input</span></span></div><div class="line">      <span class="attr">v-model</span>=<span class="string">"form.email"</span></div><div class="line">      @<span class="attr">blur</span>=<span class="string">"$v.form.email.$touch"</span></div><div class="line">      @<span class="attr">keyup.enter</span>=<span class="string">"submit"</span></div><div class="line">      <span class="attr">:error</span>=<span class="string">"$v.form.email.$error"</span></div><div class="line">    /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"submit"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">import</span> &#123; required, email &#125; <span class="keyword">from</span> <span class="string">'vuelidate/lib/validators'</span></div><div class="line"><span class="keyword">import</span> &#123; Toast &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  data () &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      form: &#123;</div><div class="line">        email: <span class="string">''</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  validations: &#123;</div><div class="line">    form: &#123;</div><div class="line">      email: &#123; required, email  &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  methods: &#123;</div><div class="line">    submit () &#123;</div><div class="line">      <span class="keyword">this</span>.$v.form.$touch()</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.$v.form.$error) &#123;</div><div class="line">        Toast.create(<span class="string">'Please review fields again.'</span>)</div><div class="line">        <span class="keyword">return</span></div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">// ...</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Formatter Utils]]></title>
      <url>http://beta.quasar-framework.org/components/formatter-utils.html</url>
      <content type="html"><![CDATA[<h3 id="Helping-Tree-Shake"><a href="#Helping-Tree-Shake" class="headerlink" title="Helping Tree-Shake"></a>Helping Tree-Shake</h3><p>You will notice all examples import <code>format</code> Object from Quasar. However, if you need only one formatter method from it, then you can use ES6 destructuring to help Tree Shaking embed only that method and not all of <code>format</code>.</p>
<p>Example:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// we import all of `date`</span></div><div class="line"><span class="keyword">import</span> &#123; format &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"><span class="comment">// destructuring to keep only what is needed</span></div><div class="line"><span class="keyword">const</span> &#123; capitalize, humanStorageSize &#125; = format</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log( capitalize(<span class="string">'some text'</span>) )</div><div class="line"><span class="comment">// Some text</span></div><div class="line"><span class="built_in">console</span>.log( humanStorageSize(<span class="number">13087</span>) )</div><div class="line"><span class="comment">// 12.78 kB</span></div></pre></td></tr></table></figure></p>
<p>You can also import all formatters and use whatever you need like this (but note that your bundle will probably contain unused methods too):<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; format &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log( format.capitalize(<span class="string">'some text'</span>) )</div><div class="line"><span class="built_in">console</span>.log( format.humanStorageSize(<span class="number">13087</span>) )</div></pre></td></tr></table></figure></p>
<h2 id="Capitalize"><a href="#Capitalize" class="headerlink" title="Capitalize"></a>Capitalize</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; format &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"><span class="keyword">const</span> &#123; capitalize &#125; = format</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log( capitalize(<span class="string">'some text'</span>) )</div><div class="line"><span class="comment">// Some text</span></div></pre></td></tr></table></figure>
<h2 id="Format-to-Human-Readable-Size"><a href="#Format-to-Human-Readable-Size" class="headerlink" title="Format to Human Readable Size"></a>Format to Human Readable Size</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; format &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"><span class="keyword">const</span> &#123; humanStorageSize &#125; = format</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log( humanStorageSize(<span class="number">13087</span>) )</div><div class="line"><span class="comment">// 12.78 kB</span></div></pre></td></tr></table></figure>
<h2 id="Normalize-Number-to-Interval"><a href="#Normalize-Number-to-Interval" class="headerlink" title="Normalize Number to Interval"></a>Normalize Number to Interval</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; format &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"><span class="keyword">const</span> &#123; between &#125; = format</div><div class="line"></div><div class="line"><span class="comment">// (Number) between(Number, Number min, Number max)</span></div><div class="line"><span class="built_in">console</span>.log( between(<span class="number">50</span>, <span class="number">10</span>, <span class="number">20</span>) )</div><div class="line"><span class="comment">// 20</span></div></pre></td></tr></table></figure>
<h2 id="Pad-String"><a href="#Pad-String" class="headerlink" title="Pad String"></a>Pad String</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; format &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"><span class="keyword">const</span> &#123; pad &#125; = format</div><div class="line"></div><div class="line"><span class="comment">// (String) pad(String toPad, Number length, String paddingCharacter)</span></div><div class="line"><span class="comment">// length is default 2</span></div><div class="line"><span class="comment">// paddingCharacter is default '0'</span></div><div class="line"><span class="built_in">console</span>.log( pad(<span class="string">'2'</span>, <span class="number">4</span>) )</div><div class="line"><span class="comment">// '0002'</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Global Event Bus]]></title>
      <url>http://beta.quasar-framework.org/components/global-event-bus.html</url>
      <content type="html"><![CDATA[<p>Events are important for the inner workings of your App.<br>Sometimes you need an event bus or a publish/subscribe channel. Quasar provides this out of the box:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// outside of a Vue component:</span></div><div class="line"><span class="keyword">import</span> &#123; Events &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line">Events.$on(<span class="string">'app:visibility'</span>, state =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'App became'</span>, state)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// inside a Vue component:</span></div><div class="line"><span class="keyword">this</span>.$q.events.$on(<span class="string">'app:visibility'</span>, state =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'App became'</span>, state)</div><div class="line">&#125;)</div><div class="line"><span class="comment">// in this case, make sure you unregister your handler</span></div><div class="line"><span class="comment">// when the Vue component gets destroyed</span></div></pre></td></tr></table></figure>
<p>Full example inside a Vue component:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// on a Vue component:</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  ...,</div><div class="line">  created () &#123;</div><div class="line">    <span class="keyword">this</span>.handler = state =&gt; &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'App became'</span>, state)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>.$q.events.$on(<span class="string">'app:visibility'</span>, <span class="keyword">this</span>.handler)</div><div class="line">  &#125;,</div><div class="line">  beforeDestroy () &#123;</div><div class="line">    <span class="keyword">this</span>.$q.events.$off(<span class="string">'app:visibility'</span>, <span class="keyword">this</span>.handler)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Essentially, Events is just a Vue event bus that you can use throughout your App. If you know how to use Vue events, then you’re all set to go.</p>
<blockquote>
<p><strong>IMPORTANT!</strong><br>Not to be confused with events supported by Quasar Components. Those are Vue events emitted by the respective components and don’t interfere with this global event bus.</p>
</blockquote>
<h2 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h2><h3 id="Registering-for-an-Event"><a href="#Registering-for-an-Event" class="headerlink" title="Registering for an Event"></a>Registering for an Event</h3><p><code>Events.$on(String eventName, Function callback)</code></p>
<p>Example:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Events &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">Events.$on(<span class="string">'some-event'</span>, (param1, param2) =&gt; &#123;</div><div class="line">  <span class="comment">//...</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="Removing-Callback-for-an-Event"><a href="#Removing-Callback-for-an-Event" class="headerlink" title="Removing Callback for an Event"></a>Removing Callback for an Event</h3><p><code>Events.$off(String eventName [, Function callback])</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Events &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="comment">// Unregistering an event:</span></div><div class="line">Events.$off(<span class="string">'event-name'</span>)</div><div class="line"><span class="comment">// 'event-name' does no longer has any callbacks</span></div><div class="line"></div><div class="line"><span class="comment">// Unregistering a specific callback for an event:</span></div><div class="line"><span class="keyword">let</span> callback = <span class="function"><span class="keyword">function</span>(<span class="params">...</span>) </span>&#123;...&#125;</div><div class="line">Events.$on(<span class="string">'event-name'</span>, callback)</div><div class="line">Events.$off(<span class="string">'event-name'</span>, callback)</div><div class="line"><span class="comment">// 'event-name' still exists (if other callbacks are registered to this event),</span></div><div class="line"><span class="comment">// but does not contain the above callback anymore</span></div></pre></td></tr></table></figure>
<h3 id="Registering-a-Callback-to-Be-Run-Only-Once"><a href="#Registering-a-Callback-to-Be-Run-Only-Once" class="headerlink" title="Registering a Callback to Be Run Only Once"></a>Registering a Callback to Be Run Only Once</h3><p><code>Events.$once(String eventName, Function callback)</code></p>
<p>Sometimes you need to trigger a callback only once. Example:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Events &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> callback = <span class="function"><span class="keyword">function</span>(<span class="params">...</span>) </span>&#123;...&#125;</div><div class="line">Events.$once(<span class="string">'event-name'</span>, callback)</div><div class="line"><span class="comment">// callback will be triggered only once</span></div></pre></td></tr></table></figure></p>
<h3 id="Triggering-an-Event"><a href="#Triggering-an-Event" class="headerlink" title="Triggering an Event"></a>Triggering an Event</h3><p><code>Events.$emit(String eventName [, Anything *arg])</code></p>
<p>Example:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Events &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">Events.$emit(<span class="string">'event-name'</span>)</div><div class="line"><span class="comment">// All callbacks associated with 'event-name' will be triggered</span></div><div class="line"><span class="comment">// in the order that they were registered.</span></div><div class="line"></div><div class="line"><span class="comment">// Trigger with parameters (as many as you want):</span></div><div class="line">Events.$emit(<span class="string">'event-name'</span>, &#123;</div><div class="line">  status: <span class="number">10</span>,</div><div class="line">  message: <span class="string">'wow'</span>,</div><div class="line">  &#123;obj: <span class="literal">true</span>&#125;</div><div class="line">)</div><div class="line"><span class="comment">// The parameters will be used when calling all registered</span></div><div class="line"><span class="comment">// callbacks for 'event-name' --&gt; callback(&#123;status: 10, message: 'wow',...&#125;);</span></div></pre></td></tr></table></figure></p>
<h2 id="Quasar-Events-List"><a href="#Quasar-Events-List" class="headerlink" title="Quasar Events List"></a>Quasar Events List</h2><p>There are some events emitted by Quasar already that you can hook into.</p>
<h3 id="Global-Events"><a href="#Global-Events" class="headerlink" title="Global Events"></a>Global Events</h3><table>
<thead>
<tr>
<th>Event Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>app:error</td>
<td>Triggered for any Javascript error. See parameters below.</td>
</tr>
</tbody>
</table>
<h4 id="Parameter-supplied-by-app-error"><a href="#Parameter-supplied-by-app-error" class="headerlink" title="Parameter supplied by app:error"></a>Parameter supplied by <code>app:error</code></h4><p><code>app:error</code> event is triggerd with one parameter, an Object containing the following properties:</p>
<table>
<thead>
<tr>
<th>Property Name</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>message</td>
<td>String</td>
<td>Error message</td>
</tr>
<tr>
<td>source</td>
<td>String</td>
<td>URL of the script where the error was raised</td>
</tr>
<tr>
<td>lineno</td>
<td>Number</td>
<td>Line number where error was raised</td>
</tr>
<tr>
<td>colno</td>
<td>Number</td>
<td>Column number for the line where the error occurred</td>
</tr>
<tr>
<td>error</td>
<td>Object</td>
<td>Error Object containing amongst other things the stack trace</td>
</tr>
</tbody>
</table>
<h3 id="App-Visibility"><a href="#App-Visibility" class="headerlink" title="App Visibility"></a>App Visibility</h3><table>
<thead>
<tr>
<th>Event Name</th>
<th>Parameters</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>app:visibility</td>
<td>(String) state</td>
<td>App got focus if <code>state</code> is <code>visible</code> or lost focus if <code>state</code> is <code>hidden</code></td>
</tr>
</tbody>
</table>
<p>Read more about it <a href="/components/app-visibility.html">here</a>.</p>
<h3 id="Toast"><a href="#Toast" class="headerlink" title="Toast"></a>Toast</h3><table>
<thead>
<tr>
<th>Event Name</th>
<th>Parameters</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>app:notify</td>
<td>(String) html</td>
<td>Is triggered whenever a Toast is displayed.</td>
</tr>
</tbody>
</table>
<p>Read more about it <a href="/components/toast.html">here</a>.</p>
<h3 id="Loading"><a href="#Loading" class="headerlink" title="Loading"></a>Loading</h3><table>
<thead>
<tr>
<th>Event Name</th>
<th>Parameters</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>app:loading</td>
<td>(Boolean) status</td>
<td>Triggered when Loading component is displayed (with <code>true</code> as param) or hidden (with <code>false</code> as param).</td>
</tr>
</tbody>
</table>
<p>Read more about it <a href="/components/loading.html">here</a>.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Handling Back Button]]></title>
      <url>http://beta.quasar-framework.org/components/handling-back-button.html</url>
      <content type="html"><![CDATA[<p>When writing reusable code for building a mobile App and a website, it’s important to know how to handle the “Back” button. More specifically, how to manage buttons on your layout/page that should make your App “go back” to the previous screen.</p>
<blockquote>
<p>If you have no knowledge of <a href="http://router.vuejs.org/" target="_blank" rel="external">Vue Router</a>, we highly recommend you read and understand how it works first.</p>
</blockquote>
<h2 id="Navigation-Scenario"><a href="#Navigation-Scenario" class="headerlink" title="Navigation Scenario"></a>Navigation Scenario</h2><p>Consider this situation: We have an App with two pages (so two routes): a login page (route “/“) and another page with a list of items on multiple layout tabs-  Let’s call this page “List page” from now on, where each tab has a route like “/list/shoes”, “/list/hats”. The Login page redirects to List page and List page has a “Logout” button, which redirects the user to the Login page.</p>
<p>How would you handle this situation? Normally, you’d write code like below for the Login and Logout button (we won’t go into details of handling the login information and communicating with a server as this is outside of our point here):</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Login button --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-btn</span> @<span class="attr">click</span>=<span class="string">"$router.push('/list')"</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Logout button --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-btn</span> @<span class="attr">click</span>=<span class="string">"$router.push('/list')"</span>&gt;</span>Logout<span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Now you build your App and install it on a phone. You open up the App, hit login then logout, then the phone’s back button. What you most likely want is for your App to exit at this point… but it doesn’t! It goes to the “/list” route instead. It’s kind of obvious why. Web history builds up as you hit the buttons:<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># Start App</div><div class="line">--&gt; window.history.length is 1</div><div class="line"></div><div class="line"># Hit Login button</div><div class="line">--&gt; window.history.length is 2</div><div class="line"></div><div class="line"># Hit Logout button</div><div class="line">--&gt; window.history.length is 3!</div></pre></td></tr></table></figure></p>
<p>What you’d like instead, is when you hit the Logout button, the <code>window.history.length</code> to be 1 again. Quasar can handle this automatically for you. Read about the <code>v-go-back</code> Vue directive.</p>
<h2 id="Directive-“v-go-back”"><a href="#Directive-“v-go-back”" class="headerlink" title="Directive “v-go-back”"></a>Directive “v-go-back”</h2><p>Let’s rewrite the Logout button to act as we would actually want it to work, which is to make <code>window.history.length</code> be 1 again:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Logout button --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"primary"</span> <span class="attr">v-go-back</span>=<span class="string">" '/' "</span>&gt;</span>Logout<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>This directive determines if the Platform is Cordova, and if so, it performs a <code>window.history.back()</code> call instead of a <code>$router.push(&#39;/&#39;)</code>.</p>
<h2 id="Quirks"><a href="#Quirks" class="headerlink" title="Quirks"></a>Quirks</h2><p>Now you may think everything will work smoothly, but you must be careful about how your app is stacking up the window history. Remember, we started out by saying that the List page has a layout with multiple tabs, each one with its own route (“/list/shoes”, “/list/hats”). If we’d use <code>to=&quot;/list/shoes&quot;</code> and <code>to=&quot;/list/hats&#39;&quot;</code> on your Tabs (read more about Tabs <a href="/components/tabs.html">here</a>), then window history will build up when switching between the tabs.</p>
<p>This incorrect behavior for apps is due to Vue Router pushing routes to the history by default. What you’d like instead, is for your window history length to stay the same, even if routes change. Fortunately, Vue Router comes to the rescue with the <code>replace</code> property, which essentially replaces current route instead of pushing it as a new route.</p>
<p>So, besides <code>to=&quot; &#39;...route...&#39; &quot;</code> you should add the <code>replace</code> attribute (becoming <code>to=&quot; &#39;...route...&#39; &quot; replace</code>). This will replace the current route in the window history rather than pushing it.</p>
<p>The same applies to <code>&lt;router-link&gt;</code>s.</p>
<blockquote>
<p>Always <strong>think</strong> about how you redirect your App to a new route, depending on what you want to achieve. Think if you really want to push a new route to window history or if you want to “replace” the current route. Otherwise the phone/tablet/browser “Back” button won’t work quite as expected. Instead of finally exiting the App, it will make you go through all the routes in the reverse order they were visited. So when you hit back and go to the Login page, you’d expect another back to make the App exit, but it might make your App go to one of the List tabs, depending on the user’s navigation history.</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Handling JS Date]]></title>
      <url>http://beta.quasar-framework.org/components/handling-js-date.html</url>
      <content type="html"><![CDATA[<p>Quasar provides a set of useful functions to manipulate JS Date easily in most use cases, without the high additional cost of integrating dedicated libraries like <a href="https://momentjs.com" target="_blank" rel="external">moment</a>.</p>
<p>Most Quasar date functions take as parameter either a Unix timestamp or a String representing a date which needs to be parsable by the native JS <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date" target="_blank" rel="external">Date constructor</a>. Some examples: <code>1497159857411</code>, <code>Sun Jun 11 2017 08:44:42 GMT+0300</code>, <code>2017-06-16</code>.</p>
<p>Returned values are all JS Dates.</p>
<p>Get familiar with JS native Date class, which is very powerful, and remember that you don’t need solutions like Momentjs which add hundreds of minified KB to your bundle.</p>
<h3 id="Helping-Tree-Shake"><a href="#Helping-Tree-Shake" class="headerlink" title="Helping Tree-Shake"></a>Helping Tree-Shake</h3><p>You will notice all examples import <code>date</code> Object from Quasar. However, if you need only one method from it, then you can use ES6 destructuring to help Tree Shaking embed only that method and not all of <code>date</code>.</p>
<p>Example with <code>addToDate()</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// we import all of `date`</span></div><div class="line"><span class="keyword">import</span> &#123; date &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"><span class="comment">// destructuring to keep only what is needed</span></div><div class="line"><span class="keyword">const</span> &#123; addToDate &#125; = date</div><div class="line"></div><div class="line"><span class="keyword">let</span> date = addToDate(<span class="keyword">new</span> <span class="built_in">Date</span>(), &#123; days: <span class="number">7</span>, months: <span class="number">1</span> &#125;)</div></pre></td></tr></table></figure></p>
<h2 id="Format-for-display"><a href="#Format-for-display" class="headerlink" title="Format for display"></a>Format for display</h2><p>It takes a string of tokens and replaces them with their corresponding date values:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; date &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> timeStamp = <span class="built_in">Date</span>.now()</div><div class="line"><span class="keyword">let</span> formattedString = date.formatDate(timeStamp, <span class="string">'YYYY-MM-DDTHH:mm:ss.SSSZ'</span>)</div></pre></td></tr></table></figure></p>
<p>For i18n, you can use a third parameter:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> formattedString = date.formatDate(timesStamp, <span class="string">'MMMM - dddd'</span>, &#123;</div><div class="line">  dayNames: [<span class="string">'Duminica'</span>, <span class="string">'Luni'</span>, <span class="comment">/* and all the rest of days - remember starting with Sunday */</span>],</div><div class="line">  monthNames: [<span class="string">'Ianuarie'</span>, <span class="string">'Februarie'</span>, <span class="comment">/* and all the rest of months */</span>]</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>Available format tokens:</p>
<table>
<thead>
<tr>
<th>Unit</th>
<th>Formats available</th>
</tr>
</thead>
<tbody>
<tr>
<td>Year</td>
<td><ul><li><strong>YY</strong>: 70 71 … 29 30</li><li><strong>YYYY</strong>: 1970 1971 … 2029 2030</li></ul></td>
</tr>
<tr>
<td>Month</td>
<td><ul><li><strong>M</strong>: 1 2 … 11 12</li><li><strong>MM</strong>: 01 02 … 11 12</li><li><strong>MMM</strong>: Jan Feb … Nov Dec</li><li><strong>MMMM</strong>: January February … November December</li><li><strong>Q</strong>: Quarter number 1 2 3 4</li></ul></td>
</tr>
<tr>
<td>Day of Month</td>
<td><ul><li><strong>D</strong>: 1 2 … 30 31</li><li><strong>DD</strong>: 01 02 … 30 31</li></ul></td>
</tr>
<tr>
<td>Day of Year</td>
<td><ul><li><strong>DDD</strong>: 1 2 … 364 365</li><li><strong>DDDD</strong>: 001 002 … 364 365</li></ul></td>
</tr>
<tr>
<td>Day of Week</td>
<td><ul><li><strong>d</strong>: 0 1 … 5 6</li><li><strong>dd</strong>: Su Mo … Fr Sa</li><li><strong>ddd</strong>: Sun Mon … Fri Sat</li><li><strong>dddd</strong>: Sunday Monday … Friday Saturday</li></ul></td>
</tr>
<tr>
<td>Day of Week (ISO)</td>
<td><ul><li><strong>E</strong>: 1 2 … 6 7</li></ul></td>
</tr>
<tr>
<td>Week of Year</td>
<td><ul><li><strong>w</strong>: 1 2 … 52 53</li><li><strong>ww</strong>: 01 02 … 52 53</li></ul></td>
</tr>
<tr>
<td>Hour</td>
<td><ul><li><strong>H</strong>: 0 1 … 22 23</li><li><strong>HH</strong>: 00 01 … 22 23</li><li><strong>h</strong>: 0 … 11 12</li><li><strong>hh</strong>: 01 02 … 11 12</li></ul></td>
</tr>
<tr>
<td>Minute</td>
<td><ul><li><strong>m</strong>: 0 1 … 58 59</li><li><strong>mm</strong>: 00 01 … 58 59</li></ul></td>
</tr>
<tr>
<td>Second</td>
<td><ul><li><strong>s</strong>: 0 1 … 58 59</li><li><strong>ss</strong>: 00 01 … 58 59</li></ul></td>
</tr>
<tr>
<td>Fractional Second</td>
<td><ul><li><strong>S</strong>: 0 1 … 8 9</li><li><strong>SS</strong>: 00 01 … 98 99</li><li><strong>SSS</strong>: 000 001 … 998 999</li></ul></td>
</tr>
<tr>
<td>Timezone offset</td>
<td><ul><li><strong>Z</strong>: -07:00 -06:00 … +06:00 +07:00</li><li><strong>ZZ</strong>: -0700 -0600 … +0600 +0700</li></ul></td>
</tr>
<tr>
<td>AM/PM</td>
<td><ul><li><strong>A</strong>: AM, PM</li><li><strong>a</strong>: am, pm</li><li><strong>aa</strong>: a.m, p.m</li></ul></td>
</tr>
<tr>
<td>Unix Timestamp</td>
<td><ul><li><strong>X</strong>: 1360013296</li><li><strong>x</strong> (ms): 1360013296123</li></ul></td>
</tr>
</tbody>
</table>
<h2 id="Manipulate-dates"><a href="#Manipulate-dates" class="headerlink" title="Manipulate dates"></a>Manipulate dates</h2><h3 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h3><p><strong>Try to create dates with native JS Date class</strong> like so:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</div></pre></td></tr></table></figure></p>
<p>The following method is just a wrapper to help you in cases where you just need current time but with a different year, or month, or second etc.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; date &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> date = date.buildDate(&#123; year:<span class="number">2010</span>, date:<span class="number">5</span>, hours:<span class="number">15</span>, milliseconds:<span class="number">123</span>&#125;)</div></pre></td></tr></table></figure>
<p>You can pass a third argument (a boolean) for setting UTC time (true) instead of local time.</p>
<p>The object literal provided can contain the following keys (all are optional):</p>
<table>
<thead>
<tr>
<th>Key</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>milliseconds</code></td>
<td>for the milliseconds component of the date/time</td>
</tr>
<tr>
<td><code>seconds</code></td>
<td>for the seconds component of the date/time</td>
</tr>
<tr>
<td><code>minutes</code></td>
<td>for the minutes component of the date/time</td>
</tr>
<tr>
<td><code>hours</code></td>
<td>for the hours component of the date/time</td>
</tr>
<tr>
<td><code>date</code></td>
<td>for the day component of the date/time</td>
</tr>
<tr>
<td><code>month</code></td>
<td>for the month component of the date/time</td>
</tr>
<tr>
<td><code>year</code></td>
<td>for the year component of the date/time</td>
</tr>
</tbody>
</table>
<h3 id="Validate"><a href="#Validate" class="headerlink" title="Validate"></a>Validate</h3><p>To check if a date string is valid use:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; date &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> dateString = <span class="string">'Wed, 09 Aug 1995 00:00:00 GMT'</span></div><div class="line"><span class="keyword">if</span> (date.isValid(dateString)) &#123;</div><div class="line">  <span class="comment">// Do something with date string</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Add-Subtract"><a href="#Add-Subtract" class="headerlink" title="Add/Subtract"></a>Add/Subtract</h3><p>To add/subtract some duration to/from a date use:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; date &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2017</span>, <span class="number">2</span>, <span class="number">7</span>)</div><div class="line"></div><div class="line">date = date.addToDate(date, &#123; days: <span class="number">7</span>, months: <span class="number">1</span> &#125;)</div><div class="line"><span class="comment">// `date` is now 2017-3-14 00:00:00</span></div><div class="line"></div><div class="line">date = date.subtractFromDate(date, &#123; hours: <span class="number">24</span>, milliseconds: <span class="number">10000</span> &#125;)</div><div class="line"><span class="comment">// `date` is now 2017-3-12 23:59:50</span></div></pre></td></tr></table></figure></p>
<p>The object literal provided can contain the following keys (all are optional):</p>
<table>
<thead>
<tr>
<th>Key</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>milliseconds</code></td>
<td>for a duration in milliseconds</td>
</tr>
<tr>
<td><code>seconds</code></td>
<td>for a duration in seconds</td>
</tr>
<tr>
<td><code>minutes</code></td>
<td>for a duration in minutes</td>
</tr>
<tr>
<td><code>hours</code></td>
<td>for a duration in hours</td>
</tr>
<tr>
<td><code>days</code></td>
<td>for a duration in days</td>
</tr>
<tr>
<td><code>month</code></td>
<td>for a duration in months</td>
</tr>
<tr>
<td><code>year</code></td>
<td>for a duration in years</td>
</tr>
</tbody>
</table>
<h3 id="Set-date-time"><a href="#Set-date-time" class="headerlink" title="Set date/time"></a>Set date/time</h3><p>To set a specified unit(s) of date/time:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; date &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2017</span>, <span class="number">10</span>, <span class="number">2</span>)</div><div class="line"><span class="keyword">let</span> adjustedDate = date.adjustDate(date, &#123; year: <span class="number">2010</span>, month: <span class="number">2</span> &#125;)</div><div class="line"><span class="comment">// `adjustedDate` is 2010-2-2</span></div></pre></td></tr></table></figure></p>
<p>You can pass a third argument (a Boolean) for setting UTC time (<code>true</code>) instead of local time.</p>
<p>The object literal provided can contain the following keys (all are optional):</p>
<table>
<thead>
<tr>
<th>Key</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>milliseconds</code></td>
<td>for the milliseconds component of the date/time</td>
</tr>
<tr>
<td><code>seconds</code></td>
<td>for the seconds component of the date/time</td>
</tr>
<tr>
<td><code>minutes</code></td>
<td>for the minutes component of the date/time</td>
</tr>
<tr>
<td><code>hours</code></td>
<td>for the hours component of the date/time</td>
</tr>
<tr>
<td><code>date</code></td>
<td>for the day component of the date/time</td>
</tr>
<tr>
<td><code>month</code></td>
<td>for the month component of the date/time</td>
</tr>
<tr>
<td><code>year</code></td>
<td>for the year component of the date/time</td>
</tr>
</tbody>
</table>
<h2 id="Query-dates"><a href="#Query-dates" class="headerlink" title="Query dates"></a>Query dates</h2><h3 id="Minimum-Maximum"><a href="#Minimum-Maximum" class="headerlink" title="Minimum/Maximum"></a>Minimum/Maximum</h3><p>To get the minimum/maximum date of a date set (i.e. array) use:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; date &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> dates = [ <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2017</span>, <span class="number">6</span>, <span class="number">24</span>), <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2017</span>, <span class="number">5</span>, <span class="number">20</span>), <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2017</span>, <span class="number">6</span>, <span class="number">26</span>) ]</div><div class="line"><span class="keyword">let</span> min = date.getMinDate(dates) <span class="comment">// `min` is 2017-5-20</span></div><div class="line"><span class="keyword">let</span> max = date.getMaxDate(dates) <span class="comment">// `max` is 2017-6-26</span></div><div class="line"></div><div class="line"><span class="comment">// Or simply use multiple parameters:</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> min = date.getMinDate(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2017</span>, <span class="number">6</span>, <span class="number">24</span>), <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2017</span>, <span class="number">5</span>, <span class="number">20</span>), <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2017</span>, <span class="number">6</span>, <span class="number">26</span>))</div><div class="line"><span class="comment">// `min` is 2017-5-20</span></div><div class="line"><span class="keyword">let</span> max = date.getMaxDate(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2017</span>, <span class="number">6</span>, <span class="number">24</span>), <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2017</span>, <span class="number">5</span>, <span class="number">20</span>), <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2017</span>, <span class="number">6</span>, <span class="number">26</span>))</div><div class="line"><span class="comment">// `max` is 2017-6-26</span></div></pre></td></tr></table></figure></p>
<h3 id="Time-range"><a href="#Time-range" class="headerlink" title="Time range"></a>Time range</h3><p>To check if a date is <strong>strictly</strong> (i.e. exclusive range) in a given date/time range use:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; date &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>()</div><div class="line"><span class="keyword">let</span> dateFrom = <span class="keyword">new</span> <span class="built_in">Date</span>()</div><div class="line"><span class="keyword">let</span> dateTo = <span class="keyword">new</span> <span class="built_in">Date</span>()</div><div class="line"><span class="keyword">if</span> (date.isBetweenDates(date, dateFrom, dateTo)) &#123;</div><div class="line">  <span class="comment">// Do something with date</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>To normalize a date in a given date/time range use:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; date &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>()</div><div class="line"><span class="keyword">let</span> dateMin = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2010</span>, <span class="number">2</span>, <span class="number">23</span>)</div><div class="line"><span class="keyword">let</span> dateMax = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2012</span>, <span class="number">4</span>, <span class="number">12</span>)</div><div class="line"><span class="keyword">let</span> dateNormalized = date.getDateBetween(date, dateMin, dateMax)</div><div class="line"><span class="comment">// Returns `date` if it's between 2010-2-23 and 2012-4-12; `dateMin` if it's lower; `dateMax` if it's greater</span></div></pre></td></tr></table></figure></p>
<h3 id="Equality"><a href="#Equality" class="headerlink" title="Equality"></a>Equality</h3><p>To check if two dates’ unit are <strong>equal</strong> use:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; date &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> date1 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2017</span>, <span class="number">2</span>, <span class="number">5</span>)</div><div class="line"><span class="keyword">let</span> date2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2017</span>, <span class="number">3</span>, <span class="number">8</span>)</div><div class="line"><span class="keyword">let</span> unit = <span class="string">'year'</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> (date.isSameDate(date1, date2, <span class="comment">/* optional */</span> unit)) &#123;</div><div class="line">  <span class="comment">// true because date1 and date2's year is the same</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Unit parameter can be omitted, in which case a full date/time comparison will occur, otherwise it allows to perform partial comparison:</p>
<table>
<thead>
<tr>
<th>Unit</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>second</code></td>
<td>test if same second only</td>
</tr>
<tr>
<td><code>minute</code></td>
<td>test if same minute only</td>
</tr>
<tr>
<td><code>hour</code></td>
<td>test if same hour only</td>
</tr>
<tr>
<td><code>day</code></td>
<td>test if same day only</td>
</tr>
<tr>
<td><code>month</code></td>
<td>test if same month only</td>
</tr>
<tr>
<td><code>year</code></td>
<td>test if same year only</td>
</tr>
</tbody>
</table>
<h3 id="Difference"><a href="#Difference" class="headerlink" title="Difference"></a>Difference</h3><p>To compute the difference between two dates use:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; date &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> date1 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2017</span>, <span class="number">4</span>, <span class="number">12</span>)</div><div class="line"><span class="keyword">let</span> date2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2017</span>, <span class="number">3</span>, <span class="number">8</span>)</div><div class="line"><span class="keyword">let</span> unit = <span class="string">'days'</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> diff = date.getDateDiff(date1, date2, unit)</div><div class="line"><span class="comment">// `diff` is 34 (days)</span></div></pre></td></tr></table></figure></p>
<p>The unit parameter indicates the unit of measurement, if not specified then it is <code>days</code> by default:</p>
<table>
<thead>
<tr>
<th>Unit</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>seconds</code></td>
<td>distance in seconds</td>
</tr>
<tr>
<td><code>minutes</code></td>
<td>distance in minutes</td>
</tr>
<tr>
<td><code>hours</code></td>
<td>distance in hours</td>
</tr>
<tr>
<td><code>days</code></td>
<td>distance in days</td>
</tr>
<tr>
<td><code>months</code></td>
<td>distance in months</td>
</tr>
<tr>
<td><code>years</code></td>
<td>distance in years</td>
</tr>
</tbody>
</table>
<h3 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a>Calendar</h3><p>To get the week number in year for a given date object use:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; date &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2017</span>, <span class="number">0</span>, <span class="number">4</span>)</div><div class="line"><span class="keyword">let</span> week = date.getWeekOfYear(date) <span class="comment">// `week` is 1</span></div></pre></td></tr></table></figure></p>
<p>To get the day number in year for a given date object use:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; date &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2017</span>, <span class="number">1</span>, <span class="number">4</span>)</div><div class="line"><span class="keyword">let</span> day = date.getDayOfYear(date) <span class="comment">// `day` is 35</span></div></pre></td></tr></table></figure></p>
<p>To get the day number in week for a given date object use:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; date &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2017</span>, <span class="number">1</span>, <span class="number">9</span>)</div><div class="line"><span class="keyword">let</span> day = date.getDayOfWeek(date) <span class="comment">// `day` is 4</span></div></pre></td></tr></table></figure></p>
<p>To get the number of days in the month for the specified date:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; date &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>()</div><div class="line"><span class="keyword">let</span> days = date.daysInMonth(date) <span class="comment">// e.g. 30</span></div></pre></td></tr></table></figure></p>
<h3 id="Start-End-of-time"><a href="#Start-End-of-time" class="headerlink" title="Start/End of time"></a>Start/End of time</h3><p>To mutate the original date object by setting it to the start of a unit of time use:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; date &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2000</span>)</div><div class="line"><span class="comment">// set to beginning of year 2000 (January 1st, 2000, 00:00:00.000)</span></div><div class="line">date = date.startOfDate(date, <span class="string">'year'</span>)</div><div class="line"><span class="comment">// set to end of year 2000 (December 31st, 2000, 23:59:59.999)</span></div><div class="line">date = date.endOfDate(date, <span class="string">'year'</span>)</div></pre></td></tr></table></figure></p>
<p>The second parameter indicates a unit to reset to (beginning of it or end of it):</p>
<table>
<thead>
<tr>
<th>Unit</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>second</code></td>
<td>reset seconds</td>
</tr>
<tr>
<td><code>minute</code></td>
<td>reset minutes</td>
</tr>
<tr>
<td><code>hour</code></td>
<td>reset hours</td>
</tr>
<tr>
<td><code>day</code></td>
<td>reset days</td>
</tr>
<tr>
<td><code>month</code></td>
<td>reset months</td>
</tr>
<tr>
<td><code>year</code></td>
<td>reset years</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[HTML Tables]]></title>
      <url>http://beta.quasar-framework.org/components/html-table.html</url>
      <content type="html"><![CDATA[<p>HTML tables don’t need to look bad. Quasar takes care of them by default if you add <code>q-table</code> CSS class to them.</p>
<input type="hidden" data-fullpage-demo="grouping/html-table">

<p>If the default table style is not enough, also add the following CSS classes to best suit your needs: <code>bordered</code>, <code>horizontal-separator</code>, <code>vertical-separator</code>, <code>cell-separator</code>, <code>striped</code>, <code>striped-even</code>, <code>striped-odd</code>, <code>highlight</code>, <code>compact</code>, <code>loose</code>, <code>flipped</code>, <code>responsive</code>.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"q-table"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">thead</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">"text-left"</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">"text-right"</span>&gt;</span>Price<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">"text-right"</span>&gt;</span>In Stock<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"text-left"</span>&gt;</span>Item #1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"text-right"</span>&gt;</span>$10.11<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"text-right"</span>&gt;</span>101<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"text-left"</span>&gt;</span>Item #2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"text-right"</span>&gt;</span>$8.88<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"text-right"</span>&gt;</span>34<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"text-left"</span>&gt;</span>Item #3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"text-right"</span>&gt;</span>$0.15<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"text-right"</span>&gt;</span>1670<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>
<p>If you’re using <code>responsive</code> CSS class, then add <code>data-th=&quot;Column name&quot;</code> to each <code>&lt;td&gt;</code>. Example:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"q-table responsive"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">thead</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>Price<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">th</span>&gt;</span>In Stock<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">data-th</span>=<span class="string">"Name"</span>&gt;</span>Item #1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">data-th</span>=<span class="string">"Price"</span>&gt;</span>$10.11<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">data-th</span>=<span class="string">"In Stock"</span>&gt;</span>101<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">data-th</span>=<span class="string">"Name"</span>&gt;</span>Item #2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">data-th</span>=<span class="string">"Price"</span>&gt;</span>$8.88<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">"text-right"</span>&gt;</span>34<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">data-th</span>=<span class="string">"Name"</span>&gt;</span>Item #3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">data-th</span>=<span class="string">"Price"</span>&gt;</span>$0.15<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">data-th</span>=<span class="string">"In Stock"</span>&gt;</span>1670<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Icons]]></title>
      <url>http://beta.quasar-framework.org/components/icons.html</url>
      <content type="html"><![CDATA[<p>The Quasar Icon component allows you to easily insert icons within other components or any other area of your pages, as you’d like.<br>Quasar currently supports: <a href="https://material.io/icons/" target="_blank" rel="external">Material Icons</a> out of the box, but you can add <a href="http://fontawesome.io/icons/" target="_blank" rel="external">Font Awesome</a>, <a href="http://ionicons.com/" target="_blank" rel="external">Ionicons</a> and <a href="https://icomoon.io/" target="_blank" rel="external">IcoMoon</a>. Learn how to include the last three (which are optional) by reading on.</p>
<p>Importing the required font icons is required in order to make them work. Read <a href="#Importing-Icons">Importing Icons</a> section for more details.</p>
<p>Please <a href="https://github.com/quasarframework/quasar/issues/new" target="_blank" rel="external">submit a request</a> if your favorite font icon is not listed here.</p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>Let’s take a look at how we can use QIcon component. (Do not forget to check down below how to <a href="#Importing-Icons">import the icons</a>, otherwise they won’t show up!)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Material icons have no prefix --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"thumb_up"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Ionicons have "ion-" prefix --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"ion-heart"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Fontawesome icons have "fa-" prefix --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"fa-id-card"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- IcoMoon icons have "icon-" prefix --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"icon-chrome"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line">  or if you prefer the non self-closing tag version</div><div class="line">  which allows to add a QPopover or QTooltip:</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"thumb_up"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-tooltip</span>&gt;</span>Some tooltip<span class="tag">&lt;/<span class="name">q-tooltip</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-icon</span>&gt;</span></div></pre></td></tr></table></figure>
<p>There are cases where you want to differentiate icons displayed based on the Quasar theme you are using, so you can use <code>mat</code> and <code>ios</code> props. This is practical for cross-platform application development where you use different themes for each platform.<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">mat</span>=<span class="string">"settings"</span> <span class="attr">ios</span>=<span class="string">"ion-ios-gear-outline"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<p>For “icon” properties on different Quasar components you won’t have the means to specify an icon for each platform, but you can achieve the same effect with:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-item-side</span></span></div><div class="line">  <span class="attr">:icon</span>=<span class="string">"$q.theme === 'mat' ? 'settings' : 'ion-ios-gear-outline'"</span></div><div class="line">/&gt;</div></pre></td></tr></table></figure>
<h3 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h3><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>name</code></td>
<td>String</td>
<td>The name of the icon to be used (for both Quasar themes).</td>
</tr>
<tr>
<td><code>ios</code></td>
<td>String</td>
<td>The name of the icon to be used for Quasar iOS theme only.</td>
</tr>
<tr>
<td><code>mat</code></td>
<td>String</td>
<td>The name of the icon to be used for Quasar Material theme only.</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>One color from the Quasar Color Palette.</td>
</tr>
<tr>
<td><code>size</code></td>
<td>String</td>
<td>Example: ‘12px’, ‘3.2rem’, ‘14pt’.</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>Note</strong><br>If you add the <code>name</code> prop, it overrides the <code>ios</code> and <code>mat</code> props.</p>
</blockquote>
<h3 id="Size-amp-Colors"><a href="#Size-amp-Colors" class="headerlink" title="Size &amp; Colors"></a>Size &amp; Colors</h3><p>All icons are <strong>font icons</strong>. This means that you can change size by manipulating <code>font-size</code> CSS property. And also, they inherit the current CSS <code>color</code> used.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"mail"</span> <span class="attr">style</span>=<span class="string">"font-size: 25px"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"color: #a2e2e3"</span>&gt;</span></div><div class="line">  ...</div><div class="line">  <span class="comment">&lt;!-- inheriting color #a2e2e3: --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"alarm"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Colors from the <a href="/components/color-palette.html">Quasar Color Palette</a> can be specified in two ways:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"mail"</span> <span class="attr">class</span>=<span class="string">"text-red"</span> /&gt;</span></div><div class="line"><span class="comment">&lt;!-- or by using `color` prop: --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"alarm"</span> <span class="attr">color</span>=<span class="string">"red"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"alarm"</span> <span class="attr">color</span>=<span class="string">"green-2"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<p>There’s also a “size” property:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"wifi"</span> <span class="attr">size</span>=<span class="string">"2rem"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"delete"</span> <span class="attr">size</span>=<span class="string">"24px"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="Importing-Icons"><a href="#Importing-Icons" class="headerlink" title="Importing Icons"></a>Importing Icons</h2><p>The only required icon font is “Material Icons” one. The other (Fontawesome or Ionicons) are optional. In order for you to be able to use them, you have two options: either use <a href="https://github.com/quasarframework/quasar-extras" target="_blank" rel="external">quasar-extras</a> npm package, or add the appropriate CDN (Content Delivery Network) links in <code>&lt;head&gt;</code> of your index.html.</p>
<p>If you are building a website only, then CDN approach can be an option you can follow. However, when building a mobile or Electron app, you will most likely do not want to depend on an Internet connection, so it’s best that you import directly from <code>quasar-extras</code>.</p>
<blockquote>
<p><strong>IMPORTANT</strong><br>Due to the license of IcoMoon and its custom build option, this icon font is not provided by <code>quasar-extras</code>. You will need to use <a href="https://icomoon.io/app/#/select" target="_blank" rel="external">their website</a> to create your custom icon font files and then copy them to your app’s folder and import them (<code>src/main.js</code> would probably be a good place).</p>
</blockquote>
<h3 id="Importing-from-“quasar-extras”"><a href="#Importing-from-“quasar-extras”" class="headerlink" title="Importing from “quasar-extras”"></a>Importing from “quasar-extras”</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">  File: main.js</div><div class="line">  Remember only material-icons is required,</div><div class="line">  unless you use CDN to link to it.</div><div class="line"> */</div><div class="line"><span class="keyword">import</span> <span class="string">'quasar-extras/material-icons'</span></div><div class="line"><span class="keyword">import</span> <span class="string">'quasar-extras/ionicons'</span></div><div class="line"><span class="keyword">import</span> <span class="string">'quasar-extras/fontawesome'</span></div></pre></td></tr></table></figure>
<h3 id="Including-from-CDN"><a href="#Including-from-CDN" class="headerlink" title="Including from CDN"></a>Including from CDN</h3><p>If you want to make use of CDNs (Content Delivery Network), all you need is to include style tags in your <code>index.html</code> which point to the CDN URL.</p>
<p>The example link tag below would include Font Awesome v4.7.0 icons. Do a Google search for CDNs to make sure you include the latest version. Following are just examples.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- in `index.html` --&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  ...</div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- CDN example for Material Icons --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">link</span></span></div><div class="line">    <span class="attr">rel</span>=<span class="string">"stylesheet"</span></div><div class="line">    <span class="attr">href</span>=<span class="string">"https://fonts.googleapis.com/icon?family=Material+Icons"</span></div><div class="line">  &gt;</div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- CDN example for Fontawesome --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">link</span></span></div><div class="line">    <span class="attr">rel</span>=<span class="string">"stylesheet"</span></div><div class="line">    <span class="attr">href</span>=<span class="string">"https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css"</span></div><div class="line">  &gt;</div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- CDN example for Ioniocns --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">link</span></span></div><div class="line">    <span class="attr">rel</span>=<span class="string">"stylesheet"</span></div><div class="line">    <span class="attr">href</span>=<span class="string">"http://code.ionicframework.com/ionicons/2.0.1/css/ionicons.min.css"</span></div><div class="line">  &gt;</div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="More-Examples"><a href="#More-Examples" class="headerlink" title="More Examples"></a>More Examples</h2><p>With HTML native <code>style</code> attribute:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"thumb_up"</span> <span class="attr">style</span>=<span class="string">"font-size: 5rem;"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>With HTML native <code>class</code> attribute:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"thumb_up"</span> <span class="attr">class</span>=<span class="string">"big-icon"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p><strong>Note</strong><br>To create the necessary CSS class, you would need to define the class within your component’s style section as below. Watch for CSS class clashes though.</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line">&lt;style lang=<span class="string">"stylus"</span>&gt;</div><div class="line"><span class="selector-class">.big-icon</span></div><div class="line">  <span class="attribute">font-size</span>: <span class="number">5rem</span></div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Image Gallery]]></title>
      <url>http://beta.quasar-framework.org/components/image-gallery.html</url>
      <content type="html"><![CDATA[<p>All Components below are responsive. They accommodate to the width of their container.</p>
<input type="hidden" data-fullpage-demo="media/image-gallery">

<h2 id="Responsive-Images"><a href="#Responsive-Images" class="headerlink" title="Responsive Images"></a>Responsive Images</h2><p>Just add the <code>responsive</code> CSS class to it.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"~assets/quasar.jpg"</span> <span class="attr">class</span>=<span class="string">"responsive"</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Avatar-Images"><a href="#Avatar-Images" class="headerlink" title="Avatar Images"></a>Avatar Images</h2><p>Just add the <code>avatar</code> CSS class to it.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"~assets/q-avatar.jpg"</span> <span class="attr">class</span>=<span class="string">"avatar"</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Image-Gallery"><a href="#Image-Gallery" class="headerlink" title="Image Gallery"></a>Image Gallery</h2><p>Use this Web Component when you want to display multiple images together.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-gallery</span> <span class="attr">:src</span>=<span class="string">"gallery"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- With infinite scrolling and autoplay and dots and fullscreen --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-gallery</span></span></div><div class="line">  <span class="attr">infinite</span></div><div class="line">  <span class="attr">autoplay</span></div><div class="line">  <span class="attr">dots</span></div><div class="line">  <span class="attr">fullscreen</span></div><div class="line">  <span class="attr">:src</span>=<span class="string">"gallery"</span></div><div class="line">/&gt;</div></pre></td></tr></table></figure>
<h3 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h3><table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>src</code></td>
<td>Array</td>
<td>Array of Strings represting URLs. Use images from statics folder.</td>
</tr>
<tr>
<td><code>infinite</code></td>
<td>Boolean</td>
<td>Infinite slides scrolling</td>
</tr>
<tr>
<td><code>autoplay</code></td>
<td>Boolean/Number</td>
<td>Auto scrolls between slides. Works great along <code>infinite</code> prop (but <code>infinite</code> is not required). If used as a number, it represents the number of milliseconds between scrolls.</td>
</tr>
<tr>
<td><code>arrows</code></td>
<td>Boolean</td>
<td>Show arrows</td>
</tr>
<tr>
<td><code>dots</code></td>
<td>Boolean</td>
<td>Show dots at bottom</td>
</tr>
<tr>
<td><code>fullscreen</code></td>
<td>Boolean</td>
<td>Shows Fullscreen button</td>
</tr>
<tr>
<td><code>actions</code></td>
<td>Boolean</td>
<td>Show Actions slot</td>
</tr>
</tbody>
</table>
<h2 id="Image-Gallery-Slider"><a href="#Image-Gallery-Slider" class="headerlink" title="Image Gallery Slider"></a>Image Gallery Slider</h2><p>When the real estate of the Page is an issue, use this Web Component which displays multiple images using a Slider Component. Read more about Sliders <a href="/components/slider.html">here</a>.</p>
<p>Gallery Slider has two control buttons available: one which when clicked displays a list of thumbnails of all images in the gallery, and the other which can bring the slider to fullscreen.</p>
<p>User can switch between images using the arrow buttons or through swipe actions. When on desktop, user can also drag on images to left or right.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Template for VueModel below --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-gallery-slider</span> <span class="attr">:src</span>=<span class="string">"gallery"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Vue-Properties-1"><a href="#Vue-Properties-1" class="headerlink" title="Vue Properties"></a>Vue Properties</h3><table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>src</code></td>
<td>Array</td>
<td>Strings represting URLs. Use images from statics folder.</td>
</tr>
</tbody>
</table>
<h3 id="Vue-Methods"><a href="#Vue-Methods" class="headerlink" title="Vue Methods"></a>Vue Methods</h3><table>
<thead>
<tr>
<th>Property</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>toggleQuickView()</code></td>
<td>Toggle thumbnails view.</td>
</tr>
<tr>
<td><code>goToSlide(Number index, Boolean animation)</code></td>
<td>Go to a certain slide number (with animation or not).</td>
</tr>
</tbody>
</table>
<h3 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h3><table>
<thead>
<tr>
<th>Property</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@slide(slideNumber)</code></td>
<td>Triggered when slide number changes.</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Overview]]></title>
      <url>http://beta.quasar-framework.org/components/index.html</url>
      <content type="html"><![CDATA[<p>Quasar Apps are made of high-level building blocks called components. Components allow you to quickly construct an interface for your App. Quasar comes with a number of components, including modals, action sheets, collapsibles, cards, dialogs, FAB, lists and many more.</p>
<p>Quasar Components are written as Web Components, so they embed HTML, CSS and Javascript code that you can use by just including an HTML tag in your Page and Layout templates.</p>
<blockquote>
<p><strong>IMPORTANT</strong><br>For Vue &amp; Quasar developers (beginners or not), read <a href="/components/introduction-for-beginners.html">Introduction for Beginners</a> first. It’s mandatory in order to understand how you can use Vue properties, methods and so on.</p>
</blockquote>
<p>Check out the examples (text and live demos for each platform) to see what each component looks like and to learn how to use each one.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Infinite Scroll]]></title>
      <url>http://beta.quasar-framework.org/components/infinite-scroll.html</url>
      <content type="html"><![CDATA[<p>When you want to progressively load new content as the user scrolls down your Page, use QInfiniteScroll component.</p>
<input type="hidden" data-fullpage-demo="scrolling/infinite-scroll">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-infinite-scroll</span> <span class="attr">:handler</span>=<span class="string">"loadMore"</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- Content, in this case some &lt;p&gt; tags --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span> <span class="attr">class</span>=<span class="string">"caption"</span>&gt;</span></div><div class="line">    Lorem ipsum dolor sit amet...</div><div class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!--</span></div><div class="line">    slot="message" for DOM element to display (in this example</div><div class="line">    a dots spinner) when loading additional content</div><div class="line">  --&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">q-spinner-dots</span> <span class="attr">slot</span>=<span class="string">"message"</span> <span class="attr">:size</span>=<span class="string">"40"</span>&gt;</span><span class="tag">&lt;/<span class="name">q-spinner-dots</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-infinite-scroll</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p><strong>IMPORTANT</strong><br>Infinite Scroll loads items in advance when less than one screen height is left to be seen. If the content you fetch has height less than the container’s height on screen then Infinite Scroll will continue loading more content. So make sure you load enough content.</p>
<p><strong>IMPORTANT</strong><br>This works best when placed as direct child of the Vue component rendering your Page. If you place it under an overflowed DOM element or component, don’t forget to set the <code>inline</code> prop.</p>
</blockquote>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Required</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>handler</code></td>
<td><em>Yes</em></td>
<td>Function</td>
<td>Method from VM to be called to load more content</td>
</tr>
<tr>
<td><code>inline</code></td>
<td></td>
<td><em>Empty</em></td>
<td>Use it when you place your infinite scroll within an overflowed DOM element</td>
</tr>
<tr>
<td><code>offset</code></td>
<td></td>
<td>Number</td>
<td>Offset (pixels) to bottom of Infinite Scroll container from which the component should start loading more content in advance. Default it’s one container height.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Methods"><a href="#Vue-Methods" class="headerlink" title="Vue Methods"></a>Vue Methods</h2><table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>loadMore()</code></td>
<td>Tells Infinite Scroll to load more content, regardless of the scroll position.</td>
</tr>
<tr>
<td><code>reset()</code></td>
<td>Resets calling index to 0.</td>
</tr>
<tr>
<td><code>stop()</code></td>
<td>Stops working, regardless of scroll position.</td>
</tr>
<tr>
<td><code>resume()</code></td>
<td>Starts working. Checks scroll position upon call and if trigger is hit, it loads more content.</td>
</tr>
<tr>
<td><code>poll()</code></td>
<td>Checks scroll position and loads more content if necessary.</td>
</tr>
</tbody>
</table>
<h2 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h2><p>The handler Function takes two parameters:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">loadMore: <span class="function"><span class="keyword">function</span>(<span class="params">index, done</span>) </span>&#123;</div><div class="line">  <span class="comment">// index - called for nth time</span></div><div class="line">  <span class="comment">// done - Function to call when you made all necessary updates.</span></div><div class="line">  <span class="comment">//        DO NOT forget to call it otherwise your loading message</span></div><div class="line">  <span class="comment">//        will continue to be displayed</span></div><div class="line"></div><div class="line">  <span class="comment">// make some Ajax call then call done()</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>The <code>index</code> parameter can be used to make some sort of pagination on the content you load. It takes numeric values starting with 1 and incrementing with each call.</p>
<h2 id="Inline-Usage"><a href="#Inline-Usage" class="headerlink" title="Inline Usage"></a>Inline Usage</h2><p>Use it when you place your infinite scroll within an overflowed DOM element.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-infinite-scroll</span></span></div><div class="line">  <span class="attr">:handler</span>=<span class="string">"loadMore"</span></div><div class="line">  <span class="attr">inline</span></div><div class="line">  <span class="attr">style</span>=<span class="string">"height: 400px; overflow: auto;"</span></div><div class="line">&gt;</div><div class="line">  ...</div><div class="line"><span class="tag">&lt;/<span class="name">q-infinite-scroll</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Controlling-Infinite-Scroll"><a href="#Controlling-Infinite-Scroll" class="headerlink" title="Controlling Infinite Scroll"></a>Controlling Infinite Scroll</h2><p>If for some reason you need to control the working state of Infinite Scroll component, use a Vue reference and call methods from above.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-infinite-scroll</span></span></div><div class="line">  <span class="attr">:handler</span>=<span class="string">"loadMore"</span></div><div class="line">  <span class="attr">ref</span>=<span class="string">"infiniteScroll"</span></div><div class="line">&gt;</div><div class="line">  ...</div><div class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"$refs.infiniteScroll.stop()"</span>&gt;</span></div><div class="line">    Stop Loading More</div><div class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  ...</div><div class="line"><span class="tag">&lt;/<span class="name">q-infinite-scroll</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Inline Datetime]]></title>
      <url>http://beta.quasar-framework.org/components/inline-datetime.html</url>
      <content type="html"><![CDATA[<p>The Inline Datetime component provides a method to input dates and time or both and is shown directly on the page or element you are dislpaying. There are also two more versions available: <a href="/components/datetime.html">Datetime</a>, which also uses a modal/popup, as well as a <a href="/components/datetime-range.html">Datetime Range</a>.</p>
<input type="hidden" data-fullpage-demo="forms/datetime/inline-datetime">

<p>You’ll notice in the demos that the iOS and Material Datetime pickers look and act totally different, just like their native counterparts.</p>
<p>Works well with <a href="/components/field.html">QField</a> for additional functionality such as a helper, error message placeholder and many others.</p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-inline-datetime</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">type</span>=<span class="string">"date"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Only Time --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-inline-datetime</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">type</span>=<span class="string">"time"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Date &amp; Time --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-inline-datetime</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">type</span>=<span class="string">"datetime"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Date - Monday as first day of week --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-inline-datetime</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">monday-first</span> <span class="attr">type</span>=<span class="string">"date"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Disabled State --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-inline-datetime</span> <span class="attr">disable</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">type</span>=<span class="string">"datetime"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Readonly State --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-inline-datetime</span> <span class="attr">readonly</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">type</span>=<span class="string">"datetime"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Min &amp; Max --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-inline-datetime</span> <span class="attr">type</span>=<span class="string">"datetime"</span> <span class="attr">v-model</span>=<span class="string">"minMaxModel"</span> <span class="attr">:min</span>=<span class="string">"min"</span> <span class="attr">:max</span>=<span class="string">"max"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Specific color --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-inline-datetime</span> <span class="attr">color</span>=<span class="string">"secondary"</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">type</span>=<span class="string">"datetime"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Time 24hr Format --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-inline-datetime</span> <span class="attr">v-model</span>=<span class="string">"model"</span> <span class="attr">type</span>=<span class="string">"time"</span> <span class="attr">format24h</span> /&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><p>Supports <code>v-model</code> which must be a String, Number or Date Object. Please refer to the <a href="/components/datetime.html">Datetime component</a> for detailed information regarding the model that must be used.</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>type</code></td>
<td>String</td>
<td>One of <code>date</code>, <code>time</code> or <code>datetime</code>. Default is <code>date</code>.</td>
</tr>
<tr>
<td><code>min</code></td>
<td>String</td>
<td>Optional minimum value it can take. Has same format as Datetime model.</td>
</tr>
<tr>
<td><code>max</code></td>
<td>String</td>
<td>Optional maximum value it can take. Has same format as Datetime model.</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>One from <a href="/components/color-palette.html">Color Palette</a>.</td>
</tr>
<tr>
<td><code>month-names</code></td>
<td>Array</td>
<td>Array of month names, starting with January.</td>
</tr>
<tr>
<td><code>day-names</code></td>
<td>Array</td>
<td>Array of day names, starting with Sunday, Monday, …</td>
</tr>
<tr>
<td><code>default-selection</code></td>
<td>String/Number/Date</td>
<td>Default date/time for picker when model is not yet set.</td>
</tr>
<tr>
<td><code>monday-first</code></td>
<td>Boolean</td>
<td>Use Monday as first day of week. Otherwise it’s Sunday.</td>
</tr>
<tr>
<td><code>saturday-first</code></td>
<td>Boolean</td>
<td>Use Saturday as first day of week. Otherwise it’s Sunday.</td>
</tr>
<tr>
<td><code>format24h</code></td>
<td>Boolean</td>
<td>Use 24 hour time for Material picker instead of AM/PM system which is default.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, the field is inaccessable.</td>
</tr>
<tr>
<td><code>readonly</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, the component is readonly.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Methods"><a href="#Vue-Methods" class="headerlink" title="Vue Methods"></a>Vue Methods</h2><table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>clear()</code></td>
<td>Sets model to empty string (removes current value).</td>
</tr>
<tr>
<td><code>toggleAmPm()</code></td>
<td>Toggle between AM - PM.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Vue Event</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@change(newValue)</code></td>
<td>Triggered on model value change.</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Inner Loading]]></title>
      <url>http://beta.quasar-framework.org/components/inner-loading.html</url>
      <content type="html"><![CDATA[<p>The QInnerLoading component allows you to add a progress animation within a component. Much like the <a href="loading.html">Loading feature</a>, it’s purpose is to offer visual confirmation to the user that some process is happening in the background, which takes an excessive amount of time. QInnerLoading will add an opaque overlay over the delayed element along with a <a href="/components/spinner.html">Spinner</a>.</p>
<input type="hidden" data-fullpage-demo="progress/inner-loading">

<blockquote>
<p><strong>Note</strong><br>In order for the spinner to be properly placed in the center of the element you want the loading display to show over, that element must have the <code>relative-position</code> CSS class declared.</p>
</blockquote>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layout-padding relative-position"</span></span></div><div class="line">  <span class="attr">style</span>=<span class="string">"height: 450px; width: 600px; background-color: lightgrey; padding: 15px;"</span>&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">"showSimulatedReturnData"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Lorem Ipsum<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">        Lorem ipsum dolor sit amet, consectetur adipiscing elit.</div><div class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-transition</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-inner-loading</span> <span class="attr">:visible</span>=<span class="string">"visible"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>View the source of the demo for the full example.</p>
<p>Use <code>v-show</code> or <code>v-if</code> and the Inner Loading component’s <code>:visible</code> prop to toggle between the animation and your content.</p>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>dark</code></td>
<td>Boolean</td>
<td>Darkens the color of the opaque overlay for darker designs</td>
</tr>
<tr>
<td><code>visible</code></td>
<td>Boolean</td>
<td>The loading effect becomes visible when true</td>
</tr>
<tr>
<td><code>size</code></td>
<td>Number, String</td>
<td>Changes the default size of the default spinner. The default is 42 pixels.</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>Specify color of the default spinner.</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>Note</strong><br>If you add your own spinner, use the spinner’s own <code>size</code> and <code>color</code> prop to change the size and color.</p>
</blockquote>
<p>To change the spinner, you can add your own as a child of QInnerLoading component. The below code would add a <code>teal</code>-variation gear spinner with the size of 50 pixels.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-inner-loading</span> <span class="attr">:visible</span>=<span class="string">"visible"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-spinner-gears</span> <span class="attr">size</span>=<span class="string">"50px"</span> <span class="attr">color</span>=<span class="string">"teal-4"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-inner-loading</span>&gt;</span></div></pre></td></tr></table></figure>
<p>In most cases, you’ll probably want to add your own spinner, color and size. For more information on spinner control, please refer to the <a href="/components/spinner.html">Spinner section</a> of the docs.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Input (Textfield)]]></title>
      <url>http://beta.quasar-framework.org/components/input.html</url>
      <content type="html"><![CDATA[<p>Quasar’s Input component is the basis for text (we’ll call it “Singe Line Input”) and textarea (we’ll call it “Multiple Line Input”) form input. It can be used for regular text input, passwords, email addresses, numbers, telephone numbers, urls and auto-growing text areas.</p>
<input type="hidden" data-fullpage-demo="forms/input">

<p>Works well with <a href="/components/field.html">QField</a> for additional functionality such as a helper, error message placeholder and many others.</p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Single Line Input --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-input</span> <span class="attr">v-model</span>=<span class="string">"text"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-input</span> <span class="attr">v-model</span>=<span class="string">"text"</span> <span class="attr">stack-label</span>=<span class="string">"Stack Label"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-input</span> <span class="attr">v-model</span>=<span class="string">"text"</span> <span class="attr">float-label</span>=<span class="string">"Float Label"</span> <span class="attr">placeholder</span>=<span class="string">"Gigi"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Multiple Line Input --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-input</span></span></div><div class="line">  <span class="attr">v-model</span>=<span class="string">"area"</span></div><div class="line">  <span class="attr">type</span>=<span class="string">"textarea"</span></div><div class="line">  <span class="attr">float-label</span>=<span class="string">"Textarea"</span></div><div class="line">  <span class="attr">:max-height</span>=<span class="string">"100"</span></div><div class="line">  <span class="attr">:min-rows</span>=<span class="string">"7"</span></div><div class="line">/&gt;</div></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><p>Supports <code>v-model</code> which should be bound to a String or Number (depending on <code>type</code> property used) in your scope.</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>type</code></td>
<td>String</td>
<td>Must be one of the following: <code>text</code> (default), <code>textarea</code>, <code>email</code>, <code>tel</code>, <code>file</code>, <code>number</code>, <code>password</code> and <code>url</code>. This is important as it determines the keyboard type popping up on mobile devices.</td>
</tr>
<tr>
<td><code>clearable</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, the component offers the user an actionable icon to remove the entered text.</td>
</tr>
<tr>
<td><code>no-pass-toggle</code></td>
<td>Boolean</td>
<td>If type is ‘password’ and set to <code>true</code>, then password toggle is not shown.</td>
</tr>
</tbody>
</table>
<p>When you set type to “number”, there are some additional properties that you can use:</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>min</code></td>
<td>Number</td>
<td>Minimum number. It’s only enforced when user hits UP or DOWN keys. Don’t use only this property for validation.</td>
</tr>
<tr>
<td><code>max</code></td>
<td>Number</td>
<td>Maximum number. It’s only enforced when user hits UP or DOWN keys. Don’t use only this property for validation.</td>
</tr>
<tr>
<td><code>step</code></td>
<td>Number</td>
<td>Default is <code>1</code>. If Up or Down keys are used, this tells the increment amount.</td>
</tr>
<tr>
<td><code>max-decimals</code></td>
<td>Number</td>
<td>Maximum number of decimals that should be displayed.</td>
</tr>
</tbody>
</table>
<p>When you set type to “textarea”, these are additional properties that you can use:</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>min-rows</code></td>
<td>Number</td>
<td>Minimum number of rows to display regardless of how many rows the content spans to.</td>
</tr>
<tr>
<td><code>max-height</code></td>
<td>Number</td>
<td>Number in pixels that determines the maximum height of textarea which auto-grows.</td>
</tr>
</tbody>
</table>
<p>Common input field properties:</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>autofocus</code></td>
<td>Boolean</td>
<td>Focus input field after rendering component.</td>
</tr>
<tr>
<td><code>placeholder</code></td>
<td>String</td>
<td>A text to be shown on textfield, mainly to explain what should be entered.</td>
</tr>
<tr>
<td><code>name</code></td>
<td>String</td>
<td>Adds a “name” attribute to the input field.</td>
</tr>
<tr>
<td><code>max-length</code></td>
<td>Number/String</td>
<td>Maximum number of characters allowed on textual input field. This property only affects inputs with type <code>text</code>, <code>textarea</code>, <code>email</code>, <code>tel</code>, <code>password</code> and <code>url</code></td>
</tr>
<tr>
<td><code>loading</code></td>
<td>Boolean</td>
<td>Place the default spinner of the theme after textfield to highlight some process takes place in the background.</td>
</tr>
</tbody>
</table>
<p>Common input frame properties:</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>prefix</code></td>
<td>String</td>
<td>A text that should be shown before the textfield.</td>
</tr>
<tr>
<td><code>suffix</code></td>
<td>String</td>
<td>A text that should be shown after the textfield.</td>
</tr>
<tr>
<td><code>float-label</code></td>
<td>String</td>
<td>A text label that will “float” up above the input field, once the input field gets focus.</td>
</tr>
<tr>
<td><code>stack-label</code></td>
<td>String</td>
<td>A text label that will be shown above the input field and is static.</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>One from <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>inverted</code></td>
<td>Boolean</td>
<td>Inverted mode. Color is applied to background instead.</td>
</tr>
<tr>
<td><code>dark</code></td>
<td>Boolean</td>
<td>Is QInput rendered on a dark background?</td>
</tr>
<tr>
<td><code>align</code></td>
<td>String</td>
<td>One of ‘left’, ‘center’ or ‘right’ which determines the text align within textfield.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, textfield is disabled and the user cannot type anything.</td>
</tr>
<tr>
<td><code>error</code></td>
<td>Boolean</td>
<td>If set to true, the input fields colors are changed to show there is an error.</td>
</tr>
<tr>
<td><code>before</code></td>
<td>Array of Objects</td>
<td>Icon buttons on left side of textfield. Read below more details.</td>
</tr>
<tr>
<td><code>after</code></td>
<td>Array of Objects</td>
<td>Icon buttons on right side of textfield. Read below more details.</td>
</tr>
</tbody>
</table>
<h3 id="Icon-buttons"><a href="#Icon-buttons" class="headerlink" title="Icon buttons"></a>Icon buttons</h3><p>This section refers to <code>before</code> and <code>after</code> properties which can add additional buttons as icons to the textfield. Here is the structure of the two properties:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="comment">// required icon</span></div><div class="line">  icon: <span class="built_in">String</span>,</div><div class="line">  <span class="comment">// required function to call when</span></div><div class="line">  <span class="comment">// icon is clicked/tapped</span></div><div class="line">  handler: <span class="built_in">Function</span>,</div><div class="line"></div><div class="line">  <span class="comment">// Optional. Show icon button</span></div><div class="line">  <span class="comment">// if model has a value</span></div><div class="line">  content: <span class="built_in">Boolean</span>,</div><div class="line"></div><div class="line">  <span class="comment">// Optional. Show icon button</span></div><div class="line">  <span class="comment">// if textfield is marked with error</span></div><div class="line">  error: <span class="built_in">Boolean</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Examples:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!--</span></div><div class="line">  Show an icon button (with 'warning' as icon)</div><div class="line">  when there is an error on QInput (through "error" prop)</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">q-input</span></span></div><div class="line">  <span class="attr">v-model</span>=<span class="string">"text"</span></div><div class="line">  <span class="attr">:error</span>=<span class="string">"error"</span></div><div class="line">  <span class="attr">type</span>=<span class="string">"password"</span></div><div class="line">  <span class="attr">:after</span>=<span class="string">"[</span></div><div class="line">    &#123;</div><div class="line">      icon: 'warning',</div><div class="line">      error: true,</div><div class="line">      handler () &#123;</div><div class="line">        // do something...</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]"</div><div class="line">/&gt;</div><div class="line"></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line">  Show an icon button (with 'arrow_forward' as icon)</div><div class="line">  when the model has a non empty value</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">q-input</span></span></div><div class="line">  <span class="attr">v-model</span>=<span class="string">"text"</span></div><div class="line">  <span class="attr">:after</span>=<span class="string">"[</span></div><div class="line">    &#123;</div><div class="line">      icon: 'arrow_forward',</div><div class="line">      content: true,</div><div class="line">      handler () &#123;</div><div class="line">        // do something...</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]"</div><div class="line">/&gt;</div></pre></td></tr></table></figure></p>
<h3 id="Labeling"><a href="#Labeling" class="headerlink" title="Labeling"></a>Labeling</h3><p>QInput comes with two built-in labeling possibilities. You can use the <code>float-label</code> or the <code>stack-label</code> properties to add text for the labeling of the field. A <code>stack-label</code> is static in its position above the field, whereas the <code>fload-label</code> is more dynamic. Check the examples to the right to see the difference.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-input</span> <span class="attr">v-model</span>=<span class="string">"text"</span> <span class="attr">stack-label</span>=<span class="string">"Stack Label"</span> <span class="attr">placeholder</span>=<span class="string">"Add some text..."</span>  /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-input</span> <span class="attr">v-model</span>=<span class="string">"text"</span> <span class="attr">float-label</span>=<span class="string">"Float Label"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>As shown above, you can also add a placeholder to help explain to the user what type of input should be entered.</p>
<h3 id="Password-Input"><a href="#Password-Input" class="headerlink" title="Password Input"></a>Password Input</h3><p>If you use the input type <code>password</code>, the component will hide the characters entered by the user, but it will also offer the user a clickable icon to toggle the input, to make the input legible.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-input</span> <span class="attr">v-model</span>=<span class="string">"text"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">float-label</span>=<span class="string">"Password"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Number-Input"><a href="#Number-Input" class="headerlink" title="Number Input"></a>Number Input</h3><p>The below example shows a number input type.<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-input</span> <span class="attr">v-model</span>=<span class="string">"number"</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">float-label</span>=<span class="string">"Number"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="Prefixes-and-Suffixes"><a href="#Prefixes-and-Suffixes" class="headerlink" title="Prefixes and Suffixes"></a>Prefixes and Suffixes</h3><p>You can add a text before or after the field as part of an input mask, for instance, for showing Euro or US Dollar currency.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Notice prefix property --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-input</span> <span class="attr">v-model</span>=<span class="string">"number"</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">prefix</span>=<span class="string">"$US"</span> <span class="attr">stack-label</span>=<span class="string">"Number"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Notice suffix property --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-input</span> <span class="attr">v-model</span>=<span class="string">"number"</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">suffix</span>=<span class="string">"€"</span> <span class="attr">stack-label</span>=<span class="string">"Number"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Notice suffix property --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-input</span> <span class="attr">v-model</span>=<span class="string">"email"</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">suffix</span>=<span class="string">"@gmail.com"</span> <span class="attr">stack-label</span>=<span class="string">"Type Google Email"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Error-State"><a href="#Error-State" class="headerlink" title="Error State"></a>Error State</h3><p>You can control the color to show a mistake in user input or some other systematic error. To do this set the <code>error</code> prop to true.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-input</span> <span class="attr">:error</span>=<span class="string">"error"</span> <span class="attr">v-model</span>=<span class="string">"text"</span> <span class="attr">float-label</span>=<span class="string">"Colored Black"</span> <span class="attr">color</span>=<span class="string">"black"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>If you’d like to show the user an explanatory text about the error condition, you can wrap the QInput in a QField component.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!--</span></div><div class="line">  Notice error prop is now used on wrapper QField</div><div class="line">  instead of on QInput now</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">q-field</span> <span class="attr">:error</span>=<span class="string">"error"</span> <span class="attr">error-label</span>=<span class="string">"Oh buggers! You made a boo boo."</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-input</span> <span class="attr">v-model</span>=<span class="string">"text"</span> <span class="attr">float-label</span>=<span class="string">"Colored with Error"</span> <span class="attr">color</span>=<span class="string">"amber"</span>  /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-field</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Please refer to the <a href="/components/field.html">QField documentation</a> for more info about its usage.</p>
<h3 id="Loading-State"><a href="#Loading-State" class="headerlink" title="Loading State"></a>Loading State</h3><p>If, for some reason, the input requires some longer term background action or process, you can add a spinner to indicate progress by setting the <code>loading</code> prop to <code>true</code>.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-input</span> <span class="attr">:loading</span>=<span class="string">"loading"</span> <span class="attr">v-model</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"Add some text..."</span> /&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Vue-Methods"><a href="#Vue-Methods" class="headerlink" title="Vue Methods"></a>Vue Methods</h2><table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>clear()</code></td>
<td>Clear the model. Sets it to empty String <code>&#39;&#39;</code>.</td>
</tr>
<tr>
<td><code>togglePass()</code></td>
<td>Applies to type “password” only. Toggles between showing legible password or not.</td>
</tr>
<tr>
<td><code>focus()</code></td>
<td>Focused the textfield.</td>
</tr>
<tr>
<td><code>blur()</code></td>
<td>Makes textfield lose focus.</td>
</tr>
<tr>
<td><code>select()</code></td>
<td>Selects all textfield text and focuses.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Vue Event</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@change(newVal)</code></td>
<td>Triggered on model value change.</td>
</tr>
<tr>
<td><code>@focus</code></td>
<td>Triggered on focus.</td>
</tr>
<tr>
<td><code>@blur</code></td>
<td>Triggered a blur.</td>
</tr>
<tr>
<td><code>@keydown</code></td>
<td>Triggered by keydown event on textfield.</td>
</tr>
<tr>
<td><code>@keyup</code></td>
<td>Triggered by keyup event on textfield.</td>
</tr>
<tr>
<td><code>@click</code></td>
<td>Triggered by a native <code>click</code> event on textfield.</td>
</tr>
</tbody>
</table>
<h2 id="Formatting"><a href="#Formatting" class="headerlink" title="Formatting"></a>Formatting</h2><p>It is possible to add formatting to a QInput in two ways. One is for the basic component. The other is with the QField component. Both methods offer “inverted” coloring.</p>
<h3 id="Additional-Vue-Properties"><a href="#Additional-Vue-Properties" class="headerlink" title="Additional Vue Properties"></a>Additional Vue Properties</h3><table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>The color the QInput should have. The default is <code>primary</code>.</td>
</tr>
<tr>
<td><code>inverted</code></td>
<td>Boolean</td>
<td>Set to <code>true</code>, to color field’s background set by the <code>color</code> prop.</td>
</tr>
<tr>
<td><code>dark</code></td>
<td>Boolean</td>
<td>Set to true, if the field is on a dark background. It will invert the text color to make it light.</td>
</tr>
<tr>
<td><code>align</code></td>
<td>Text</td>
<td>Controls the ‘right’, ‘center’ or ‘left’ alignment of the input. The default is ‘left’.</td>
</tr>
</tbody>
</table>
<h3 id="Basic-Formatting-Examples"><a href="#Basic-Formatting-Examples" class="headerlink" title="Basic Formatting Examples"></a>Basic Formatting Examples</h3><p>This will color the field black.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-input</span> <span class="attr">v-model</span>=<span class="string">"text"</span> <span class="attr">float-label</span>=<span class="string">"Colored"</span> <span class="attr">color</span>=<span class="string">"black"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>This will show an inverted colored input field in amber. Here, the text is automatically inverted to a lighter color.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-input</span> <span class="attr">v-model</span>=<span class="string">"text"</span> <span class="attr">inverted</span> <span class="attr">color</span>=<span class="string">"amber"</span> <span class="attr">stack-label</span>=<span class="string">"Amber Colored Background"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Alignment"><a href="#Alignment" class="headerlink" title="Alignment"></a>Alignment</h3><p>You can also align the input to the right, center or left. The default is left. The below example will show a field for Euro currency input.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Align textfield content to the right --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-input</span> <span class="attr">v-model</span>=<span class="string">"number"</span> <span class="attr">align</span>=<span class="string">"right"</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">suffix</span>=<span class="string">"€"</span> <span class="attr">stack-label</span>=<span class="string">"Number"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Basic-Usage-with-QField"><a href="#Basic-Usage-with-QField" class="headerlink" title="Basic Usage with QField"></a>Basic Usage with QField</h3><p>It is also possible to further enhance a QInput by wrapping it in a <a href="/components/field.html">QField</a> component.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg-grey-9"</span> <span class="attr">style</span>=<span class="string">"width: 500px; padding: 25px"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-field</span></span></div><div class="line">    <span class="attr">icon</span>=<span class="string">"wifi"</span></div><div class="line">    <span class="attr">label</span>=<span class="string">"Some Label"</span></div><div class="line">    <span class="attr">:count</span>=<span class="string">"10"</span></div><div class="line">    <span class="attr">helper</span>=<span class="string">"Some helper"</span></div><div class="line">    <span class="attr">:error</span>=<span class="string">"error"</span></div><div class="line">    <span class="attr">error-label</span>=<span class="string">"Some error"</span></div><div class="line">  &gt;</div><div class="line">    <span class="tag">&lt;<span class="name">q-input</span></span></div><div class="line">      <span class="attr">v-model</span>=<span class="string">"text"</span></div><div class="line">      <span class="attr">dark</span></div><div class="line">      <span class="attr">color</span>=<span class="string">"yellow"</span></div><div class="line">      <span class="attr">float-label</span>=<span class="string">"Textfield"</span></div><div class="line">    /&gt;</div><div class="line">  <span class="tag">&lt;/<span class="name">q-field</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>The above usage of QField will show the input field within a dark grey background with an inverse white text. Notice the usage of the <code>dark</code> prop for QInput. This controls the inversion of the text color.</p>
<p>Please refer to the <a href="/components/field.html">QField documentation</a> for more info about its usage.</p>
<h2 id="Validations-with-Vuelidate"><a href="#Validations-with-Vuelidate" class="headerlink" title="Validations with Vuelidate"></a>Validations with Vuelidate</h2><p>Quasar’s recommendation for doing form components validations is  <a href="https://monterail.github.io/vuelidate/" target="_blank" rel="external">Vuelidate</a> as it fits great with the overall architecture. It’s simple, lightweight and <strong>model-based</strong>.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-input</span></span></div><div class="line">    <span class="attr">type</span>=<span class="string">"email"</span></div><div class="line">    <span class="attr">:error</span>=<span class="string">"$v.email.$error"</span></div><div class="line">    <span class="attr">v-model</span>=<span class="string">"email"</span></div><div class="line">    @<span class="attr">blur</span>=<span class="string">"$v.email.$touch"</span></div><div class="line">  /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">import</span> &#123; required, email &#125; <span class="keyword">from</span> <span class="string">'vuelidate/lib/validators'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  data () &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      email: <span class="string">''</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  validations: &#123;</div><div class="line">    email: &#123; required, email &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>For more options like displaying an error label, a helper or character counter, wrap QInput with a QField. <a href="/components/field.html#Validations-with-Vuelidate">Here</a> is a more involved example.</p>
<h2 id="Directive-Modifiers-for-v-model"><a href="#Directive-Modifiers-for-v-model" class="headerlink" title="Directive Modifiers for v-model"></a>Directive Modifiers for <code>v-model</code></h2><p>Vue comes with standard modifiers on <code>v-model</code>, which can be useful in conjunction with QInput. They are <code>.lazy</code> and <code>.trim</code>.</p>
<h3 id="lazy"><a href="#lazy" class="headerlink" title=".lazy"></a><code>.lazy</code></h3><p>By default, <code>v-model</code> syncs the input with the data after each <code>input</code> event. You can add the <code>lazy</code> modifier to instead sync after <code>change</code> events:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- synced after "change" instead of "input" --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-input</span> <span class="attr">v-model.lazy</span>=<span class="string">"msg"</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="trim"><a href="#trim" class="headerlink" title=".trim"></a><code>.trim</code></h3><p>If you want the user’s input to be trimmed automatically, you can add the <code>trim</code> modifier to your <code>v-model</code> managed inputs:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-input</span> <span class="attr">v-model.trim</span>=<span class="string">"msg"</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Integrating Layout with Router]]></title>
      <url>http://beta.quasar-framework.org/components/integrating-layout-with-router.html</url>
      <content type="html"><![CDATA[<p>You can benefit from Vue Router’s capabilities while structuring your routes with a Quasar Layout. The information below is just a recommendation and not a mandatory folder/files structure to follow. Quasar allows you full freedom. Take the lines below only as an example.</p>
<p><a href="/components/layout.html">Layout</a> is the component used to encapsulate pages, so that multiple pages will share the same header, left / right side and so on. In order to understand how this works, you need a little bit of reading on <a href="http://router.vuejs.org/en/essentials/nested-routes.html" target="_blank" rel="external">Vue Router nested routes</a>.</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>To make it more clear, let’s take an example. We have one layout (‘user-layout’) and two pages (‘user-feed’ and ‘user-profile’). We want to configure the website/app routes like this: <code>/user/feed</code> and <code>/user/profile</code>.</p>
<p>Our router configuration (usually in <code>/src/router.js</code>) will look like this:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></div><div class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></div><div class="line"></div><div class="line">Vue.use(VueRouter)</div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line">  Avoid lazy loading while in dev mode</div><div class="line">  to benefit from HMR</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">load</span> (<span class="params">component</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> () =&gt; System.import(<span class="string">`components/<span class="subst">$&#123;component&#125;</span>.vue`</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> routes = [</div><div class="line">  &#123;</div><div class="line">    path: <span class="string">'/user'</span>,</div><div class="line"></div><div class="line">    <span class="comment">// We point it to our component</span></div><div class="line">    <span class="comment">// where we defined our QLayout</span></div><div class="line">    component: load(<span class="string">'user/layout'</span>),</div><div class="line"></div><div class="line">    <span class="comment">// Now we define the sub-routes.</span></div><div class="line">    <span class="comment">// These are getting injected into</span></div><div class="line">    <span class="comment">// layout (from above) automatically</span></div><div class="line">    <span class="comment">// by using &lt;router-view&gt; placeholder</span></div><div class="line">    <span class="comment">// (need to specify it in layout)</span></div><div class="line">    children: [</div><div class="line">      &#123;</div><div class="line">        path: <span class="string">'feed'</span>,</div><div class="line">        component: load(<span class="string">'user/feed'</span>)</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        path: <span class="string">'profile'</span>,</div><div class="line">        component: load(<span class="string">'user/profile'</span>)</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">]</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRoute(&#123;</div><div class="line">  ...,</div><div class="line">  routes <span class="comment">// our routes</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>The above routes look for a folder called ‘user’ in ‘/src/components’. Feel free to tweak <code>load()</code> function to your liking. The file structure needed for vue components of your app for the configuration above is:<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">src/</div><div class="line">└── components/</div><div class="line">    └── user</div><div class="line">        ├── layout.vue   <span class="comment"># our vue component where we use QLayout</span></div><div class="line">        ├── feed.vue     <span class="comment"># our user feed page</span></div><div class="line">        └── profile.vue  <span class="comment"># our user profile page</span></div></pre></td></tr></table></figure></p>
<p>Pages get injected into QLayout where <code>&lt;router-view&gt;</code> component is specified, replacing it. Remember to always use this Vue component whenever your Layout has pages attached to it.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-layout</span>&gt;</span></div><div class="line">  ...</div><div class="line">  <span class="comment">&lt;!--</span></div><div class="line">    This is where your pages will get</div><div class="line">    injected into your Layout</div><div class="line">  --&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></div><div class="line">  ...</div><div class="line"><span class="tag">&lt;/<span class="name">q-layout</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>Read all <a href="http://router.vuejs.org/" target="_blank" rel="external">Vue Router</a> documentation to fully understand the example above and how to configure the router and its routes for your app.</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Introduction for Beginners]]></title>
      <url>http://beta.quasar-framework.org/components/introduction-for-beginners.html</url>
      <content type="html"><![CDATA[<p>Before you begin with Quasar, it is a good idea to get acquainted with ES6 and have a fairly good knowledge about how Vue works. (<a href="https://github.com/lukehoban/es6features" target="_blank" rel="external">quick overview of ES6</a> and <a href="http://es6-features.org/#Constants" target="_blank" rel="external">full description</a> – don’t worry, you don’t need to understand ALL of ES6). For devs experienced with reactive UIs, <a href="https://vuejs.org/v2/guide/" target="_blank" rel="external">the Vue documentation</a> itself takes half a day at most to read top-to-bottom and will help you understand how Quasar components can be used and configured.</p>
<p>If you are a total beginner to Vue and reactive UI libraries and want a good tutorial, we recommend you take a look at the <a href="https://www.udemy.com/vuejs-2-the-complete-guide/learn/v4/overview" target="_blank" rel="external">Udemy Course - Vue JS 2 - The Complete Guide</a>.</p>
<p>After reading the Vue documentation, let’s clear up some of the most frequently asked questions, like “How can I use Quasar components, Vue properties, methods and events”.</p>
<h2 id="Single-File-Vue-Components"><a href="#Single-File-Vue-Components" class="headerlink" title="Single File Vue Components"></a>Single File Vue Components</h2><p>You’ll be building your Quasar app using <code>*.vue</code> files which contain multiple sections: ‘template’ (HTML), ‘script’ (Javascript) and ‘style’ (CSS).</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- you define your Vue template here --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="comment">// This is where your Javascript goes</span></div><div class="line"><span class="comment">// to define your Vue component, which</span></div><div class="line"><span class="comment">// can be a Layout, a Page or your own</span></div><div class="line"><span class="comment">// component used throughout the app.</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  <span class="comment">//</span></div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">/* This is where your CSS goes */</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="CSS-preprocessors"><a href="#CSS-preprocessors" class="headerlink" title="CSS preprocessors"></a>CSS preprocessors</h3><p>For the <code>&lt;style&gt;</code> tag, you can also use whatever CSS preprocessor you want. <a href="http://stylus-lang.com/" target="_blank" rel="external">Stylus</a> is available out of the box. For SCSS/SASS or LESS, you’ll need to install their Webpack loaders (example: <code>npm install less-loader</code>).</p>
<p>After installing the loader you need (remember Stylus is already installed for you), you can specify you want your chosen preprocessor to handle the CSS code you’re writing:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- notice lang="stylus" --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"stylus"</span>&gt;</span><span class="undefined"></span></div><div class="line">.some-div</div><div class="line">  font-size 15px</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>In the above example, you would replace <code>stylus</code> with the preprocessor you’ve chosen.</p>
<h2 id="Using-Quasar-Directive"><a href="#Using-Quasar-Directive" class="headerlink" title="Using Quasar Directive"></a>Using Quasar Directive</h2><p>Quasar comes with a few custom <a href="https://vuejs.org/v2/guide/custom-directive.html" target="_blank" rel="external">Vue Directives</a>. In order to use them, you need to import them (globally or locally per Vue component where you use them).</p>
<p>Example importing Quasar directive locally:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-ripple</span>&gt;</span>click me<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">import</span> &#123; Ripple &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  directives: &#123;</div><div class="line">    Ripple</div><div class="line">  &#125;,</div><div class="line">  ...</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>Notice how Ripple is used in the Vue HTML template as <code>v-ripple</code>. Vue directives are prefixed with <code>v-</code>.</p>
</blockquote>
<p>Example importing Quasar directives globally. <strong>This means you won’t need to import the specified Quasar directive in every <code>*.vue</code> file where you are using them.</strong><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// We edit "src/main.js":</span></div><div class="line">...</div><div class="line">import Quasar, &#123; Ripple &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line">...</div><div class="line">Vue.use(Quasar, &#123;</div><div class="line">  directives: &#123;</div><div class="line">    Ripple</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line">...</div></pre></td></tr></table></figure></p>
<h2 id="Using-Quasar-Components"><a href="#Using-Quasar-Components" class="headerlink" title="Using Quasar Components"></a>Using Quasar Components</h2><p>Quasar components have names beginning with “Q” like “QBtn” or “QElementResizeObservable”. In order to use them, you need to import them (globally or locally per Vue component where you use them).</p>
<p>Example importing Quasar component locally:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-btn</span> @<span class="attr">click</span>=<span class="string">"doSomething"</span>&gt;</span>Do something<span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"alarm"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">import</span> &#123; QBtn, QIcon &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  components: &#123;</div><div class="line">    QBtn,</div><div class="line">    QIcon</div><div class="line">  &#125;,</div><div class="line">  ...</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>Notice how QBtn is used in the Vue HTML template as <code>&lt;q-btn&gt;</code>. If we’d import QElementResizeObservable, then we’d use it in template as <code>&lt;q-element-resize-observable&gt;</code>.</p>
</blockquote>
<p>Example importing Quasar components globally. <strong>This means you won’t need to import the specified Quasar components in every <code>*.vue</code> file where you are using them.</strong><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// We edit "src/main.js":</span></div><div class="line">...</div><div class="line">import Quasar, &#123; QBtn, QIcon &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line">...</div><div class="line">Vue.use(Quasar, &#123;</div><div class="line">  components: &#123;</div><div class="line">    QBtn,</div><div class="line">    QIcon</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line">...</div></pre></td></tr></table></figure></p>
<h3 id="Importing-All-Components-and-Directives-for-Quick-Test"><a href="#Importing-All-Components-and-Directives-for-Quick-Test" class="headerlink" title="Importing All Components and Directives for Quick Test"></a>Importing All Components and Directives for Quick Test</h3><p>You can import all Components and Directives globally.</p>
<blockquote>
<p><strong>IMPORTANT</strong><br>This <strong>will not</strong> take advantage of tree shaking, causing your code to become bloated with unnescesary/unused code. <strong>Not recommended for production</strong>. Use this only for quick testing purposes.</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// src/main.js</span></div><div class="line"><span class="comment">// (remember to use this for</span></div><div class="line"><span class="comment">// quick testing purposes only!)</span></div><div class="line">...</div><div class="line">import Quasar, * <span class="keyword">as</span> All <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line">...</div><div class="line">Vue.use(Quasar, &#123;</div><div class="line">  components: All,</div><div class="line">  directives: All</div><div class="line">&#125;)</div><div class="line">...</div></pre></td></tr></table></figure>
<h3 id="Self-Closing-Tags"><a href="#Self-Closing-Tags" class="headerlink" title="Self Closing Tags"></a>Self Closing Tags</h3><p>Some Quasar components do not need you to include HTML content inside them. In this case, you can use them as self closing tags. One example with QIcon below:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"cloud"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>Self-closing means the above template is the equivalent to:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"cloud"</span>&gt;</span><span class="tag">&lt;/<span class="name">q-icon</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Both forms are valid and can be used.</p>
<h2 id="Handling-Vue-Properties"><a href="#Handling-Vue-Properties" class="headerlink" title="Handling Vue Properties"></a>Handling Vue Properties</h2><p>You will notice throughout the documentation that Quasar components have a section called “Vue Properties”. These are often called <strong>Props</strong> in Vue documentation. Example:</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>infinite</code></td>
<td>Boolean</td>
<td>Infinite slides scrolling</td>
</tr>
<tr>
<td><code>size</code></td>
<td>String</td>
<td>Thickness of loading bar.</td>
</tr>
<tr>
<td><code>speed</code></td>
<td>Number</td>
<td>How fast should loading bar update its value (in milliseconds).</td>
</tr>
<tr>
<td><code>columns</code></td>
<td>Object</td>
<td>Object defining columns (see “Columns Definition” below).</td>
</tr>
<tr>
<td><code>offset</code></td>
<td>Array</td>
<td>Array with two numbers. Offset on horizontal and vertical (in pixels).</td>
</tr>
</tbody>
</table>
<p>Let’s take some examples with a bogus Quasar component (we will call it QBogus) that supports the properties above. We will discuss each of the types of Vue properties in the below sections.</p>
<h3 id="Boolean-Property"><a href="#Boolean-Property" class="headerlink" title="Boolean Property"></a>Boolean Property</h3><p>A boolean property means it only accepts a strictly Boolean value. The values will not be cast to Boolean, so you must ensure you are using a true Boolean.</p>
<p>If you are trying to control that property and change it dynamically at runtime, then bind it to a variable in your scope:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-bogus</span> <span class="attr">:infinite</span>=<span class="string">"myInfiniteVariable"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  data () &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      myInfiniteVariable: <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>If, on the other hand, you know this Boolean value is not going to change, you can use the shorthand version of the variable like a component attribute and just specify it. In other words, if you don’t bind the variable to a variable in the component’s scope, it will always be <code>true</code>:<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">  &lt;q-bogus infinite /&gt;</div><div class="line"></div><div class="line">  &lt;!--</div><div class="line">    the following is perfectly valid,</div><div class="line">    but it&apos;s a longer version</div><div class="line">  --&gt;</div><div class="line">  &lt;q-bogus :infinite=&quot;true&quot; /&gt;</div><div class="line">&lt;/template&gt;</div></pre></td></tr></table></figure></p>
<h3 id="String-Property"><a href="#String-Property" class="headerlink" title="String Property"></a>String Property</h3><p>As you can imagine, Strings are required as a value for this type of property.<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!--</span></div><div class="line">    direct assignment, no need for</div><div class="line">    a variable in our scope</div><div class="line">  --&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">q-bogus</span> <span class="attr">size</span>=<span class="string">"24px"</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!--</span></div><div class="line">    we can also bind it to a variable</div><div class="line">    in our scope so we can dynamically</div><div class="line">    change it</div><div class="line">  --&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">q-bogus</span> <span class="attr">:size</span>=<span class="string">"mySize"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  data () &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="comment">// notice String as value</span></div><div class="line">      mySize: <span class="string">'16px'</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="Number-Property"><a href="#Number-Property" class="headerlink" title="Number Property"></a>Number Property</h3><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!--</span></div><div class="line">    Case 1. Direct assignment.</div><div class="line">    Notice the colon (":") before property name.</div><div class="line">  --&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">q-bogus</span> <span class="attr">:speed</span>=<span class="string">"50"</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- Case 2. Assignment through a scope variable --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-bogus</span> <span class="attr">:speed</span>=<span class="string">"myNumber"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  data () &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="comment">// notice Number as value</span></div><div class="line">      myNumber: <span class="number">50</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Object-Property"><a href="#Object-Property" class="headerlink" title="Object Property"></a>Object Property</h3><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- Case 1. Direct assignment. --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-bogus</span> <span class="attr">:columns</span>=<span class="string">"&#123;key: 'value', anotherKey: 'another value'&#125;"</span> /&gt;</span></div><div class="line">  <span class="comment">&lt;!-- or a more elegant way for Case 1: --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-bogus</span></span></div><div class="line">    <span class="attr">:columns</span>=<span class="string">"&#123;</span></div><div class="line">      key: 'value',</div><div class="line">      anotherKey: 'another value'</div><div class="line">    &#125;"</div><div class="line">  /&gt;</div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- Case 2. Assignment through a scope variable --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-bogus</span> <span class="attr">:columns</span>=<span class="string">"myColumns"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  data () &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      myColumns: &#123;</div><div class="line">        key: <span class="string">'value'</span>,</div><div class="line">        anotherKey: <span class="string">'another value'</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Array-Property"><a href="#Array-Property" class="headerlink" title="Array Property"></a>Array Property</h3><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- Case 1. Direct assignment. --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-bogus</span> <span class="attr">:offset</span>=<span class="string">"[10, 20]"</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- Case 2. Assignment through a scope variable --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-bogus</span> <span class="attr">:offset</span>=<span class="string">"myOffset"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  data () &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      myOffset: [<span class="number">10</span>, <span class="number">20</span>]</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Handling-Vue-Methods"><a href="#Handling-Vue-Methods" class="headerlink" title="Handling Vue Methods"></a>Handling Vue Methods</h2><p>You will notice throughout the documentation that some Quasar components have a section called “Vue Methods”. Example:</p>
<table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>next()</code></td>
<td>Goes to next slide.</td>
</tr>
<tr>
<td><code>previous(doneFn)</code></td>
<td>Goes to previous slide.</td>
</tr>
<tr>
<td><code>toggleFullscreen()</code></td>
<td>Toggles fullscreen mode.</td>
</tr>
</tbody>
</table>
<p>In order for you to access these methods, you will need to set a Vue reference on the component first. Here’s an example:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!--</span></div><div class="line">    Notice ref="myRef". We will use the name</div><div class="line">    assigned to "ref" in the script part below</div><div class="line">  --&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">q-bogus</span> <span class="attr">ref</span>=<span class="string">"myRef"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  <span class="comment">// we can now access `this.$refs.myRef`</span></div><div class="line">  <span class="comment">// an example on the mounted() Vue component hook</span></div><div class="line">  mounted () &#123;</div><div class="line">    <span class="comment">// on next Vue tick, to ensure</span></div><div class="line">    <span class="comment">// our Vue reference exists</span></div><div class="line">    <span class="keyword">this</span>.$nextTick(() =&gt; &#123;</div><div class="line">      <span class="comment">// calling "next()" method:</span></div><div class="line">      <span class="keyword">this</span>.$refs.myRef.next()</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Handling-Vue-Events"><a href="#Handling-Vue-Events" class="headerlink" title="Handling Vue Events"></a>Handling Vue Events</h2><p>You will notice throughout the documentation that some Quasar components have a section called “Vue Events”. <strong>Do not confuse</strong> these Vue events with the <a href="/components/global-event-bus.html">Global Event Bus</a> as these two have nothing in common.</p>
<p>Example of “Vue Events” section in docs:</p>
<table>
<thead>
<tr>
<th>Event Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@open</code></td>
<td>Triggered right after the Modal is opened.</td>
</tr>
<tr>
<td><code>@close</code></td>
<td>Triggered right after the Modal is closed.</td>
</tr>
</tbody>
</table>
<p>In order for you to catch these events, when they are triggered, you will need to add listeners for them on the component itself in the HTML template. Here’s an example:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-bogus</span> @<span class="attr">open</span>=<span class="string">"doSomething"</span> @<span class="attr">close</span>=<span class="string">"doSomethingElse"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  methods: &#123;</div><div class="line">    doSomething () &#123;</div><div class="line">      <span class="comment">// this method has been called (in this case)</span></div><div class="line">      <span class="comment">// because @open event was triggered by QBogus component</span></div><div class="line">    &#125;,</div><div class="line">    doSomethingElse () &#123;</div><div class="line">      <span class="comment">// this method has been called (in this case)</span></div><div class="line">      <span class="comment">// because @close event was triggered by QBogus component</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>There are times when you need to access native DOM events on a Quasar component too, like the native <code>@click</code>. Do not confuse native events with the Vue events emitted by the component. They are different things. Let’s take an example: let’s say we have a component (QBogus) that emits <code>@open</code> and <code>@close</code>, but doesn’t emit a <code>@click</code> event. <code>@click</code> being a native DOM event, we can still catch it with the <code>.native</code> modifier:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Notice "@click.native" --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-bogus</span> @<span class="attr">click.native</span>=<span class="string">"myMethod"</span> /&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JS Animations]]></title>
      <url>http://beta.quasar-framework.org/components/js-animations.html</url>
      <content type="html"><![CDATA[<p>You can create animations through Javascript (using RAF - <code>requestAnimationFrame()</code>) with Quasar.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; animate &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> id = animate.start(&#123;</div><div class="line">  name: <span class="string">'unique-animation-name'</span>, <span class="comment">// optional, if none is supplied a unique one is created and returned</span></div><div class="line">  <span class="keyword">from</span>: <span class="string">'0'</span>, <span class="comment">// current position</span></div><div class="line">  to: <span class="string">'100'</span>, <span class="comment">// final position</span></div><div class="line">  duration: <span class="number">300</span>, <span class="comment">// duration of the animation</span></div><div class="line">  done (finalPosition) &#123;...&#125;, <span class="comment">// function to call when animation is done</span></div><div class="line">  cancel (currentPosition) &#123;...&#125;, <span class="comment">// function to call when animation is aborted</span></div><div class="line">  apply (currentPosition) &#123;...&#125;, <span class="comment">// function called on each step so you can apply changes</span></div><div class="line">  easing (currentPosition) &#123; <span class="comment">// custom easing function</span></div><div class="line">    <span class="comment">// ...return transformation of currentPosition...</span></div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"><span class="comment">// Starting an animation with same name will abort the previous one</span></div><div class="line"></div><div class="line"><span class="comment">// Stop an animation using its name</span></div><div class="line">animate.stop(<span class="string">'unique-animation-name'</span>)</div><div class="line"><span class="comment">// or</span></div><div class="line">animate.stop(id) <span class="comment">// id returned from above</span></div></pre></td></tr></table></figure>
<p>Example:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; animate &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">animate.start(&#123;</div><div class="line">  <span class="keyword">from</span>: <span class="number">6</span>,</div><div class="line">  to: <span class="number">158</span>,</div><div class="line">  apply (pos) &#123;</div><div class="line">    el.style.maxHeight = <span class="string">`<span class="subst">$&#123;pos&#125;</span>px`</span></div><div class="line">  &#125;,</div><div class="line">  done () &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`we're done!`</span>)</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Knob]]></title>
      <url>http://beta.quasar-framework.org/components/knob.html</url>
      <content type="html"><![CDATA[<p>Quasar Knob is another way of making the user select a Number value from a predefined range. With optional steps included. See demo.</p>
<input type="hidden" data-fullpage-demo="forms/knob">

<p>Works well with <a href="/components/field.html">QField</a> for additional functionality such as a helper, error message placeholder and many others.</p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-knob</span></span></div><div class="line">  <span class="attr">v-model</span>=<span class="string">"model"</span></div><div class="line">  <span class="attr">:min</span>=<span class="string">"min"</span></div><div class="line">  <span class="attr">:max</span>=<span class="string">"max"</span></div><div class="line">&gt;<span class="tag">&lt;/<span class="name">q-knob</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- With custom placeholder --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-knob</span></span></div><div class="line">  <span class="attr">v-model</span>=<span class="string">"model"</span></div><div class="line">  <span class="attr">:min</span>=<span class="string">"min"</span></div><div class="line">  <span class="attr">:max</span>=<span class="string">"max"</span></div><div class="line">  <span class="attr">:placeholder</span>=<span class="string">"'$ ' + model"</span></div><div class="line">&gt;<span class="tag">&lt;/<span class="name">q-knob</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Disabled state --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-knob</span></span></div><div class="line">  <span class="attr">disable</span></div><div class="line">  <span class="attr">v-model</span>=<span class="string">"model"</span></div><div class="line">  <span class="attr">:min</span>=<span class="string">"min"</span></div><div class="line">  <span class="attr">:max</span>=<span class="string">"max"</span></div><div class="line">&gt;<span class="tag">&lt;/<span class="name">q-knob</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><p>Supports <code>v-model</code> which should be a Number.</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>size</code></td>
<td>String</td>
<td>CSS String determining the width and height of the Knob. Examples: “120px”, “12rem”.</td>
</tr>
<tr>
<td><code>step</code></td>
<td>Number</td>
<td>Number representing difference between two values that the model can take. Default: <code>1</code>.</td>
</tr>
<tr>
<td><code>min</code></td>
<td>Number</td>
<td>Minimum value that the model can take.</td>
</tr>
<tr>
<td><code>max</code></td>
<td>Number</td>
<td>Maximum value that the model can take.</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>One from <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>trackColor</code></td>
<td>String</td>
<td>One from <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>lineWidth</code></td>
<td>String</td>
<td>Line width of Knob. Default is ‘6px’.</td>
</tr>
<tr>
<td><code>readonly</code></td>
<td>Boolean</td>
<td>Sort of a “display” only mode. Model cannot be altered.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>When set to <code>true</code> the model cannot be altered.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Vue Event</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@change(newVal)</code></td>
<td>Triggered on v-model value change.</td>
</tr>
</tbody>
</table>
<h2 id="More-Examples"><a href="#More-Examples" class="headerlink" title="More Examples"></a>More Examples</h2><p>Multi-colored with a Euro icon.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"> <span class="tag">&lt;<span class="name">q-knob</span></span></div><div class="line">  <span class="attr">v-model</span>=<span class="string">"model"</span></div><div class="line">  <span class="attr">size</span>=<span class="string">"120px"</span></div><div class="line">  <span class="attr">style</span>=<span class="string">"font-size: 1.5rem"</span></div><div class="line">  <span class="attr">color</span>=<span class="string">"secondary"</span></div><div class="line">  <span class="attr">track-color</span>=<span class="string">"yellow-3"</span></div><div class="line">  <span class="attr">line-width</span>=<span class="string">"5px"</span></div><div class="line">  <span class="attr">:min</span>=<span class="string">"min"</span></div><div class="line">  <span class="attr">:max</span>=<span class="string">"max"</span></div><div class="line">  <span class="attr">:step</span>=<span class="string">"5"</span></div><div class="line">&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">class</span>=<span class="string">"on-left"</span> <span class="attr">name</span>=<span class="string">"euro_symbol"</span> /&gt;</span> &#123;&#123;model&#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">q-knob</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Read-only state (different than disabled, as the mouse pointer doesn’t change).</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-knob</span></span></div><div class="line">  <span class="attr">v-model</span>=<span class="string">"model"</span></div><div class="line">  <span class="attr">:min</span>=<span class="string">"min"</span></div><div class="line">  <span class="attr">:max</span>=<span class="string">"max"</span></div><div class="line">  <span class="attr">color</span>=<span class="string">"primary"</span></div><div class="line">  <span class="attr">readonly</span></div><div class="line">&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">class</span>=<span class="string">"on-left"</span> <span class="attr">name</span>=<span class="string">"volume_up"</span> /&gt;</span> &#123;&#123;model&#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">q-knob</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Using a <a href="/components/field.html">QField</a> to highlight error state.<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-field</span></span></div><div class="line">  <span class="attr">label</span>=<span class="string">"Knob"</span></div><div class="line">  <span class="attr">icon</span>=<span class="string">"cake"</span></div><div class="line">  <span class="attr">helper</span>=<span class="string">"Touch to change"</span></div><div class="line">  <span class="attr">:error</span>=<span class="string">"knobHasError"</span></div><div class="line">  <span class="attr">error-label</span>=<span class="string">"Invalid value selected."</span></div><div class="line">&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">q-knob</span></span></div><div class="line">    <span class="attr">v-model</span>=<span class="string">"model"</span></div><div class="line">    <span class="attr">:min</span>=<span class="string">"min"</span></div><div class="line">    <span class="attr">:max</span>=<span class="string">"max"</span></div><div class="line">  &gt;</div><div class="line">    <span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">class</span>=<span class="string">"on-left"</span> <span class="attr">name</span>=<span class="string">"volume_up"</span> /&gt;</span> &#123;&#123;model&#125;&#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">q-knob</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-field</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Layout]]></title>
      <url>http://beta.quasar-framework.org/components/layout.html</url>
      <content type="html"><![CDATA[<p>Layouts are the elements that wrap page content, like a navigational bar or drawer. Multiple pages can share the same Layout, so the code is reusable, which is one of their key points.</p>
<input type="hidden" data-fullpage-demo="layout/play-with-layout">

<p>Quasar Layouts are not mandatory, but they do help you better structure your website/app. They have a number of features which offer you major benefits in simplifying your app’s layout design, right out of the box.</p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>Below is an example of a Layout, which contains all possible elements:</p>
<ul>
<li>a <a href="/components/toolbar.html">QToolbar</a> (used for both header and footer, you can specify as many as you want)</li>
<li>a navigation with <a href="/components/tabs.html">QTabs</a></li>
<li>a left side drawer panel (which is shown alongside page content on wide screens)</li>
<li>and a right side drawer panel</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-layout</span> <span class="attr">ref</span>=<span class="string">"layout"</span> <span class="attr">view</span>=<span class="string">"hHr LpR lFf"</span> <span class="attr">:right-breakpoint</span>=<span class="string">"1100"</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- Header --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-toolbar</span> <span class="attr">slot</span>=<span class="string">"header"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">flat</span> @<span class="attr">click</span>=<span class="string">"$refs.layout.toggleLeft()"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"menu"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-toolbar-title</span>&gt;</span></div><div class="line">      Layout Header</div><div class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"subtitle"</span>&gt;</span>Optional subtitle<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-toolbar-title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">flat</span> @<span class="attr">click</span>=<span class="string">"$refs.layout.toggleRight()"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"menu"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-toolbar</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- Navigation --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-tabs</span> <span class="attr">slot</span>=<span class="string">"navigation"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-route-tab</span> <span class="attr">slot</span>=<span class="string">"title"</span> <span class="attr">icon</span>=<span class="string">"view_quilt"</span> <span class="attr">to</span>=<span class="string">"/test-layout/about"</span> <span class="attr">replace</span> <span class="attr">hide</span>=<span class="string">"icon"</span> <span class="attr">label</span>=<span class="string">"About"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-route-tab</span> <span class="attr">slot</span>=<span class="string">"title"</span> <span class="attr">icon</span>=<span class="string">"view_day"</span> <span class="attr">to</span>=<span class="string">"/test-layout/toolbar"</span> <span class="attr">replace</span> <span class="attr">hide</span>=<span class="string">"icon"</span> <span class="attr">label</span>=<span class="string">"Toolbar"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-route-tab</span> <span class="attr">slot</span>=<span class="string">"title"</span> <span class="attr">icon</span>=<span class="string">"view_day"</span> <span class="attr">to</span>=<span class="string">"/test-layout/tabs"</span> <span class="attr">replace</span> <span class="attr">label</span>=<span class="string">"Tabs"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-route-tab</span> <span class="attr">slot</span>=<span class="string">"title"</span> <span class="attr">icon</span>=<span class="string">"input"</span> <span class="attr">to</span>=<span class="string">"/test-layout/drawer"</span> <span class="attr">replace</span> <span class="attr">label</span>=<span class="string">"Drawer"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-tabs</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- Left Side Panel --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"left"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-list</span> <span class="attr">no-border</span> <span class="attr">link</span> <span class="attr">inset-separator</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-list-header</span>&gt;</span>Essential Links<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-side-link</span> <span class="attr">item</span> <span class="attr">to</span>=<span class="string">"/docs"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"school"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Docs"</span> <span class="attr">sublabel</span>=<span class="string">"quasar-framework.org"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">q-side-link</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-side-link</span> <span class="attr">item</span> <span class="attr">to</span>=<span class="string">"/forum"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"record_voice_over"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Forum"</span> <span class="attr">sublabel</span>=<span class="string">"forum.quasar-framework.org"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">q-side-link</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-side-link</span> <span class="attr">item</span> <span class="attr">to</span>=<span class="string">"/chat"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"chat"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Gitter Channel"</span> <span class="attr">sublabel</span>=<span class="string">"Quasar Lobby"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">q-side-link</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-side-link</span> <span class="attr">item</span> <span class="attr">to</span>=<span class="string">"/twitter"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"rss feed"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Twitter"</span> <span class="attr">sublabel</span>=<span class="string">"@quasarframework"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">q-side-link</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- Right Side Panel --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"right"</span>&gt;</span></div><div class="line">    Right Side of Layout</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- sub-routes get injected here: --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- Footer --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-toolbar</span> <span class="attr">slot</span>=<span class="string">"footer"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-toolbar-title</span>&gt;</span></div><div class="line">      Layout Footer</div><div class="line">    <span class="tag">&lt;/<span class="name">q-toolbar-title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-toolbar</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-layout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>You can also use <a href="/components/scroll-area.html">QScrollArea</a> for the left or right sides of the layout, if you want to control the scrollbar (but it’s not mandatory):<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- notice style tag --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-scroll-area</span></span></div><div class="line">  <span class="attr">slot</span>=<span class="string">"left"</span></div><div class="line">  <span class="attr">style</span>=<span class="string">"width: 100%; height: 100%;"</span></div><div class="line">&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">q-side-link</span> <span class="attr">item</span> <span class="attr">to</span>=<span class="string">"/test-layout/toolbar"</span>&gt;</span>Toolbar<span class="tag">&lt;/<span class="name">q-side-link</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-side-link</span> <span class="attr">item</span> <span class="attr">to</span>=<span class="string">"/test-layout/tabs"</span>&gt;</span>Tabs<span class="tag">&lt;/<span class="name">q-side-link</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-side-link</span> <span class="attr">item</span> <span class="attr">to</span>=<span class="string">"/test-layout/drawer"</span>&gt;</span>Drawer<span class="tag">&lt;/<span class="name">q-side-link</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-scroll-area</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="Tips-to-Understanding-QLayout"><a href="#Tips-to-Understanding-QLayout" class="headerlink" title="Tips to Understanding QLayout"></a>Tips to Understanding QLayout</h2><h3 id="Navigation-from-drawer-panels"><a href="#Navigation-from-drawer-panels" class="headerlink" title="Navigation from drawer panels"></a>Navigation from drawer panels</h3><p>There are multiple ways to navigate to a route from the drawer panels (left/right side of Layout). Following examples apply only from “left” and “right” Layout slots.</p>
<blockquote>
<p><strong>IMPORTANT</strong><br>Avoid directly using any other means of changing current route, like <code>&lt;router-link&gt;</code>, when on a drawer panel. You also need a way to tell the drawer panel to close itself (if it’s the case, on narrow windows) before navigating away. Notice that the drawer panels can also be closed with the “back” button (both on a desktop or on a mobile device), which means they tamper with window history which must be restored before navigating to another route. Following examples show you how.</p>
</blockquote>
<p>Recommended way is through <a href="/components/layout-side-links.html">QSideLink</a>:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-layout</span>&gt;</span></div><div class="line">  ....</div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"left"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- navigating to "/twitter" route --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-side-link</span> <span class="attr">item</span> <span class="attr">to</span>=<span class="string">"/twitter"</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- using it as QItem in this particular example --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"rss feed"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Twitter"</span> <span class="attr">sublabel</span>=<span class="string">"@quasarframework"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-side-link</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--</span></div><div class="line">      Wrapping an icon in this example,</div><div class="line">      but note that it can wrap anything</div><div class="line">    --&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">q-side-link</span> <span class="attr">to</span>=<span class="string">"/twitter"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"rss feed"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-side-link</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-layout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>Another approach would be to use a Vue reference on QLayout and call “hideCurrentSide” method:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-layout</span> <span class="attr">ref</span>=<span class="string">"layout"</span>&gt;</span></div><div class="line">    ...</div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"left"</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- navigating to "/twitter" route --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item</span> @<span class="attr">click</span>=<span class="string">"navigate"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- using it as QItem in this particular example --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"rss feed"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Twitter"</span> <span class="attr">sublabel</span>=<span class="string">"@quasarframework"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line"></div><div class="line">      <span class="comment">&lt;!--</span></div><div class="line">        Works on any DOM element / component.</div><div class="line">        In this example we have an icon.</div><div class="line">        Make sure you understand the difference between @click and @click.native</div><div class="line">      --&gt;</div><div class="line">      <span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"rss feed"</span> @<span class="attr">click</span>=<span class="string">"navigate"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-layout</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  ...,</div><div class="line">  methods: &#123;</div><div class="line">    navigate () &#123;</div><div class="line">      <span class="keyword">this</span>.$refs.layout.hideCurrentSide(() =&gt; &#123;</div><div class="line">        <span class="keyword">this</span>.$router.push(<span class="string">'/twitter'</span>)</div><div class="line">      &#125;)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Routing"><a href="#Routing" class="headerlink" title="Routing"></a>Routing</h3><p>If your layout uses Vue Router sub-routes (recommended), then it makes sense to use Vue’s <code>&lt;router-view&gt;</code> component, which is just a placeholder where sub-routes are injected.</p>
<h3 id="Available-Slots"><a href="#Available-Slots" class="headerlink" title="Available Slots"></a>Available Slots</h3><p>QLayout uses the following Vue slots: <code>header</code>, <code>footer</code>, <code>navigation</code>, <code>left</code> and <code>right</code>. You can specify your content for these slots with the <code>slot</code> HTML attribute: <code>slot=&quot;footer&quot;</code>.</p>
<blockquote>
<p><strong>IMPORTANT</strong><br>The slots must be direct children of <code>&lt;q-layout&gt;</code> (do not wrap them with any DOM elements / components) otherwise Vue won’t pick them up. Read about <a href="https://vuejs.org/v2/guide/components.html#Content-Distribution-with-Slots" target="_blank" rel="external">Vue content distribution with slots</a> to understand why.</p>
</blockquote>
  <figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-layout</span>&gt;</span></div><div class="line">  ...</div><div class="line">  <span class="comment">&lt;!--</span></div><div class="line">    direct child of &lt;q-layout&gt;</div><div class="line">    (&lt;q-layout&gt; is direct parent of the slot)</div><div class="line">  --&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"footer"</span>&gt;</span></div><div class="line">    ...Your Content...</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  ...</div><div class="line"><span class="tag">&lt;/<span class="name">q-layout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>You can specify your own components as content for these slots too.</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-layout</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">my-left-panel</span> <span class="attr">slot</span>=<span class="string">"left"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-layout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>You can also use multiple headers, footers and navigation elements. Specify <code>slot=&quot;header&quot;</code> or <code>slot=&quot;footer&quot;</code> on multiple elements, when the need arises. Please note though, the order in which you specify these DOM elements / components does matter.</p>
<h3 id="The-Navigation-Slot-and-Positioning"><a href="#The-Navigation-Slot-and-Positioning" class="headerlink" title="The Navigation Slot and Positioning"></a>The Navigation Slot and Positioning</h3><p>The best way to use the navigation slot is to place some <a href="/components/tabs.html">QTabs</a>, configured to use routes, within it. Those routes can be sub-routes of the route being used for the layout.</p>
<blockquote>
<p><strong>Note</strong><br>Depending on the theme used, the <code>navigation</code> slot will be placed in different places. With the Material Design theme, the <code>navigation</code> slot will be after header and before the page view (but part of header). With the iOS theme, the <code>navigation</code> slot will be added after page view and before the footer (but part of footer).</p>
</blockquote>
<h3 id="Toolbar-Placement"><a href="#Toolbar-Placement" class="headerlink" title="Toolbar Placement"></a>Toolbar Placement</h3><p>A great place to use the <a href="/components/toolbar.html">Toolbars</a> component is within the header and footer slots.<br>  <figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-toolbar</span> <span class="attr">slot</span>=<span class="string">"header"</span> <span class="attr">color</span>=<span class="string">"green"</span>&gt;</span></div><div class="line">  ... toolbar content ...</div><div class="line"><span class="tag">&lt;/<span class="name">q-toolbar</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="Search-example"><a href="#Search-example" class="headerlink" title="Search example"></a>Search example</h3><p>Below is an example of placing a <a href="/components/search.html">Search</a> bar in the header:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-layout</span>&gt;</span></div><div class="line">  ...</div><div class="line">  <span class="comment">&lt;!-- We place it on header, so slot="header" --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-toolbar</span> <span class="attr">slot</span>=<span class="string">"header"</span> <span class="attr">color</span>=<span class="string">"primary"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-search</span> <span class="attr">inverted</span> <span class="attr">v-model</span>=<span class="string">"search"</span> <span class="attr">color</span>=<span class="string">"none"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-toolbar</span>&gt;</span></div><div class="line">  ...</div><div class="line"><span class="tag">&lt;/<span class="name">q-layout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="Fixed-Positioning-amp-FABs"><a href="#Fixed-Positioning-amp-FABs" class="headerlink" title="Fixed Positioning &amp; FABs"></a>Fixed Positioning &amp; FABs</h3><p>Also, read about the smart <a href="/components/fixed-positioning-on-layout.html">Fixed Positioning on Layout</a> and learn how you can use it to also place a <a href="/components/floating-action-button.html">Floating Action Button</a> on your Layout.</p>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>view</code></td>
<td>String</td>
<td>Configuration string which defines how different parts of  the layout get displayed on screen.</td>
</tr>
<tr>
<td><code>reveal</code></td>
<td>Boolean</td>
<td>Makes the header slide up out of view when scrolling page down and reappear, when scrolling up a bit.</td>
</tr>
<tr>
<td><code>left-breakpoint</code></td>
<td>Number</td>
<td>Breakpoint (in pixels, defining window width) at which point the left side will be placed directly over the layout and won’t act as a drawer anymore. Default is 992 (up to “sm”, including). Set to 0 to disable breakpoint.</td>
</tr>
<tr>
<td><code>right-breakpoint</code></td>
<td>Number</td>
<td>Breakpoint (in pixels, defining window width) at which point the right side will be placed directly over the layout and won’t act as a drawer anymore. Default is 992 (up to “sm”, including). Set to 0 to disable breakpoint.</td>
</tr>
<tr>
<td><code>header-style</code></td>
<td>Object</td>
<td>Style applied to header.</td>
</tr>
<tr>
<td><code>header-class</code></td>
<td>Object</td>
<td>CSS classes applied to header.</td>
</tr>
<tr>
<td><code>left-style</code></td>
<td>Object</td>
<td>Style applied to layout left side / drawer.</td>
</tr>
<tr>
<td><code>left-class</code></td>
<td>Object</td>
<td>CSS classes applied to layout left side / drawer.</td>
</tr>
<tr>
<td><code>right-style</code></td>
<td>Object</td>
<td>Style applied to layout right side / drawer.</td>
</tr>
<tr>
<td><code>right-class</code></td>
<td>Object</td>
<td>CSS classes applied to layout right side / drawer.</td>
</tr>
<tr>
<td><code>page-style</code></td>
<td>Object</td>
<td>Style applied to content/page (between header and footer).</td>
</tr>
<tr>
<td><code>page-class</code></td>
<td>Object</td>
<td>CSS classes applied to content/page (between header and footer).</td>
</tr>
<tr>
<td><code>footer-style</code></td>
<td>Object</td>
<td>Style applied to footer.</td>
</tr>
<tr>
<td><code>footer-class</code></td>
<td>Object</td>
<td>CSS classes applied to footer.</td>
</tr>
</tbody>
</table>
<h3 id="Styling"><a href="#Styling" class="headerlink" title="Styling"></a>Styling</h3><p>Use <code>*-style</code> and <code>*-class</code> properties (notice they need Objects) to style  the containers of the layout. For example, you can set background on left side / drawer like this:</p>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">&lt;q-layout</div><div class="line">  :left-class="&#123;'bg-primary': true&#125;"</div><div class="line">  ...</div><div class="line">&lt;/q-layout&gt;</div></pre></td></tr></table></figure>
<p>The Vue Object notation for style and class attributes is mandatory.</p>
<h3 id="Configuring-the-“view”-prop"><a href="#Configuring-the-“view”-prop" class="headerlink" title="Configuring the “view” prop"></a>Configuring the “view” prop</h3><p>Quasar introduces a unique and excellent layout concept, which allows you to easily structure layouts to work in certain ways, by simply changing a short string notation.</p>
<p>To explain how this works, imagine your Layout is a 3x3 matrix of containers. The first row of containers would be the header and the last row would be the footer. The first column of containers would be the “left” and last column would be the “right”. The center of the matrix, below the header and above the footer, would be the page or main content container.</p>
<p>Now think about this. This matrix of containers or “QLayout View” can be represented by a string. This string contains only 11 characters:</p>
<ul>
<li>3 defining the header row</li>
<li>then a space</li>
<li>3 defining the middle row</li>
<li>a space</li>
<li>then 3 defining the footer</li>
</ul>
<p>The picture below offers a visual representation of the QLayout View, to help you understand how to configure its 3x3 matrix.</p>
<p><img src="/images/layout-view-prop.svg" alt="Layout &quot;view&quot; prop" title="Layout &#39;view&#39; prop"></p>
<p>The letters shown above are also case sensitive. For example, using at least one “L” (uppercase character instead of lowercase) will make your layout left side (drawer) be in a fixed position. Same applies for “H” (header), “F” (footer) and finally “R” (right side / drawer).</p>
<p>For example, if you want your layout’s right side / drawer to be placed on the right of the header, page and footer, you’d use <code>hhr lpr ffr</code>. If you’d like to also make it fixed, just transform one <code>r</code> character to uppercase, like this: <code>hhR lpr ffr</code>, or <code>hhr lpR ffr</code> or <code>hhr lpr ffR</code>.</p>
<p>These settings are completely up to you to use as you’d like. You could even go wild with a setup like this: <code>Lhh lpR ffr</code>. Try it out! Make sure you also go to the desktop view, to see it work properly.</p>
<blockquote>
<p><strong>NOTE</strong><br>It is important that you specify all sections of a layout, even if you don’t use them. For example, even if you don’t use footer or right side drawer, specify them within your layout’s <code>view</code> prop.</p>
</blockquote>
<h3 id="The-“reveal”-prop"><a href="#The-“reveal”-prop" class="headerlink" title="The “reveal” prop"></a>The “reveal” prop</h3><p>You’ll notice in playing with the view configuration, if you set the header to “hhh” (all small letters), the header will be set to a static position at the top of the page. This in turn means, the header will move off the screen as the user scrolls down the page. If the user then needs to use the navigation in the header, he/she must scroll completely up to top of the page to get to it and this is bad UX.</p>
<p>One way to help the user, is to add a <a href="/components/back-to-top.html">back-to-top button</a> on the page.</p>
<p>Another way is to use the <code>reveal</code> prop.</p>
<p>The <code>reveal</code> prop overrides “H”, by fixing the header to the top of the screen. As the user scrolls down more than 100 pixels, the header rolls up it’s own height above the top of the screen. As soon as the user scrolls back up (just 1 pixel), the header comes into view again immediately.</p>
<h2 id="The-Breakpoints"><a href="#The-Breakpoints" class="headerlink" title="The Breakpoints"></a>The Breakpoints</h2><p>If you’ve played with the layout in desktop mode, you might notice how the left and right sides/ drawers magically hide, as you decrease the screen width. This is part of the smart responsiveness designed into Quasar’s layout component.</p>
<p>If you’d like to control how the left and right side /drawers work, you have two props called <code>left-breakpoint</code> and <code>right-breakpoint</code>. These values are the minimum size of the screen in pixels, before the left and right drawers are forced to float above the layout. This is a fantastic and important function in maximizing screen real estate, for smaller devices.</p>
<p><strong>Tip</strong><br>If you want to also be able to toggle the left drawer with larger screen sizes, use a large value for <code>left-breakpoint</code>, so that basically the left drawer  always works as a drawer on larger screens.</p>
<h2 id="Vue-Methods"><a href="#Vue-Methods" class="headerlink" title="Vue Methods"></a>Vue Methods</h2><table>
<thead>
<tr>
<th>Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>toggleLeft</code></td>
<td>Toggle left side state (show / hide).</td>
</tr>
<tr>
<td><code>showLeft</code></td>
<td>Show left side.</td>
</tr>
<tr>
<td><code>hideLeft</code></td>
<td>Hide left side.</td>
</tr>
<tr>
<td><code>toggleRight</code></td>
<td>Toggle right side state (show / hide).</td>
</tr>
<tr>
<td><code>showRight</code></td>
<td>Show right side.</td>
</tr>
<tr>
<td><code>hideRight</code></td>
<td>Hide right side.</td>
</tr>
<tr>
<td><code>hideCurrentSide</code></td>
<td>Hide currently opened layout side (right or left).</td>
</tr>
</tbody>
</table>
<p>Example of placing a button on a toolbar in the header, which will toggle the left side / drawer:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!--</span></div><div class="line">  Notice we're using a Vue Reference</div><div class="line">  ("ref") on QLayout</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">q-layout</span> <span class="attr">ref</span>=<span class="string">"layout"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-toolbar</span> <span class="attr">slot</span>=<span class="string">"header"</span> <span class="attr">color</span>=<span class="string">"primary"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">flat</span> @<span class="attr">click</span>=<span class="string">"$refs.layout.toggleLeft()"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"menu"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line">    ...</div><div class="line">  <span class="tag">&lt;/<span class="name">q-toolbar</span>&gt;</span></div><div class="line">  ...</div><div class="line"><span class="tag">&lt;/<span class="name">q-layout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>There’s also the possibility to use <code>v-model</code> to control the left/right sides toggling:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-layout</span> <span class="attr">v-model</span>=<span class="string">"sides"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-toolbar</span> <span class="attr">slot</span>=<span class="string">"header"</span> <span class="attr">color</span>=<span class="string">"primary"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">flat</span> @<span class="attr">click</span>=<span class="string">"sides.left = !sides.left"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"menu"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line">      ...</div><div class="line">    <span class="tag">&lt;/<span class="name">q-toolbar</span>&gt;</span></div><div class="line">    ...</div><div class="line">  <span class="tag">&lt;/<span class="name">q-layout</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  data () &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      sides: &#123;</div><div class="line">        <span class="comment">// "false" means hidden</span></div><div class="line">        <span class="comment">// "true" means visible</span></div><div class="line">        left: <span class="literal">false</span>,</div><div class="line">        right: <span class="literal">true</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Event Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@resize</code></td>
<td>Event emitted on window resize.</td>
</tr>
<tr>
<td><code>@scroll</code></td>
<td>Event emitted on page scroll.</td>
</tr>
<tr>
<td><code>@left-breakpoint</code></td>
<td>Event emitted when window width toggles above/below left side breakpoint (see <code>left-breakpoint</code> prop)</td>
</tr>
<tr>
<td><code>@right-breakpoint</code></td>
<td>Event emitted when window width toggles above/below right side breakpoint (see <code>right-breakpoint</code> prop)</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Injections"><a href="#Vue-Injections" class="headerlink" title="Vue Injections"></a>Vue Injections</h2><table>
<thead>
<tr>
<th>Property Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>layout</code></td>
<td>This whole component. Usefull for accessing closing/opening methods from deep descendants.</td>
</tr>
</tbody>
</table>
<p>New to Vue Provide/Inject? Read <a href="https://medium.com/@znck/provide-inject-in-vue-2-2-b6473a7f7816" target="_blank" rel="external">this</a>!</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Layout Side Links]]></title>
      <url>http://beta.quasar-framework.org/components/layout-side-links.html</url>
      <content type="html"><![CDATA[<p>QLayout’s two areas on left and right of window (possibly acting like a Drawer if configured so) tamper with window history in order for the “back” button to close them instead of navigating one page back.  When clicking on a route link, one would need to figure out if QLayout sides are opened and close them, before finally navigating the respective route. This can become a burden in complex templates, so this is where <strong>QSideLink component</strong> comes into play. It does the heavy-lifting and figures out all necessary details and navigates to a route safely without breaking window history.</p>
<p>QSideLink is basically a wrapper over Vue’s <code>&lt;router-link&gt;</code> component (read about it <a href="http://router.vuejs.org/en/api/router-link.html" target="_blank" rel="external">here</a>), so it inherits all its properties. Furthermore, when on target route, it adds <code>router-link-active</code> CSS class to the element.</p>
<p>It can also wrap a QItem so you can use within QLists if you want to. In this case, use QItem subcomponents within it.</p>
<blockquote>
<p>If you are upgrading from older Quasar versions then you should know that this component replaces QDrawerLink.</p>
</blockquote>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><blockquote>
<p>It’s important to note that you need to use QSideLink only within “left” or “right” QLayout slots, otherwise it makes no sense, as this component handles navigation from left and right sides of a QLayout only.</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!--</span></div><div class="line">  The example below creates a &lt;div&gt; containing the</div><div class="line">  text "Go To Route" which when clicked/tapped it</div><div class="line">  makes your website/app navigate to the route</div><div class="line">  "/some/route"</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">q-side-link</span> <span class="attr">to</span>=<span class="string">"/some/route"</span>&gt;</span>Go to Route<span class="tag">&lt;/<span class="name">q-side-link</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line">  The example below creates a &lt;a&gt; element instead of</div><div class="line">  the default &lt;div&gt;.</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">q-side-link</span> <span class="attr">tag</span>=<span class="string">"a"</span> <span class="attr">to</span>=<span class="string">"/some/route"</span>&gt;</span>Go to Route<span class="tag">&lt;/<span class="name">q-side-link</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!--</span></div><div class="line">  The example below creates a wrapper over QItem</div><div class="line">  so it acts as a menu item on a QLayout left/right side.</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">q-side-link</span> <span class="attr">item</span> <span class="attr">to</span>=<span class="string">"/some/other/route"</span> <span class="attr">exact</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!--</span></div><div class="line">    any QItem subcomponent goes here, just like under</div><div class="line">    a QItem component</div><div class="line">  --&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span></div><div class="line">      Go to some other Route</div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-side-link</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><p>As QSideLink is a wrapper over Vue’s RouterLink, it inherits its properties and behavior. For a much more detailed use of these properties, please refer to <a href="http://router.vuejs.org/en/api/router-link.html" target="_blank" rel="external">RouterLink’s documentation</a>.</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>to</code></td>
<td>String / Object</td>
<td>Route to navigate to</td>
</tr>
<tr>
<td><code>exact</code></td>
<td>Boolean</td>
<td>Match the exact route specified (and not also its children) when adding <code>router-link-active</code> CSS class.</td>
</tr>
<tr>
<td><code>append</code></td>
<td>Boolean</td>
<td>Append route definition to current route when navigating.</td>
</tr>
<tr>
<td><code>replace</code></td>
<td>Boolean</td>
<td>Replaces current route with the new one instead of adding it to the window history queue.</td>
</tr>
</tbody>
</table>
<p>It also inherits properties from QItem components if you set <code>item</code> property:</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>item</code></td>
<td>Boolean</td>
<td>Wrap a QItem component. Required so that all next properties to kick in.</td>
</tr>
<tr>
<td><code>dense</code></td>
<td>Boolean</td>
<td>Use a dense QItem.</td>
</tr>
<tr>
<td><code>sparse</code></td>
<td>Boolean</td>
<td>Use a sparse QItem.</td>
</tr>
<tr>
<td><code>multiline</code></td>
<td>Boolean</td>
<td>Use a multiline QItem. Useful in cases where you use label and sublabel that spans multiple lines, but even then it’s optional.</td>
</tr>
<tr>
<td><code>separator</code></td>
<td>Boolean</td>
<td>Use a separator from other QItems or QCollapsibles, just like on QItem.</td>
</tr>
<tr>
<td><code>inset-separator</code></td>
<td>Boolean</td>
<td>Inset separator, same behavior as <code>separator</code>.</td>
</tr>
<tr>
<td><code>highlight</code></td>
<td>Boolean</td>
<td>Hover effect when on desktop only.</td>
</tr>
</tbody>
</table>
<h2 id="Creating-QLayout-Side-Menus"><a href="#Creating-QLayout-Side-Menus" class="headerlink" title="Creating QLayout Side Menus"></a>Creating QLayout Side Menus</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Example using a QLayout as required --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-layout</span> <span class="attr">ref</span>=<span class="string">"layout"</span> <span class="attr">view</span>=<span class="string">"hHr LpR Fff"</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- Layout header --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-toolbar</span> <span class="attr">slot</span>=<span class="string">"header"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">flat</span> @<span class="attr">click</span>=<span class="string">"$refs.layout.toggleLeft()"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"menu"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"q-toolbar-title"</span>&gt;</span></div><div class="line">      Quasar Layout</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-toolbar</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!--</span></div><div class="line">    Defining left side of QLayout.</div><div class="line">    Notice slot="left"</div><div class="line">  --&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"left"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-side-link</span> <span class="attr">item</span> <span class="attr">to</span>=<span class="string">"/test-layout"</span> <span class="attr">exact</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"About"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-side-link</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-side-link</span> <span class="attr">item</span> <span class="attr">to</span>=<span class="string">"/test-layout/toolbar"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Toolbar"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-side-link</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- Page insertion point --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-layout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>An even more compelling example with a complex menu on multiple levels.<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-layout</span> <span class="attr">ref</span>=<span class="string">"layout"</span> <span class="attr">view</span>=<span class="string">"hHr LpR Fff"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"left"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-side-link</span> <span class="attr">item</span> <span class="attr">icon</span>=<span class="string">"content_paste"</span> <span class="attr">to</span>=<span class="string">"/app"</span> <span class="attr">exact</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Dashboard"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-side-link</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">q-side-link</span> <span class="attr">item</span> <span class="attr">icon</span>=<span class="string">"assignment"</span> <span class="attr">to</span>=<span class="string">"/app/registrations"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Registrations"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-side-link</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--</span></div><div class="line">      Notice "indent" Boolean property on QCollapsible</div><div class="line">      which will make the sub-menu be indented.</div><div class="line">      Also, notice the "label" property which defines the</div><div class="line">      name of the menu item which opens up the sub-menu.</div><div class="line">    --&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">q-collapsible</span> <span class="attr">indent</span> <span class="attr">icon</span>=<span class="string">"event"</span> <span class="attr">label</span>=<span class="string">"Event"</span> <span class="attr">opened</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-side-link</span> <span class="attr">item</span> <span class="attr">to</span>=<span class="string">"/app/event"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Competitions"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">q-side-link</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-collapsible</span> <span class="attr">menu</span> <span class="attr">label</span>=<span class="string">"Competitions"</span> <span class="attr">opened</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"scroll"</span> <span class="attr">style</span>=<span class="string">"max-height: 400px"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">q-side-link</span></span></div><div class="line">            <span class="attr">item</span></div><div class="line">            <span class="attr">v-for</span>=<span class="string">"competition in competitions"</span></div><div class="line">            <span class="attr">:key</span>=<span class="string">"competition"</span></div><div class="line">            <span class="attr">:to</span>=<span class="string">"`/app/competitions/$&#123;competition.id&#125;`"</span></div><div class="line">            <span class="attr">exact</span></div><div class="line">          &gt;</div><div class="line">            <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">:label</span>=<span class="string">"competition.name"</span> /&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">q-side-link</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">q-collapsible</span>&gt;</span></div><div class="line"></div><div class="line">      <span class="tag">&lt;<span class="name">q-side-link</span> <span class="attr">item</span> <span class="attr">to</span>=<span class="string">"/app/other-info"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Other Information"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">q-side-link</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-collapsible</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-layout</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Lists and List Items]]></title>
      <url>http://beta.quasar-framework.org/components/lists-and-list-items.html</url>
      <content type="html"><![CDATA[<p>Quasar Lists and List Items are a group of components which can work together to present multiple line items vertically as a single continuous element. They are best suited for displaying similar data types as rows of information, such as a contact list, a playlist, or menu. Each row is called an Item. Items can also be used outside of a List.</p>
<input type="hidden" data-fullpage-demo="grouping/list/email">

<p>Lists can encapsulate Items or Item-like components, for example <a href="/components/collapsible.html">QCollapsible</a> or <a href="/components/layout-side-links.html">QSideLink</a> (latter if setting <code>item</code> property).</p>
<p>List Items have following content areas:</p>
<ul>
<li><strong>left side</strong> and <strong>right side</strong> (usually equipped for supplemental actions represented by icons, avatars, images or letters, but not limited to only these)</li>
<li><strong>main content</strong> which usually is filled with a label (title) and sublabel (subtitle), form components, or anything else for that matter.</li>
</ul>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>We’ll cover each component on its own section later on, but for now, take a look to get a glimpse of how to structure your templates when using Lists.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-list</span> <span class="attr">highlight</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-list-header</span>&gt;</span>Recent chats<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">avatar</span>=<span class="string">"/statics/boy-avatar.png"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>John Doe<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span>Quasar enthusiast<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">icon</span>=<span class="string">"chat_bubble"</span> <span class="attr">color</span>=<span class="string">"green"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">avatar</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"~assets/boy-avatar.png"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"John Doe"</span> <span class="attr">sublabel</span>=<span class="string">"Quasar enthusiast"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span> <span class="attr">icon</span>=<span class="string">"chat_bubble"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item-separator</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-list-header</span>&gt;</span>Previous chats<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">avatar</span>=<span class="string">"/statics/guy-avatar.png"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Jack Doe"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Notice that QItemMain and QItemSide can contain QItemTiles, or for convenience, you can use their own properties to define the content.</p>
<p>Due to how Webpack works in creating the bundle for your App, in some cases you may need to use QItemTile, like for avatars or images. The reason is simple: if you use QItemSide <code>avatar</code> property, you must supply the path to the statics folder and cannot use the <code>assets</code> folder or relative paths. Instead, the latter two can be used with a QItemTile wrapping an <code>&lt;img&gt;</code> HTML tag. Look closely at image paths in the example above (<code>/statics/guy-avata.png</code> vs <code>~assets/boy-avatar.png</code>). Also read about <a href="/guide/app-handling-static-assets.html">App Handling Static Assets</a> to understand how Webpack includes assets into the bundle.</p>
<h2 id="Components"><a href="#Components" class="headerlink" title="Components"></a>Components</h2><p>Below is a list of Quasar components that you can use to define lists and list items:</p>
<ul>
<li>QList (encapsulating QItems and all other List related components)</li>
<li>QListHeader (header of a section in QList)</li>
<li>QItemSeparator (external Item separator/separator)</li>
<li>QItem (encapsulating everything an Item contains)</li>
<li>QItemSide (left or right side)</li>
<li>QItemMain (for main content of an Item)</li>
<li>QItemTile (for individual parts of QItemSide and QItemMain, like label, icon, avatar, image, …)</li>
</ul>
<p><img src="/images/list-and-list-items.svg" alt="Quasar List and List Items" title="Quasar List and List Items"></p>
<h3 id="QList"><a href="#QList" class="headerlink" title="QList"></a>QList</h3><p>QList encapsulates all other components mentioned. It’s not mandatory, but does help with maintaining a good design and can also define some properties that will be applied to all QItems (or QItem-like components) like multiline, separator, link, highlight and so on.</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>striped</code></td>
<td>Boolean</td>
<td>Apply highlight to QItems intermittently, starting with second QItem.</td>
</tr>
<tr>
<td><code>striped-odd</code></td>
<td>Boolean</td>
<td>Apply highlight to QItems intermittently, starting with first QItem.</td>
</tr>
<tr>
<td><code>highlight</code></td>
<td>Boolean</td>
<td>Apply highlight to all QItems. This works only on desktop when user hovers QItems.</td>
</tr>
<tr>
<td><code>link</code></td>
<td>Boolean</td>
<td>Apply highlight and a pointer cursor to all QItems.</td>
</tr>
<tr>
<td><code>dense</code></td>
<td>Boolean</td>
<td>Make QItems dense.</td>
</tr>
<tr>
<td><code>sparse</code></td>
<td>Boolean</td>
<td>Make QItems sparse.</td>
</tr>
<tr>
<td><code>multiline</code></td>
<td>Boolean</td>
<td>Make QItems multiline.</td>
</tr>
<tr>
<td><code>separator</code></td>
<td>Boolean</td>
<td>Make QItems have a separator between them.</td>
</tr>
<tr>
<td><code>inset-separator</code></td>
<td>Boolean</td>
<td>Make QItems have an inset separator between them.</td>
</tr>
<tr>
<td><code>no-border</code></td>
<td>Boolean</td>
<td>Remove the default border around QList.</td>
</tr>
</tbody>
</table>
<h3 id="QListHeader"><a href="#QListHeader" class="headerlink" title="QListHeader"></a>QListHeader</h3><p>Within QList, you can display a section header / title.</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>inset</code></td>
<td>Boolean</td>
<td>Place an inset separator.</td>
</tr>
</tbody>
</table>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-list</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-list-header</span>&gt;</span>Folders<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- insert QItems... --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">q-list-header</span>&gt;</span>Files<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- insert QItems... --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="QItemSeparator"><a href="#QItemSeparator" class="headerlink" title="QItemSeparator"></a>QItemSeparator</h3><p>If you want QItem external separators (there are internal ones too as you can see on QItem’s description later on this page), use the QItemSeparator component. It’s useful also to separate different sections of your QList, like for example, before a QListHeader.</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>inset</code></td>
<td>Boolean</td>
<td>Place an inset separator.</td>
</tr>
</tbody>
</table>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-list</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-list-header</span>&gt;</span>Folders<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- insert QItems... --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">q-item-separator</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">q-list-header</span>&gt;</span>Files<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- insert QItems... --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- and/or --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-list</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">...</span>&gt;</span>...<span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- Inset separator example --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item-separator</span> <span class="attr">inset</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">...</span>&gt;</span>...<span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item-separator</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">...</span>&gt;</span>...<span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item-separator</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-list-header</span>&gt;</span>Files<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">...</span>&gt;</span>...<span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="QItem"><a href="#QItem" class="headerlink" title="QItem"></a>QItem</h3><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>dense</code></td>
<td>Boolean</td>
<td>Make QItem dense (narrow paddings).</td>
</tr>
<tr>
<td><code>sparse</code></td>
<td>Boolean</td>
<td>Make QItem sparse (large paddings).</td>
</tr>
<tr>
<td><code>separator</code></td>
<td>Boolean</td>
<td>Make QItem have a separator between it and previous QItem.</td>
</tr>
<tr>
<td><code>inset-separator</code></td>
<td>Boolean</td>
<td>Make QItem have an inset separator between it and previous QItem.</td>
</tr>
<tr>
<td><code>multiline</code></td>
<td>Boolean</td>
<td>Make QItem multiline. Vertically aligns QItem sides to top. Useful for more than 2-3 lines QItem content.</td>
</tr>
<tr>
<td><code>highlight</code></td>
<td>Boolean</td>
<td>Apply highlight to QItem. Works only on desktop when user hovers it.</td>
</tr>
<tr>
<td><code>link</code></td>
<td>Boolean</td>
<td>Apply highlight and a pointer cursor to QItem.</td>
</tr>
<tr>
<td><code>tag</code></td>
<td>String</td>
<td>Default HTML tag used is ‘div’, but this can be any HTML tag if you need to. Read below for more information.</td>
</tr>
</tbody>
</table>
<p>Also check the next section for more properties and to learn about how you can use your QItem as a Router Link.</p>
<h4 id="Using-QItem-as-a-Router-Link"><a href="#Using-QItem-as-a-Router-Link" class="headerlink" title="Using QItem as a Router Link"></a>Using QItem as a Router Link</h4><p>If you want your QItem to act the same as Vue’s <code>&lt;router-link&gt;</code>, then you can use these additional properties (which work exactly the same as <code>&lt;router-link&gt;</code>):</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>to</code></td>
<td>String / Object</td>
<td>Route to navigate to</td>
</tr>
<tr>
<td><code>exact</code></td>
<td>Boolean</td>
<td>Match the exact route specified (and not also its children) when adding <code>router-link-active</code> CSS class.</td>
</tr>
<tr>
<td><code>append</code></td>
<td>Boolean</td>
<td>Append route definition to current route when navigating.</td>
</tr>
<tr>
<td><code>replace</code></td>
<td>Boolean</td>
<td>Replaces current route with the new one instead of adding it to the window history queue.</td>
</tr>
</tbody>
</table>
<p>For more details on these properties, please refer to the <a href="http://router.vuejs.org/en/api/router-link.html" target="_blank" rel="external">Vue Router documentation</a>.</p>
<h4 id="Render-with-specific-HTML-tag"><a href="#Render-with-specific-HTML-tag" class="headerlink" title="Render with specific HTML tag"></a>Render with specific HTML tag</h4><p>Please refer to the example on how to use the <code>tag</code> property shown below. In this example, we take advantage of the <code>&lt;label&gt;</code> tag that browsers automatically connect to checkboxes (QCheckbox, QToggle) or radio inputs (QRadio). When a <code>&lt;label&gt;</code> is clicked/tapped, then the wrapped checkboxes toggle their state (check / uncheck) and wrapped radios are being selected.<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!--</span></div><div class="line">  We want a click/tap on the whole QItem</div><div class="line">  to toggle the checkbox, so we use tag="label"</div><div class="line">  to make QItem render with &lt;label&gt; tag.</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">q-item</span> <span class="attr">tag</span>=<span class="string">"label"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item-side</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-checkbox</span> <span class="attr">v-model</span>=<span class="string">"checkboxModel"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Notifications<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span>Notify me about updates to apps or games that I downloaded<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="QItemSide"><a href="#QItemSide" class="headerlink" title="QItemSide"></a>QItemSide</h3><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>Use a color from <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>right</code></td>
<td>Boolean</td>
<td>Applies necessary design tweaks for right side of QItem.</td>
</tr>
<tr>
<td><code>icon</code></td>
<td>String</td>
<td>Icon to use. Either use an icon, image, avatar or letter.</td>
</tr>
<tr>
<td><code>image</code></td>
<td>String</td>
<td>URL to image to use (point to statics). Either use an icon, image, avatar or letter.</td>
</tr>
<tr>
<td><code>avatar</code></td>
<td>String</td>
<td>URL to avatar to use (point to statics). Either use an icon, image, avatar or letter.</td>
</tr>
<tr>
<td><code>letter</code></td>
<td>String</td>
<td>One character String to define a letter. Either use an icon, image, avatar or letter.</td>
</tr>
<tr>
<td><code>stamp</code></td>
<td>String</td>
<td>For right side only. One character String to define a letter. Either use an icon, image, avatar or letter.</td>
</tr>
<tr>
<td><code>tag</code></td>
<td>String</td>
<td>Default HTML tag that QItemTile gets rendered with is ‘div’, but this can be any HTML tag if you need to.</td>
</tr>
</tbody>
</table>
<p>Use the icon, image, avatar, letter or stamp properties or, for more control, insert QItemTiles instead. Use only one method or the other.</p>
<h3 id="QItemMain"><a href="#QItemMain" class="headerlink" title="QItemMain"></a>QItemMain</h3><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>label</code></td>
<td>String</td>
<td>Label to use as title.</td>
</tr>
<tr>
<td><code>sublabel</code></td>
<td>String</td>
<td>Label to use as subtitle.</td>
</tr>
<tr>
<td><code>label-lines</code></td>
<td>String / Number</td>
<td>Number of lines the label can span to.</td>
</tr>
<tr>
<td><code>sublabel-lines</code></td>
<td>String / Number</td>
<td>Number of lines the sublabel can span to.</td>
</tr>
<tr>
<td><code>inset</code></td>
<td>Boolean</td>
<td>Useful when QItem has no left side, but you want to align your content as if it had a left side.</td>
</tr>
<tr>
<td><code>tag</code></td>
<td>String</td>
<td>Default HTML tag that QItemTile gets rendered with is ‘div’, but this can be any HTML tag if you need to.</td>
</tr>
</tbody>
</table>
<p>Use the label properties or, for more control, insert QItemTiles to define the label and sublabel. Use only one method or the other.</p>
<h3 id="QItemTile"><a href="#QItemTile" class="headerlink" title="QItemTile"></a>QItemTile</h3><p>QItemTile can be used for more control over the content of the left, right side or main content of QItem.</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>Use a color from <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>icon</code></td>
<td>String</td>
<td>Icon to use. Either use an icon, image, avatar or letter as props.</td>
</tr>
<tr>
<td><code>image</code></td>
<td>Boolean</td>
<td>Encapsulates an image. Its content must be an <code>&lt;img&gt;</code> with <code>src</code> attribute pointing to statics. Either use an icon, image, avatar or letter as props.</td>
</tr>
<tr>
<td><code>avatar</code></td>
<td>Boolean</td>
<td>Encapsulates an avatar image. Its content must be an <code>&lt;img&gt;</code> with <code>src</code> attribute pointing to statics. Either use an icon, image, avatar or letter as props.</td>
</tr>
<tr>
<td><code>letter</code></td>
<td>String</td>
<td>One character String to define a letter. Either use an icon, image, avatar or letter as props.</td>
</tr>
<tr>
<td><code>tag</code></td>
<td>String</td>
<td>Default HTML tag that QItemTile gets rendered with is ‘div’, but this can be any HTML tag if you need to.</td>
</tr>
</tbody>
</table>
<p>There are more props available, but use only these within QItemMain:</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>label</code></td>
<td>String</td>
<td>Encapsulates the label / title of QItem.</td>
</tr>
<tr>
<td><code>sublabel</code></td>
<td>String</td>
<td>Encapsulates the sub-label / sub-title of QItem.</td>
</tr>
<tr>
<td><code>lines</code></td>
<td>String / Number</td>
<td>Number of lines the label/sublacel can span to. Ellipsis are used when overflowing. Use only in conjunction with <code>label</code> and <code>sublabel</code>.</td>
</tr>
</tbody>
</table>
<h2 id="Using-QCollapsible-amp-QSideLink-with-QItems"><a href="#Using-QCollapsible-amp-QSideLink-with-QItems" class="headerlink" title="Using QCollapsible &amp; QSideLink with QItems"></a>Using QCollapsible &amp; QSideLink with QItems</h2><p><a href="/components/collapsible.html">QCollapsible</a> and <a href="/components/layout-side-links.html">QSideLink</a> are QItem wrappers, so you can use them with QItems within a QList. Here are two examples:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!--</span></div><div class="line">  Notice we use QCollapsibles and QItems</div><div class="line">  as direct children of QList.</div><div class="line"></div><div class="line">  We are basically building a menu.</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">q-list</span> <span class="attr">separator</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- collapsible to hide sub-level menu entries --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-collapsible</span> <span class="attr">icon</span>=<span class="string">"inbox"</span> <span class="attr">label</span>=<span class="string">"Inbox"</span> <span class="attr">label</span>=<span class="string">"Where your email is"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">link</span> <span class="attr">to</span>=<span class="string">"/inbox/1"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"mail"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Email 1"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">link</span> <span class="attr">to</span>=<span class="string">"/inbox/2"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"mail"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Email 2"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-collapsible</span> <span class="attr">icon</span>=<span class="string">"favorite"</span> <span class="attr">label</span>=<span class="string">"Favorites"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">link</span> <span class="attr">to</span>=<span class="string">"/inbox/favorites/1"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"mail"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">:label</span>=<span class="string">"Favorite 1"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">to</span>=<span class="string">"/inbox/favorites/2"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"mail"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">:label</span>=<span class="string">"Favorite 2"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-collapsible</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">to</span>=<span class="string">"/inbox/3"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"mail"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Email 3"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-collapsible</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- menu link --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">link</span> <span class="attr">to</span>=<span class="string">"/snoozed"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"schedule"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Snoozed<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- collapsible to hide sub-level menu entries --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-collapsible</span> <span class="attr">icon</span>=<span class="string">"send"</span> <span class="attr">label</span>=<span class="string">"Sent"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">to</span>=<span class="string">"/sent/1"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"mail"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Email 1"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-collapsible</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- menu link --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">link</span> <span class="attr">to</span>=<span class="string">"/trash"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"delete"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Trash<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Another complex example used on one of the sides of a QLayout, describing a menu with QItems, QCollapsible and QSideLinks:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-list</span> <span class="attr">separator</span> <span class="attr">no-border</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">avatar</span>=<span class="string">"/statics/boy-avatar.png"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>John Doe<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span>Administrator<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">q-item-separator</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-list-header</span>&gt;</span>Menu<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">q-side-link</span> <span class="attr">item</span> <span class="attr">icon</span>=<span class="string">"content_paste"</span> <span class="attr">to</span>=<span class="string">"/app"</span> <span class="attr">exact</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Dashboard"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-side-link</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">q-side-link</span> <span class="attr">item</span> <span class="attr">icon</span>=<span class="string">"assignment"</span> <span class="attr">to</span>=<span class="string">"/app/registrations"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Registrations"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-side-link</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!--</span></div><div class="line">    Notice "indent" Boolean property on QCollapsible</div><div class="line">    which will make the sub-menu be indented.</div><div class="line">    Also, notice the "label" property which defines the</div><div class="line">    name of the menu item which opens up the sub-menu.</div><div class="line">  --&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">q-collapsible</span> <span class="attr">indent</span> <span class="attr">icon</span>=<span class="string">"event"</span> <span class="attr">label</span>=<span class="string">"Event"</span> <span class="attr">opened</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-side-link</span> <span class="attr">item</span> <span class="attr">to</span>=<span class="string">"/app/event"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Competitions"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-side-link</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-collapsible</span> <span class="attr">menu</span> <span class="attr">label</span>=<span class="string">"Competitions"</span> <span class="attr">opened</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"scroll"</span> <span class="attr">style</span>=<span class="string">"max-height: 400px"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">q-side-link</span></span></div><div class="line">          <span class="attr">item</span></div><div class="line">          <span class="attr">v-for</span>=<span class="string">"competition in competitions"</span></div><div class="line">          <span class="attr">:key</span>=<span class="string">"competition"</span></div><div class="line">          <span class="attr">:to</span>=<span class="string">"`/app/competitions/$&#123;competition.id&#125;`"</span></div><div class="line">          <span class="attr">exact</span></div><div class="line">        &gt;</div><div class="line">          <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">:label</span>=<span class="string">"competition.name"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">q-side-link</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-collapsible</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">q-side-link</span> <span class="attr">item</span> <span class="attr">to</span>=<span class="string">"/app/other-info"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Other Information"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-side-link</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-collapsible</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="More-Examples"><a href="#More-Examples" class="headerlink" title="More Examples"></a>More Examples</h2><h3 id="Email-list"><a href="#Email-list" class="headerlink" title="Email list"></a>Email list</h3><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-list</span> <span class="attr">highlight</span> <span class="attr">inset-separator</span> <span class="attr">style</span>=<span class="string">"max-width: 400px"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">avatar</span>=<span class="string">"/statics/boy-avatar.png"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Brunch this weekend? Brunch this weekend? Brunch this weekend?"</span> <span class="attr">label-lines</span>=<span class="string">"1"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span> <span class="attr">stamp</span>=<span class="string">"1 min"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">multiline</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">avatar</span>=<span class="string">"/statics/boy-avatar.png"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span></span></div><div class="line">      <span class="attr">label</span>=<span class="string">"Brunch this weekend? Brunch this weekend? Brunch this weekend?"</span></div><div class="line">      <span class="attr">label-lines</span>=<span class="string">"1"</span></div><div class="line">      <span class="attr">sublabel</span>=<span class="string">"John Doe John Doe John Doe John Doe John Doe John Doe John Doe John Doe John Doe"</span></div><div class="line">      <span class="attr">sublabel-lines</span>=<span class="string">"2"</span></div><div class="line">    /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span> <span class="attr">stamp</span>=<span class="string">"1 week&lt;br&gt;ago"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">multiline</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">avatar</span>=<span class="string">"/statics/boy-avatar.png"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span></span></div><div class="line">      <span class="attr">label</span>=<span class="string">"Brunch this weekend? Brunch this weekend? Brunch this weekend?"</span></div><div class="line">      <span class="attr">label-lines</span>=<span class="string">"1"</span></div><div class="line">      <span class="attr">sublabel</span>=<span class="string">"John Doe John Doe John Doe John Doe John Doe John Doe John Doe John Doe John Doe"</span></div><div class="line">    /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span> <span class="attr">stamp</span>=<span class="string">"10 min"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">multiline</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">avatar</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"~assets/boy-avatar.png"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Brunch <span class="tag">&lt;<span class="name">span</span>&gt;</span>5<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span> <span class="attr">lines</span>=<span class="string">"2"</span>&gt;</span></div><div class="line">        John Doe John Doe John Doe John Doe John Doe John Doe</div><div class="line">        John Doe John Doe John Doe John Doe John Doe John Doe</div><div class="line">        John Doe John Doe John Doe John Doe</div><div class="line">      <span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">stamp</span>&gt;</span>10 min<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">multiline</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">avatar</span>=<span class="string">"/statics/boy-avatar.png"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span> <span class="attr">lines</span>=<span class="string">"1"</span>&gt;</span>Brunch this weekend? Yeah, this weekend. Really. This one.<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span> <span class="attr">lines</span>=<span class="string">"2"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>John Doe<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        -- I'll be in your neighborhood doing errands this</div><div class="line">        weekend. Do you want to grab brunch?</div><div class="line">      <span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">stamp</span>&gt;</span>2 years<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">icon</span>=<span class="string">"mail"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Right-Side-with-Components"><a href="#Right-Side-with-Components" class="headerlink" title="Right Side with Components"></a>Right Side with Components</h3><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-list</span> <span class="attr">inset-separator</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">avatar</span>=<span class="string">"/statics/boy-avatar.png"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Brunch this weekend?"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span> <span class="attr">icon</span>=<span class="string">"more_vert"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-popover</span> <span class="attr">ref</span>=<span class="string">"popover"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">q-list</span> <span class="attr">link</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">q-item</span> @<span class="attr">click</span>=<span class="string">"$refs.popover.close()"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Reply"</span> /&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">q-item</span> @<span class="attr">click</span>=<span class="string">"$refs.popover.close()"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Forward"</span> /&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">q-item</span> @<span class="attr">click</span>=<span class="string">"$refs.popover.close()"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Delete"</span> /&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">q-popover</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">avatar</span>=<span class="string">"/statics/boy-avatar.png"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Brunch this weekend?"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-chip</span> <span class="attr">square</span> <span class="attr">color</span>=<span class="string">"primary"</span> <span class="attr">class</span>=<span class="string">"shadow-2"</span>&gt;</span>10k<span class="tag">&lt;/<span class="name">q-chip</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">avatar</span>=<span class="string">"/statics/boy-avatar.png"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Brunch this weekend?"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">stamp</span>&gt;</span>10 min ago<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"text-amber"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">icon</span>=<span class="string">"star"</span> <span class="attr">v-for</span>=<span class="string">"n in 2"</span> <span class="attr">:key</span>=<span class="string">"n"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Chat-List"><a href="#Chat-List" class="headerlink" title="Chat List"></a>Chat List</h3><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-list</span> <span class="attr">highlight</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-list-header</span>&gt;</span>Recent chats<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">avatar</span>=<span class="string">"/statics/boy-avatar.png"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"John Doe"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">icon</span>=<span class="string">"chat_bubble"</span> <span class="attr">color</span>=<span class="string">"green"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">avatar</span>=<span class="string">"/statics/boy-avatar.png"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"John Doe"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span> <span class="attr">icon</span>=<span class="string">"chat_bubble"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item-separator</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-list-header</span>&gt;</span>Previous chats<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">avatar</span>=<span class="string">"/statics/guy-avatar.png"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Jack Doe"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></div></pre></td></tr></table></figure>
<p>One more example:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-list</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"star"</span> <span class="attr">color</span>=<span class="string">"yellow"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"John Joe"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">avatar</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"~assets/boy-avatar.png"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item-separator</span> <span class="attr">inset</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">letter</span>=<span class="string">"D"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"John Joe"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span> <span class="attr">avatar</span>=<span class="string">"/statics/boy-avatar.png"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">letter</span>=<span class="string">"J"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Jim Jefferies"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span> <span class="attr">avatar</span>=<span class="string">"/statics/linux-avatar.png"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="Folders-and-Files"><a href="#Folders-and-Files" class="headerlink" title="Folders and Files"></a>Folders and Files</h3><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-list</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-list-header</span> <span class="attr">inset</span>&gt;</span>Folders<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">v-for</span>=<span class="string">"n in 3"</span> <span class="attr">:key</span>=<span class="string">"n"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"folder"</span> <span class="attr">inverted</span> <span class="attr">color</span>=<span class="string">"grey-6"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Photos<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span>February 22, 2016<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span> <span class="attr">icon</span>=<span class="string">"info"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item-separator</span> <span class="attr">inset</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-list-header</span> <span class="attr">inset</span>&gt;</span>Files<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">v-for</span>=<span class="string">"n in 3"</span> <span class="attr">:key</span>=<span class="string">"n"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"assignment"</span> <span class="attr">inverted</span> <span class="attr">color</span>=<span class="string">"grey-6"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Vacation<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span>February 22, 2016<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span> <span class="attr">icon</span>=<span class="string">"info"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Settings"><a href="#Settings" class="headerlink" title="Settings"></a>Settings</h3><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-list</span> <span class="attr">link</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-list-header</span>&gt;</span>User controls<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Content filtering<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span>Set the content filtering level to restrict apps that can be downloaded<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span>Require password for purchase or use password to restrict purchase<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item-separator</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-list-header</span>&gt;</span>General<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">tag</span>=<span class="string">"label"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-checkbox</span> <span class="attr">v-model</span>=<span class="string">"checked"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Notifications<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span>Notify me about updates to apps or games that I downloaded<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">tag</span>=<span class="string">"label"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-checkbox</span> <span class="attr">v-model</span>=<span class="string">"checked"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Sound<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span>Auto-update apps at anytime. Data charges may apply<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">tag</span>=<span class="string">"label"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-checkbox</span> <span class="attr">v-model</span>=<span class="string">"checked"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Auto-add widgets<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span>Automatically add home screen widgets<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Embedding-Form-Components"><a href="#Embedding-Form-Components" class="headerlink" title="Embedding Form Components"></a>Embedding Form Components</h3><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-list</span> <span class="attr">link</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-list-header</span>&gt;</span>Radios<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">tag</span>=<span class="string">"label"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-radio</span> <span class="attr">v-model</span>=<span class="string">"option"</span> <span class="attr">val</span>=<span class="string">"opt1"</span>&gt;</span><span class="tag">&lt;/<span class="name">q-radio</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Option 1"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">tag</span>=<span class="string">"label"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-radio</span> <span class="attr">color</span>=<span class="string">"purple"</span> <span class="attr">v-model</span>=<span class="string">"option"</span> <span class="attr">val</span>=<span class="string">"opt2"</span>&gt;</span><span class="tag">&lt;/<span class="name">q-radio</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Option 2<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span>Allows notifications<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">tag</span>=<span class="string">"label"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-radio</span> <span class="attr">color</span>=<span class="string">"red"</span> <span class="attr">v-model</span>=<span class="string">"option"</span> <span class="attr">val</span>=<span class="string">"opt3"</span>&gt;</span><span class="tag">&lt;/<span class="name">q-radio</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Option 3<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span> <span class="attr">lines</span>=<span class="string">"3"</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">q-item-separator</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-list-header</span>&gt;</span>Toggles<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">tag</span>=<span class="string">"label"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Events and reminders"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-toggle</span> <span class="attr">v-model</span>=<span class="string">"checked"</span>&gt;</span><span class="tag">&lt;/<span class="name">q-toggle</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">tag</span>=<span class="string">"label"</span> <span class="attr">multiline</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Events and reminders<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span>Lorem ipsum<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-toggle</span> <span class="attr">v-model</span>=<span class="string">"checked"</span> <span class="attr">color</span>=<span class="string">"purple"</span>&gt;</span><span class="tag">&lt;/<span class="name">q-toggle</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">tag</span>=<span class="string">"label"</span> <span class="attr">multiline</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Events and reminders<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span> <span class="attr">lines</span>=<span class="string">"3"</span>&gt;</span></div><div class="line">        Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed</div><div class="line">        do eiusmod tempor incididunt ut labore et dolore magna aliqua.</div><div class="line">        Ut enim ad minim veniam, quis nostrud exercitation ullamco</div><div class="line">        laboris nisi ut aliquip ex ea commodo consequat. Duis aute</div><div class="line">      <span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-toggle</span> <span class="attr">v-model</span>=<span class="string">"checked"</span> <span class="attr">color</span>=<span class="string">"red"</span>&gt;</span><span class="tag">&lt;/<span class="name">q-toggle</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">q-item-separator</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-list-header</span>&gt;</span>Selects<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"supervisor_account"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-select</span> <span class="attr">class</span>=<span class="string">"full-width"</span> <span class="attr">v-model</span>=<span class="string">"select"</span> <span class="attr">:options</span>=<span class="string">"selectOptions"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"supervisor_account"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-select</span> <span class="attr">class</span>=<span class="string">"full-width"</span> <span class="attr">multiple</span> <span class="attr">checkbox</span> <span class="attr">v-model</span>=<span class="string">"multipleSelect"</span> <span class="attr">:options</span>=<span class="string">"selectOptions"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">q-item-separator</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-list-header</span>&gt;</span>Ranges<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"volume_down"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-slider</span> <span class="attr">v-model</span>=<span class="string">"slider"</span> <span class="attr">:min</span>=<span class="string">"0"</span> <span class="attr">:max</span>=<span class="string">"50"</span> <span class="attr">label</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span> <span class="attr">icon</span>=<span class="string">"volume_up"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"volume_down"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-slider</span> <span class="attr">v-model</span>=<span class="string">"slider"</span> <span class="attr">:min</span>=<span class="string">"0"</span> <span class="attr">:max</span>=<span class="string">"50"</span> <span class="attr">label</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span> <span class="attr">icon</span>=<span class="string">"volume_up"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"euro_symbol"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-range</span> <span class="attr">v-model</span>=<span class="string">"range"</span> <span class="attr">:min</span>=<span class="string">"0"</span> <span class="attr">:max</span>=<span class="string">"50"</span> <span class="attr">label</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Movies-List"><a href="#Movies-List" class="headerlink" title="Movies List"></a>Movies List</h3><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-list</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-list-header</span>&gt;</span>Movies<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">image</span>=<span class="string">"/statics/mountains.jpg"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">label</span>=<span class="string">"Mountains Documentary"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span> <span class="attr">icon</span>=<span class="string">"movie"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">image</span>=<span class="string">"/statics/mountains.jpg"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Mountains Documentary<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span>For passionates only<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span> <span class="attr">icon</span>=<span class="string">"movie"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">image</span>=<span class="string">"/statics/mountains.jpg"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Mountains Documentary<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span> <span class="attr">lines</span>=<span class="string">"3"</span>&gt;</span></div><div class="line">        For passionates only For passionates only For passionates only For passionates only For passionates only</div><div class="line">      <span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span> <span class="attr">icon</span>=<span class="string">"movie"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Phonebook-List"><a href="#Phonebook-List" class="headerlink" title="Phonebook List"></a>Phonebook List</h3><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-list</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"phone"</span> <span class="attr">color</span>=<span class="string">"primary"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>(650) 555 - 1234<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span>Mobile<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span> <span class="attr">icon</span>=<span class="string">"chat_bubble"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">inset</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>(650) 555 - 1234<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span>Mobile<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span> <span class="attr">icon</span>=<span class="string">"chat_bubble"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item-separator</span> <span class="attr">inset</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"mail"</span> <span class="attr">color</span>=<span class="string">"primary"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>john@doe.com<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span>Personal<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span> <span class="attr">inset</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>john@doe.com<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span>Personal<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Loading]]></title>
      <url>http://beta.quasar-framework.org/components/loading.html</url>
      <content type="html"><![CDATA[<p>Loading is a feature that you can use to display an overlay with a spinner on top of your App’s content to inform the user that a background operation is taking place. No need to add complex logic within your Pages for global background operations.</p>
<input type="hidden" data-fullpage-demo="progress/loading">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>Loading uses a delay (500ms) to display itself so that quick operations won’t make the screen flicker. This happens by showing and then quickly hiding the progress spinner without the user having a chance to see what happens. The delay before showing it eliminates confusion.</p>
<h3 id="Show-Loading"><a href="#Show-Loading" class="headerlink" title="Show Loading"></a>Show Loading</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  Loading,</div><div class="line"></div><div class="line">  <span class="comment">// optional!, for example below</span></div><div class="line">  <span class="comment">// with custom spinner</span></div><div class="line">  QSpinnerGears</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="comment">// default options</span></div><div class="line">Loading.show()</div><div class="line"></div><div class="line"><span class="comment">// with a custom delay</span></div><div class="line">Loading.show(&#123;</div><div class="line">  delay: <span class="number">300</span> <span class="comment">// milliseconds</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// customizable (all props available)</span></div><div class="line">Loading.show(&#123;</div><div class="line">  spinner: QSpinnerGears,</div><div class="line">  message: <span class="string">'Some message'</span>,</div><div class="line">  messageColor: <span class="string">'#00ff00'</span>,</div><div class="line">  spinnerSize: <span class="number">250</span>, <span class="comment">// in pixels</span></div><div class="line">  spinnerColor: <span class="string">'#f034a3'</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="Hide-Loading"><a href="#Hide-Loading" class="headerlink" title="Hide Loading"></a>Hide Loading</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Loading &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line">Loading.hide()</div></pre></td></tr></table></figure>
<h3 id="Check-Status"><a href="#Check-Status" class="headerlink" title="Check Status"></a>Check Status</h3><p>Checking whether the Loading is active is easy:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Loading &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line">(<span class="built_in">Boolean</span>) Loading.isActive()</div></pre></td></tr></table></figure>
<h2 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h2><p>Since this is not a Vue component, events are handled through Quasar’s <a href="/components/global-event-bus.html">Global Event Bus</a>. There is one such event triggered when “Loading” is showing or hiding: <code>app:loading</code>. It is triggered with one Boolean parameter which is <code>true</code> when Loading is shown and <code>false</code> otherwise.</p>
<p>Example of capturing the event on the Global Event Bus:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Events &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line">Events.$on(<span class="string">'app:loading'</span>, state =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`Loading has become <span class="subst">$&#123;state ? 'visible' : 'hidden'&#125;</span>`</span>)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// or in a Vue component:</span></div><div class="line"><span class="keyword">this</span>.$q.events.$on(<span class="string">'app:loading'</span>, state =&gt; &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`Loading has become <span class="subst">$&#123;state ? 'visible' : 'hidden'&#125;</span>`</span>)</div><div class="line">&#125;)</div><div class="line"><span class="comment">// in this case, remember to unregister your handler when</span></div><div class="line"><span class="comment">// the Vue component gets destroyed (use `beforeDestroy()` Vue lifecycle hook). See Global Event Bus for more information.</span></div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Material Ripples]]></title>
      <url>http://beta.quasar-framework.org/components/material-ripples.html</url>
      <content type="html"><![CDATA[<p>Material Ripple effect can easily be added to any DOM element (or component) through the <code>v-ripple</code> Quasar directive. Following these steps:</p>
<ol>
<li><p>Make sure your DOM element or component has CSS <code>position: relative</code> or Quasar CSS helper class <code>relative-position</code> attached to it.</p>
</li>
<li><p>Add <code>v-ripple</code> directive to it.</p>
</li>
</ol>
<p>The color of the ripples are determined by the text color (CSS ‘color’ prop) of the DOM element.</p>
<input type="hidden" data-fullpage-demo="style-and-identity/material-ripples">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"relative-position"</span> <span class="attr">v-ripple</span>&gt;</span></div><div class="line">  ....</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Trigger-only-for-one-Quasar-theme"><a href="#Trigger-only-for-one-Quasar-theme" class="headerlink" title="Trigger only for one Quasar theme"></a>Trigger only for one Quasar theme</h2><p>For this you need to specify <code>mat</code> or <code>ios</code> directive modifiers like this:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Only for Quasar Material theme --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-ripple.mat</span> <span class="attr">class</span>=<span class="string">"relative-position"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Only for Quasar iOS theme --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-ripple.ios</span> <span class="attr">class</span>=<span class="string">"relative-position"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Dynamic-Disable"><a href="#Dynamic-Disable" class="headerlink" title="Dynamic Disable"></a>Dynamic Disable</h2><p>If for some reason you have a scenario where the ripples need to be disabled, then you can assign a Boolean as value for the directive.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span></span></div><div class="line">    <span class="attr">v-ripple</span>=<span class="string">"rippleEnabled"</span></div><div class="line">    <span class="attr">class</span>=<span class="string">"relative-position"</span></div><div class="line">  &gt;</div><div class="line">    <span class="tag">&lt;<span class="name">q-checkbox</span></span></div><div class="line">      <span class="attr">v-model</span>=<span class="string">"rippleEnabled"</span></div><div class="line">      <span class="attr">label</span>=<span class="string">"Enable Ripples"</span></div><div class="line">    /&gt;</div><div class="line">    .....</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  data () &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      rippleEnabled: <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>When your Vue scope variable <code>rippleEnabled</code> becomes Boolean <code>false</code> then the ripple will be disabled.<br>You can also combine this with the <code>mat</code> and <code>ios</code> modifiers.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Modal]]></title>
      <url>http://beta.quasar-framework.org/components/modal.html</url>
      <content type="html"><![CDATA[<p>The Quasar Modal component is a UI overlay, which offers extended screen space to allow the user to get more work done. Modals are used for such things as login or signup dialogs, for message composition windows or extended option selections, like offering a list of users to be friends with.</p>
<input type="hidden" data-fullpage-demo="popups/modal">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>Below you’ll find the code to a very basic modal:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-modal</span> <span class="attr">ref</span>=<span class="string">"basicModal"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Basic Modal<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"$refs.basicModal.close()"</span>&gt;</span>Close<span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-modal</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Modals are responsive to the width of the window (see demo on a desktop and resize browser window). Sometimes you need to always have a Modal maximized or minimized regardless of window width, so to do this, Quasar offers the <code>minimized</code> and <code>maximized</code> props:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-modal</span> <span class="attr">maximized</span>&gt;</span></div><div class="line">  ...</div><div class="line"><span class="tag">&lt;/<span class="name">q-modal</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>content-css</code></td>
<td>Object</td>
<td>Applies CSS style Object to Modal container.</td>
</tr>
<tr>
<td><code>content-classes</code></td>
<td>Object or String</td>
<td>Classes to apply to Modal inner content.</td>
</tr>
<tr>
<td><code>transition</code></td>
<td>String</td>
<td>Vue transition to use. Quasar comes with a <code>q-modal</code> transition out of the box. But you can write your own Vue transitions using CSS and use them.</td>
</tr>
<tr>
<td><code>noBackdropDismiss</code></td>
<td>Boolean</td>
<td>Disable Modal dismissal by clicking/tapping on backdrop.</td>
</tr>
<tr>
<td><code>noEscDismiss</code></td>
<td>Boolean</td>
<td>Disable Modal dismissal by hitting Escape key.</td>
</tr>
<tr>
<td><code>position</code></td>
<td>String</td>
<td>Stick Modal to one of the screen edges (<code>top</code>, <code>right</code>, <code>bottom</code>, <code>left</code>).</td>
</tr>
<tr>
<td><code>position-classes</code></td>
<td>String</td>
<td>Space delimited CSS classes that overwrite the default ‘items-center justify-center’ classes. Gets overridden by <code>position</code> if present.</td>
</tr>
<tr>
<td><code>minimized</code></td>
<td>Boolean</td>
<td>Always minimized regardless of screen width.</td>
</tr>
<tr>
<td><code>maximized</code></td>
<td>Boolean</td>
<td>Always maximized regardless of screen width.</td>
</tr>
<tr>
<td><code>enterClass</code></td>
<td>String</td>
<td>enter transition class name</td>
</tr>
<tr>
<td><code>leaveClass</code></td>
<td>String</td>
<td>leave transition class name</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Methods"><a href="#Vue-Methods" class="headerlink" title="Vue Methods"></a>Vue Methods</h2><table>
<thead>
<tr>
<th>Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>open</code></td>
<td>Open Modal. Takes one optional Function parameter to trigger after Modal is opened.</td>
</tr>
<tr>
<td><code>close</code></td>
<td>Close Modal. Takes one optional Function parameter to trigger after Modal is closed.</td>
</tr>
<tr>
<td><code>toggle</code></td>
<td>Toggle open/close Modal state. Takes one optional Function parameter to trigger after Modal is toggled.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Event Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@open</code></td>
<td>Triggered right after Modal is opened.</td>
</tr>
<tr>
<td><code>@close</code></td>
<td>Triggered right after Modal is closed.</td>
</tr>
<tr>
<td><code>@escape-key</code></td>
<td>Triggered if the Modal is dismissed with the Escape key on desktops.</td>
</tr>
</tbody>
</table>
<h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><h3 id="Capturing-Events"><a href="#Capturing-Events" class="headerlink" title="Capturing Events"></a>Capturing Events</h3><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-modal</span></span></div><div class="line">  @<span class="attr">open</span>=<span class="string">"notify('open')"</span></div><div class="line">  @<span class="attr">escape-key</span>=<span class="string">"notify('escape-key')"</span></div><div class="line">  @<span class="attr">close</span>=<span class="string">"notify('close')"</span></div><div class="line">&gt;</div><div class="line">  ...</div><div class="line"><span class="tag">&lt;/<span class="name">q-modal</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Styling-Modal"><a href="#Styling-Modal" class="headerlink" title="Styling Modal"></a>Styling Modal</h3><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-modal</span> <span class="attr">:content-css</span>=<span class="string">"&#123;padding: '50px'&#125;"</span>&gt;</span></div><div class="line">  ...</div><div class="line"><span class="tag">&lt;/<span class="name">q-modal</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Sticking-Modal-to-an-Edge"><a href="#Sticking-Modal-to-an-Edge" class="headerlink" title="Sticking Modal to an Edge"></a>Sticking Modal to an Edge</h3><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-modal</span> <span class="attr">position</span>=<span class="string">"left"</span>&gt;</span></div><div class="line">  ...</div><div class="line"><span class="tag">&lt;/<span class="name">q-modal</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Modal-with-Layout"><a href="#Modal-with-Layout" class="headerlink" title="Modal with Layout"></a>Modal with Layout</h3><p>When making layout inside a modal, Quasar has a special component called <strong>QModalLayout</strong> (described in next section), which takes care of any needed structure.</p>
<blockquote>
<p>Do <strong>NOT</strong> use QLayout inside a QModal. Instead, use the simplified QModalLayout.</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-modal</span> <span class="attr">ref</span>=<span class="string">"layoutModal"</span> <span class="attr">:content-css</span>=<span class="string">"&#123;minWidth: '80vw', minHeight: '80vh'&#125;"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-modal-layout</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-toolbar</span> <span class="attr">slot</span>=<span class="string">"header"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">flat</span> @<span class="attr">click</span>=<span class="string">"$refs.layoutModal.close()"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"keyboard_arrow_left"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"q-toolbar-title"</span>&gt;</span></div><div class="line">        Header</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-toolbar</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">q-toolbar</span> <span class="attr">slot</span>=<span class="string">"header"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-search</span> <span class="attr">inverted</span> <span class="attr">v-model</span>=<span class="string">"search"</span> <span class="attr">color</span>=<span class="string">"none"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-toolbar</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">q-toolbar</span> <span class="attr">slot</span>=<span class="string">"footer"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"q-toolbar-title"</span>&gt;</span></div><div class="line">        Footer</div><div class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-toolbar</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layout-padding"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Modal<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"></div><div class="line">      <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"$refs.layoutModal.close()"</span>&gt;</span>Close<span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"caption"</span> <span class="attr">v-for</span>=<span class="string">"n in 15"</span>&gt;</span>This is a Modal presenting a Layout.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-modal-layout</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-modal</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="QModalLayout"><a href="#QModalLayout" class="headerlink" title="QModalLayout"></a>QModalLayout</h2><p>QModalLayout has two slots (<code>header</code> and <code>footer</code>) and the following properties which can be either String, Object or Array:</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>header-style</code></td>
<td>Style applied to header.</td>
</tr>
<tr>
<td><code>header-class</code></td>
<td>CSS classes applied to header.</td>
</tr>
<tr>
<td><code>content-style</code></td>
<td>Style applied to content (between header and footer).</td>
</tr>
<tr>
<td><code>content-class</code></td>
<td>CSS classes applied to content (between header and footer).</td>
</tr>
<tr>
<td><code>footer-style</code></td>
<td>Style applied to footer.</td>
</tr>
<tr>
<td><code>footer-class</code></td>
<td>CSS classes applied to footer.</td>
</tr>
</tbody>
</table>
<p>Example:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-modal</span> <span class="attr">.....</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-modal-layout</span></span></div><div class="line">    <span class="attr">header-style</span>=<span class="string">"min-height: 100px"</span></div><div class="line">    <span class="attr">content-class</span>=<span class="string">"&#123;'bg-primary': isPrimary, 'some-class': someBoolean&#125;"</span></div><div class="line">    <span class="attr">footer-class</span>=<span class="string">"bg-primary some-class"</span></div><div class="line">    <span class="attr">footer-style</span>=<span class="string">"&#123;fontSize: '24px', fontWeight: 'bold'&#125;"</span></div><div class="line">  &gt;</div><div class="line">    <span class="comment">&lt;!--</span></div><div class="line">      inject header and/or footer slots here</div><div class="line">      examples:</div><div class="line">          1. &lt;div slot="header"&gt;...&lt;/div&gt;</div><div class="line">          2. &lt;q-toolbar slot="header"&gt;...&lt;/q-toolbar&gt;</div><div class="line">    --&gt;</div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="comment">&lt;!--</span></div><div class="line">      all other elements not using header or footer slot</div><div class="line">      is considered content</div><div class="line">    --&gt;</div><div class="line">    ....</div><div class="line">  <span class="tag">&lt;/<span class="name">q-modal-layout</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-modal</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Option Group]]></title>
      <url>http://beta.quasar-framework.org/components/option-group.html</url>
      <content type="html"><![CDATA[<p>The Quasar Option Group component is a helper component, which allows you to better control the grouping of binary (as in on or off, true or false, 1 or 0) form input components like checkboxes, radios or toggles. A good usage for this component is for offering the user a set of options or settings to turn on and off, and thus the name of the component.</p>
<input type="hidden" data-fullpage-demo="forms/option-group">

<p>Works well with <a href="/components/field.html">QField</a> for additional functionality such as a helper, error message placeholder and many others.</p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>Example on a group of checkboxes:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-option-group</span></span></div><div class="line">    <span class="attr">color</span>=<span class="string">"secondary"</span></div><div class="line">    <span class="attr">type</span>=<span class="string">"checkbox"</span></div><div class="line">    <span class="attr">v-model</span>=<span class="string">"group"</span></div><div class="line">    <span class="attr">:options</span>=<span class="string">"[</span></div><div class="line">      &#123; label: 'Option 1', value: 'op1' &#125;,</div><div class="line">      &#123; label: 'Option 2', value: 'op2' &#125;,</div><div class="line">      &#123; label: 'Option 3', value: 'op3' &#125;</div><div class="line">    ]"</div><div class="line">  /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  data () &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="comment">// `v-model` binded to `group`,</span></div><div class="line">      <span class="comment">// which must be an array for checkboxes and toggles</span></div><div class="line">      group: [<span class="string">'opt1'</span>]</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Example on a group of radios:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-option-group</span></span></div><div class="line">    <span class="attr">color</span>=<span class="string">"secondary"</span></div><div class="line">    <span class="attr">type</span>=<span class="string">"radio"</span></div><div class="line">    <span class="attr">v-model</span>=<span class="string">"group"</span></div><div class="line">    <span class="attr">:options</span>=<span class="string">"[</span></div><div class="line">      &#123; label: 'Option 1', value: 'op1' &#125;,</div><div class="line">      &#123; label: 'Option 2', value: 'op2' &#125;,</div><div class="line">      &#123; label: 'Option 3', value: 'op3' &#125;</div><div class="line">    ]"</div><div class="line">  /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  data () &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="comment">// `v-model` binded to `group`,</span></div><div class="line">      <span class="comment">// which must be a String when using radios</span></div><div class="line">      group: <span class="string">'opt1'</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><p>Supports <code>v-model</code>, which is required. For “radio” type it must be a String, otherwise (“checkbox” or “toggle” type) your scope variable binded to <code>v-model</code> must be an Array.</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>type</code></td>
<td>String</td>
<td>The type of input component to be used. The default is <code>radio</code>. The other choices are <code>checkbox</code> and <code>toggle</code>.</td>
</tr>
<tr>
<td><code>options</code></td>
<td>Array</td>
<td>An array of objects with <code>value</code> and <code>label</code> properties. The binary components will be created according to this array.</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>One from <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>left-label</code></td>
<td>Boolean</td>
<td>When set to <code>true</code>, the labels will be put on the left side.</td>
</tr>
<tr>
<td><code>inline</code></td>
<td>Boolean</td>
<td>Adjusts the display of the binary components fill out the row, instead of being stacked vertically.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>When set to <code>true</code>, the binary components are not selectable thus cannot change your <code>v-model</code>.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Vue Event</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@focus</code></td>
<td>Fired when the component gets focus.</td>
</tr>
<tr>
<td><code>@blur</code></td>
<td>Fired when the component loses focus.</td>
</tr>
</tbody>
</table>
<h2 id="Other-Examples"><a href="#Other-Examples" class="headerlink" title="Other Examples"></a>Other Examples</h2><p>A group of radios with different colors.<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-option-group</span></span></div><div class="line">  <span class="attr">type</span>=<span class="string">"radio"</span></div><div class="line">  <span class="attr">v-model</span>=<span class="string">"group"</span></div><div class="line">  <span class="attr">:options</span>=<span class="string">"[</span></div><div class="line">    &#123; label: 'Option 1', value: 'op1' &#125;,</div><div class="line">    &#123; label: 'Option 2', value: 'op2', color: 'secondary' &#125;,</div><div class="line">    &#123; label: 'Option 3', value: 'op3', color: 'amber' &#125;</div><div class="line">  ]"</div><div class="line">/&gt;</div></pre></td></tr></table></figure></p>
<p>And a group of toggles, but not stacked vertically when possible. We add <code>inline</code> Boolean property.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-option-group</span></span></div><div class="line">  <span class="attr">inline</span></div><div class="line">  <span class="attr">type</span>=<span class="string">"toggle"</span></div><div class="line">  <span class="attr">v-model</span>=<span class="string">"group"</span></div><div class="line">  <span class="attr">:options</span>=<span class="string">"[</span></div><div class="line">    &#123; label: 'Option 1', value: 'op1' &#125;,</div><div class="line">    &#123; label: 'Option 2', value: 'op2' &#125;,</div><div class="line">    &#123; label: 'Option 3', value: 'op3' &#125;</div><div class="line">  ]"</div><div class="line">/&gt;</div></pre></td></tr></table></figure>
<p>You would normally also add this component inside a <a href="/components/field.html">QField</a> component as shown below.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-field</span></span></div><div class="line">  <span class="attr">icon</span>=<span class="string">"cloud"</span></div><div class="line">  <span class="attr">helper</span>=<span class="string">"Choose your option"</span></div><div class="line">  <span class="attr">label</span>=<span class="string">"Pick something"</span></div><div class="line">  <span class="attr">:error</span>=<span class="string">"hasError"</span></div><div class="line">  <span class="attr">error-label</span>=<span class="string">"Select at least one option"</span></div><div class="line">&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">q-option-group</span></span></div><div class="line">    <span class="attr">type</span>=<span class="string">"radio"</span></div><div class="line">    <span class="attr">v-model</span>=<span class="string">"group"</span></div><div class="line">    <span class="attr">:options</span>=<span class="string">"[</span></div><div class="line">      &#123; label: 'Option 1', value: 'op1' &#125;,</div><div class="line">      &#123; label: 'Option 2', value: 'op2' &#125;,</div><div class="line">      &#123; label: 'Option 3', value: 'op3' &#125;</div><div class="line">    ]"</div><div class="line">  /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">q-field</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Other CSS Helper Classes]]></title>
      <url>http://beta.quasar-framework.org/components/other-helper-classes.html</url>
      <content type="html"><![CDATA[<p>There are a lot of CSS classes that you can use while writing your Vue templates. Very handy to ease the complexity of your VueModels and templates.</p>
<p>The list below is not complete. Also check the other CSS documentation pages like Typography, Visibility, Shadows, Positioning.</p>
<h2 id="Mouse-Related"><a href="#Mouse-Related" class="headerlink" title="Mouse Related"></a>Mouse Related</h2><table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>non-selectable</code></td>
<td>User won’t be able to select DOM node along with its text</td>
</tr>
<tr>
<td><code>scroll</code></td>
<td>Applies CSS tweaks to make scroll work at its best on ALL platforms</td>
</tr>
<tr>
<td><code>no-scroll</code></td>
<td>Hides scrollbars on the DOM node</td>
</tr>
<tr>
<td><code>no-pointer-events</code></td>
<td>DOM element does not become a target of mouse events - clicks, hover and so on</td>
</tr>
<tr>
<td><code>all-pointer-events</code></td>
<td>The opposite of <code>no-pointer-events</code></td>
</tr>
<tr>
<td><code>cursor-pointer</code></td>
<td>Change mouse pointer on DOM element to look as if on a clickable link</td>
</tr>
</tbody>
</table>
<h2 id="Size-Related"><a href="#Size-Related" class="headerlink" title="Size Related"></a>Size Related</h2><table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>fit</code></td>
<td>Width and Height is set to 100%</td>
</tr>
<tr>
<td><code>full-height</code></td>
<td>Height is set to 100%</td>
</tr>
<tr>
<td><code>full-width</code></td>
<td>Width is set to 100%</td>
</tr>
<tr>
<td><code>window-height</code></td>
<td>Height is set to 100vh with top and bottom margins 0</td>
</tr>
<tr>
<td><code>window-width</code></td>
<td>Width is set to 100vw with left and right margins 0</td>
</tr>
<tr>
<td><code>block</code></td>
<td>Sets <code>display</code> property set to <code>block</code></td>
</tr>
</tbody>
</table>
<h2 id="Orientation-Related"><a href="#Orientation-Related" class="headerlink" title="Orientation Related"></a>Orientation Related</h2><table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>rotate-45</code></td>
<td>Rotate by 45 degrees</td>
</tr>
<tr>
<td><code>rotate-90</code></td>
<td>Rotate by 90 degrees</td>
</tr>
<tr>
<td><code>rotate-135</code></td>
<td>Rotate by 135 degrees</td>
</tr>
<tr>
<td><code>rotate-180</code></td>
<td>Rotate by 180 degrees</td>
</tr>
<tr>
<td><code>rotate-205</code></td>
<td>Rotate by 205 degrees</td>
</tr>
<tr>
<td><code>rotate-270</code></td>
<td>Rotate by 270 degrees</td>
</tr>
<tr>
<td><code>rotate-315</code></td>
<td>Rotate by 315 degrees</td>
</tr>
<tr>
<td><code>flip-horizontal</code></td>
<td>Flip DOM element horizontally</td>
</tr>
<tr>
<td><code>flip-vertical</code></td>
<td>Flip DOM element vertically</td>
</tr>
</tbody>
</table>
<h2 id="Border-Related"><a href="#Border-Related" class="headerlink" title="Border Related"></a>Border Related</h2><table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>no-border</code></td>
<td>Removes any border</td>
</tr>
<tr>
<td><code>round-borders</code></td>
<td>Applies a generic border radius based on theme</td>
</tr>
</tbody>
</table>
<h2 id="Box-Model-Related"><a href="#Box-Model-Related" class="headerlink" title="Box Model Related"></a>Box Model Related</h2><table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>no-margin</code></td>
<td>Sets margin to “0”</td>
</tr>
<tr>
<td><code>no-padding</code></td>
<td>Sets padding to “0”</td>
</tr>
</tbody>
</table>
<h2 id="Groups"><a href="#Groups" class="headerlink" title="Groups"></a>Groups</h2><p>There’s are two special CSS class named <code>group</code> and <code>generic-margin</code>.</p>
<p><code>group</code> applies a small margin to all children DOM elements, while <code>generic-margin</code> applies same margin to the respective DOM element (this varies with each theme).</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Other Utils]]></title>
      <url>http://beta.quasar-framework.org/components/other-utils.html</url>
      <content type="html"><![CDATA[<h2 id="Open-External-URL"><a href="#Open-External-URL" class="headerlink" title="Open External URL"></a>Open External URL</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; openURL &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">openURL(<span class="string">'http://...'</span>)</div></pre></td></tr></table></figure>
<p>It will take care of the quirks involved when running under Cordova or on a browser, including notifying the user he/she has to acknowledge opening popups.</p>
<h2 id="Debounce-Function"><a href="#Debounce-Function" class="headerlink" title="Debounce Function"></a>Debounce Function</h2><p>If your App uses JavaScript to accomplish taxing tasks, a debounce function is essential to ensuring a given task doesn’t fire so often that it bricks browser performance. Debouncing a function limits the rate at which the function can fire.</p>
<p>Debouncing enforces that a function not be called again until a certain amount of time has passed without it being called. As in “execute this function only if 100 milliseconds have passed without it being called.”</p>
<p>A quick example: you have a resize listener on the window which does some element dimension calculations and (possibly) repositions a few elements. That isn’t a heavy task in itself but being repeatedly fired after numerous resizes will really slow your App down. So why not limit the rate at which the function can fire?</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// Returns a function, that, as long as it continues to be invoked, will not</span></div><div class="line"><span class="comment">// be triggered. The function will be called after it stops being called for</span></div><div class="line"><span class="comment">// N milliseconds. If `immediate` is passed, trigger the function on the</span></div><div class="line"><span class="comment">// leading edge, instead of the trailing.</span></div><div class="line"><span class="keyword">import</span> &#123; debounce &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">(Debounced <span class="built_in">Function</span>) debounce(<span class="built_in">Function</span> fn, <span class="built_in">Number</span> milliseconds_to_wait, <span class="built_in">Boolean</span> immediate)</div><div class="line"></div><div class="line"><span class="comment">// Example:</span></div><div class="line"><span class="built_in">window</span>.addEventListener(</div><div class="line">  <span class="string">'resize'</span>,</div><div class="line">  debounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    .... things to <span class="keyword">do</span> ...</div><div class="line">  &#125;, <span class="number">300</span> <span class="comment">/*ms to wait*/</span>)</div><div class="line">)</div></pre></td></tr></table></figure>
<p>There’s also a <code>frameDebounce</code> available which delays calling your function until next browser frame is scheduled to run (read about <code>requestAnimationFrame</code>).</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; frameDebounce &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">(Debounced <span class="built_in">Function</span>) frameDebounce(<span class="built_in">Function</span> fn)</div><div class="line"></div><div class="line"><span class="comment">// Example:</span></div><div class="line"><span class="built_in">window</span>.addEventListener(</div><div class="line">  <span class="string">'resize'</span>,</div><div class="line">  frameDebounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    .... things to <span class="keyword">do</span> ...</div><div class="line">  &#125;)</div><div class="line">)</div></pre></td></tr></table></figure>
<h2 id="Throttle-Function"><a href="#Throttle-Function" class="headerlink" title="Throttle Function"></a>Throttle Function</h2><p>Throttling enforces a maximum number of times a function can be called over time. As in “execute this function at most once every 300 milliseconds.”</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// Returns a function, that, as long as it continues to be invoked, will not</span></div><div class="line"><span class="comment">// be triggered. The function will be called after it stops being called for</span></div><div class="line"><span class="comment">// N milliseconds. If `immediate` is passed, trigger the function on the</span></div><div class="line"><span class="comment">// leading edge, instead of the trailing.</span></div><div class="line"><span class="keyword">import</span> &#123; throttle &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">(Throttled <span class="built_in">Function</span>) throttle(<span class="built_in">Function</span> fn, <span class="built_in">Number</span> limit_in_milliseconds)</div><div class="line"></div><div class="line"><span class="comment">// Example:</span></div><div class="line"><span class="built_in">window</span>.addEventListener(</div><div class="line">  <span class="string">'resize'</span>,</div><div class="line">  throttle(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    .... things to <span class="keyword">do</span> ...</div><div class="line">  &#125;, <span class="number">300</span> <span class="comment">/* execute at most once every 0.3s */</span>)</div><div class="line">)</div></pre></td></tr></table></figure>
<h2 id="Deep-Copy-Objects"><a href="#Deep-Copy-Objects" class="headerlink" title="(Deep) Copy Objects"></a>(Deep) Copy Objects</h2><p>A basic respawn of <code>jQuery.extend()</code>. Takes same parameters:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; extend &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> newObject = extend([<span class="built_in">Boolean</span> deepCopy], targetObj, obj, ...)</div></pre></td></tr></table></figure></p>
<p>Watch out for methods within objects.</p>
<h2 id="Generate-UID"><a href="#Generate-UID" class="headerlink" title="Generate UID"></a>Generate UID</h2><p>Generate unique identifiers:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; uid &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> uid = uid()</div><div class="line"><span class="comment">// Example: 501e7ae1-7e6f-b923-3e84-4e946bff31a8</span></div></pre></td></tr></table></figure></p>
<h2 id="Handling-“event”-on-a-DOM-event-handler"><a href="#Handling-“event”-on-a-DOM-event-handler" class="headerlink" title="Handling “event” on a DOM event handler"></a>Handling “event” on a DOM event handler</h2><p>It’s cross-browser.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; event &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">node.addEventListener(<span class="string">'click'</span>, evt =&gt; &#123;</div><div class="line">  <span class="comment">// right clicked?</span></div><div class="line">  (<span class="built_in">Boolean</span>) event.rightClick(evt)</div><div class="line"></div><div class="line">  <span class="comment">// position on viewport</span></div><div class="line">  <span class="comment">// works both for mouse and touch events!</span></div><div class="line">  (<span class="built_in">Object</span> &#123;top, left&#125;) event.position(evt)</div><div class="line"></div><div class="line">  <span class="comment">// get target DOM Element on which mouse or touch</span></div><div class="line">  <span class="comment">// event has fired upon</span></div><div class="line">  (DOM Element) event.targetElement(evt)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="Colors"><a href="#Colors" class="headerlink" title="Colors"></a>Colors</h2><p>You can change colors from RGB to Hex format (and reverse too).</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; colors &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(colors.rgbToHex(<span class="number">85</span>, <span class="number">165</span>, <span class="number">1</span>)) <span class="comment">// #55a532</span></div><div class="line"><span class="built_in">console</span>.log(colors.hexToRgb(<span class="string">'#55a532'</span>)) <span class="comment">// [85, 165, 1]</span></div></pre></td></tr></table></figure>
<h2 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h2><p>Filter out an array of Objects based on a certain field:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; filter &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> data = [&#123;fee: <span class="number">5</span>, desc: <span class="string">'Bla bla'</span>&#125;, &#123;fee: <span class="number">10</span>, desc: <span class="string">'Bla bla'</span>&#125;, &#123;fee: <span class="number">1</span>, desc: <span class="string">'Bla bla'</span>&#125;]</div><div class="line"><span class="built_in">console</span>.log(filter(<span class="string">'5'</span>, &#123;field: <span class="string">'fee'</span>, list: data&#125;)</div><div class="line"><span class="comment">// &#123;fee: 5, desc: 'Bla bla'&#125;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Pagination]]></title>
      <url>http://beta.quasar-framework.org/components/pagination.html</url>
      <content type="html"><![CDATA[<p>The Quasar Pagination component is available for whenever a pagination system is required. It offers the user a simple UI to move between pages.</p>
<p>If user wants to go to a specific page, it can click/tap on the inputbox within Pagination, type the page number then hit Enter key and if the new page number is within valid limits, the model will be changed accordingly.</p>
<input type="hidden" data-fullpage-demo="navigation/pagination">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-pagination</span> <span class="attr">v-model</span>=<span class="string">"page"</span> <span class="attr">:max</span>=<span class="string">"17"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>value</code></td>
<td>Number</td>
<td>(<strong>Required</strong>) The v-model of the pagination component.</td>
</tr>
<tr>
<td><code>min</code></td>
<td>Number</td>
<td>Number of the first page; Default: <code>1</code></td>
</tr>
<tr>
<td><code>max</code></td>
<td>Number</td>
<td>(<strong>Required</strong>) Number of last page</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>One from <a href="/components/color-palette.html">Quasar Color Palette</a></td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>If no value is provided (empty attribute), then it’s considered as set to <code>true</code>.</td>
</tr>
</tbody>
</table>
<p>If you’d like to set the minimum starting page or the max number of pages, you can do so, as in the example below.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-pagination</span> <span class="attr">v-model</span>=<span class="string">"page"</span> <span class="attr">:min</span>=<span class="string">"minPages"</span> <span class="attr">:max</span>=<span class="string">"maxPages"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  data () &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      page: <span class="number">4</span>,</div><div class="line">      minPages: <span class="number">4</span>,</div><div class="line">      maxPages: <span class="number">27</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>This will cause the pagination to initially render to page 4 and not allow the user to go below page 4.</p>
<h3 id="Coloring"><a href="#Coloring" class="headerlink" title="Coloring"></a>Coloring</h3><p>Use one of the Quasar colors from the Color Palette with the <code>color</code> prop, like <code>primary</code>, <code>secondary</code>, <code>orange-8</code>, <code>teal-4</code>:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-pagination</span></span></div><div class="line">  <span class="attr">color</span>=<span class="string">"orange"</span></div><div class="line">  <span class="attr">v-model</span>=<span class="string">"standalone"</span></div><div class="line">  <span class="attr">:max</span>=<span class="string">"50"</span></div><div class="line">/&gt;</div></pre></td></tr></table></figure>
<h3 id="Disabling"><a href="#Disabling" class="headerlink" title="Disabling"></a>Disabling</h3><p>If you’d like to disable the pagination component, use the <code>disable</code> prop.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-pagination</span> <span class="attr">v-model</span>=<span class="string">"page"</span> <span class="attr">:max</span>=<span class="string">"17"</span> <span class="attr">disable</span> /&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Panning Touch/Mouse Action]]></title>
      <url>http://beta.quasar-framework.org/components/panning.html</url>
      <content type="html"><![CDATA[<p>Quasar offers full-featured Vue directives that can totally replace libraries like Hammerjs: <code>v-touch-pan</code>, <code>v-touch-swipe</code> and <code>v-touch-hold</code>.</p>
<blockquote>
<p><strong>These directives also work with mouse events, not only touch events</strong>, so you are able to build cool functionality for your App on desktops too.</p>
</blockquote>
<p>We will be describing <code>v-touch-pan</code> on the lines below.</p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-touch-pan</span>=<span class="string">"handler"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">// "handler" is a Function which receives an Object as parameter</div></pre></td></tr></table></figure>
<h2 id="Handler-Parameter"><a href="#Handler-Parameter" class="headerlink" title="Handler Parameter"></a>Handler Parameter</h2><p>The <code>handler</code> function/method will be called by the directive when a <code>pan</code> touch (or with mouse) action is taking place (any change in touch position triggers a call) on the DOM element and it receives the following parameter:<br>  <figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">  evt,       <span class="comment">// JS Native Event</span></div><div class="line">  position,  <span class="comment">// &#123;top, left&#125; Position in pixels</span></div><div class="line">             <span class="comment">// where the user's finger is currently at</span></div><div class="line">  direction, <span class="comment">// "left", "right", "up" or "down"</span></div><div class="line">  duration,  <span class="comment">// Number in ms since "pan" started</span></div><div class="line">  distance,  <span class="comment">// &#123;x, y&#125; Distance in pixels covered by panning</span></div><div class="line">             <span class="comment">// on horizontal and vertical</span></div><div class="line">  delta,     <span class="comment">// &#123;x, y&#125; Distance in pixels since last called handler</span></div><div class="line">  isFirst,   <span class="comment">// Boolean; Has panning just been started?</span></div><div class="line">  isFinal    <span class="comment">// Boolean; Is panning over?</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// example:</span></div><div class="line">handler (obj) &#123;</div><div class="line">  <span class="built_in">console</span>.log(obj.direction) <span class="comment">// "right"</span></div><div class="line">  <span class="built_in">console</span>.log(obj.duration) <span class="comment">// 78</span></div><div class="line">  <span class="built_in">console</span>.log(obj.distance.x) <span class="comment">// 273</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Modifiers"><a href="#Modifiers" class="headerlink" title="Modifiers"></a>Modifiers</h2><p>Use <code>horizontal</code> or <code>vertical</code> when you only want to capture horizontal or vertical swipes.<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-touch-pan.horizontal</span>=<span class="string">"userSwiped"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>Directive allows vertical scroll when capturing only horizontal panning.</p>
</blockquote>
<p>When you don’t want to capture mouse actions too, use the <code>nomouse</code> modifier:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!--</span></div><div class="line">  directive won't be triggered by mouse actions;</div><div class="line">  it's exclusively triggered by touch actions now:</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-touch-pan.nomouse</span>=<span class="string">"userHasSwiped"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Parallax]]></title>
      <url>http://beta.quasar-framework.org/components/parallax.html</url>
      <content type="html"><![CDATA[<p>Parallax scrolling is a technique in computer graphics and web design, where background images move by the camera slower than foreground images, creating an illusion of depth in a 2D scene and adding to the immersion.</p>
<p>Quasar provides an out of the box Vue Component you can use. It takes care of a lot of quirks, including image size which can actually be smaller than the window width/height.</p>
<input type="hidden" data-fullpage-demo="media/parallax">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-parallax</span> <span class="attr">src</span>=<span class="string">"assets/mountains.jpg"</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- Dom elements to display while loading image --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"loading"</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!--</span></div><div class="line">    The rest of Dom elements get displayed on</div><div class="line">    top of the Parallax image after it's loaded</div><div class="line">  --&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Parallax<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-parallax</span>&gt;</span></div></pre></td></tr></table></figure>
<p>While the underlying image is being loaded you can display a specific message through <code>&lt;div slot=&quot;loading&quot;&gt;...&lt;/div&gt;</code>. After image has loaded, you can also display some content on top of the Parallax image (in the example above an <code>&lt;h1&gt;</code> tag).</p>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Param Attributes</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>src</code></td>
<td>String</td>
<td>Source for the image.</td>
</tr>
<tr>
<td><code>height</code></td>
<td>Number</td>
<td>Height of Parallax in pixels. Default value is 500.</td>
</tr>
<tr>
<td><code>speed</code></td>
<td>Number</td>
<td>Float between 0 and 1.</td>
</tr>
</tbody>
</table>
<p>Example:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- VueModel contains data property "imageURL" --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-parallax</span> <span class="attr">:src</span>=<span class="string">"imageURL"</span> <span class="attr">:height</span>=<span class="string">"300"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"loading"</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Parallax<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-parallax</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Platform Detection]]></title>
      <url>http://beta.quasar-framework.org/components/platform-detection.html</url>
      <content type="html"><![CDATA[<p>Helpers are built-in to detect the Platform (and its capabilities) in which the code is running:</p>
<input type="hidden" data-fullpage-demo="misc/platform-detection">

<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// For usage inside a Vue component JS:</span></div><div class="line"><span class="keyword">this</span>.$q.platform.is.mobile</div><div class="line"></div><div class="line"><span class="comment">// or usage inside a Vue component template:</span></div><div class="line">$q.platform.is.cordova</div><div class="line"></div><div class="line"><span class="comment">// Only for usage outside a Vue component you need to import it:</span></div><div class="line"><span class="keyword">import</span> &#123; Platform &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td>Platform.is.mobile</td>
<td>boolean</td>
<td>Is the code running on a mobile device?</td>
</tr>
<tr>
<td>Platform.is.cordova</td>
<td>boolean</td>
<td>Is the code running within Cordova?</td>
</tr>
<tr>
<td>Platform.is.desktop</td>
<td>boolean</td>
<td>Is the code running on a desktop browser?</td>
</tr>
<tr>
<td>Platform.is.chromeExt</td>
<td>boolean</td>
<td>Is the code running is a Chrome extension environment?</td>
</tr>
<tr>
<td>Platform.has.touch</td>
<td>boolean</td>
<td>Is the code running on a touch capable screen?</td>
</tr>
<tr>
<td>Platform.within.iframe</td>
<td>boolean</td>
<td>Is the App running within an IFRAME?</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>NOTE</strong><br>Running on mobile means you can have this code running on a mobile device (phone or tablet) but with a browser, not within a Cordova wrapper.</p>
</blockquote>
<p>Other <strong>Platform.is</strong> specific properties:<br><code>android</code>, <code>blackberry</code>, <code>cros</code>, <code>ios</code>, <code>ipad</code>, <code>iphone</code>, <code>ipod</code>, <code>kindle</code>, <code>linux</code>, <code>mac</code>, <code>playbook</code>, <code>silk</code>, <code>chrome</code>, <code>opera</code>, <code>safari</code>, <code>win</code> (Windows), <code>winphone</code> (Windows Phone) and more…</p>
<p>Example when running Chrome on a Linux desktop machine:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// Describing Platform.is</span></div><div class="line">&#123;</div><div class="line">  chrome: <span class="literal">true</span>,</div><div class="line">  desktop: <span class="literal">true</span>,</div><div class="line">  linux: <span class="literal">true</span>,</div><div class="line">  name: <span class="string">"chrome"</span>,</div><div class="line">  platform: <span class="string">"linux"</span>,</div><div class="line">  version: <span class="string">"47.0.2526.80"</span>,</div><div class="line">  versionNumber: <span class="number">47</span>,</div><div class="line">  webkit: <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>NOTE</strong><br>When trying to show DOM elements only on a platform you can skip using Javascript and make use of Quasar CSS classes (which is more efficient). Read about this here: <a href="/components/visibility.html#Platform-Related">Design Helpers &gt; Visibility</a>.</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Popover]]></title>
      <url>http://beta.quasar-framework.org/components/popover.html</url>
      <content type="html"><![CDATA[<p>QPopover should be used when you want a menu (or any content) to be displayed on a popup as a result of user clicking/tapping on a DOM element / component.</p>
<input type="hidden" data-fullpage-demo="popups/popover">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>In the example below we use a Button (as a target) and when clicking/tapping on it Quasar will display a List.</p>
<p>You can replace the QBtn and the List with any DOM elements or components you like.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!--</span></div><div class="line">  The target button (can be anything else)</div><div class="line">  must be direct parent of QPopover on the</div><div class="line">  DOM hierarchy.</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">ref</span>=<span class="string">"target"</span>&gt;</span></div><div class="line">  Email</div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- Direct child of target --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-popover</span> <span class="attr">ref</span>=<span class="string">"popover"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--</span></div><div class="line">      The DOM element(s) that make up the popup,</div><div class="line">      in this case a list:</div><div class="line">    --&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">q-list</span> <span class="attr">item-separator</span> <span class="attr">link</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item</span> @<span class="attr">click</span>=<span class="string">"doSomething(), $refs.popover.close()"</span>&gt;</span></div><div class="line">        ...</div><div class="line">      <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-popover</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div></pre></td></tr></table></figure>
<p>The idea is to place QPopover inside your DOM element / component that you want to be the trigger as <strong>direct child</strong>. Don’t worry about QPopover content inheriting CSS from the container as the QPopover will be injected as a direct child of <code>&lt;body&gt;</code>.</p>
<blockquote>
<p><strong>IMPORTANT</strong><br>When on a browser, hitting the &lt;ESCAPE&gt; key also closes the QPopover.</p>
</blockquote>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>anchor</code></td>
<td>Object</td>
<td>String of form <code>bottom left</code> (vertical horizontal)</td>
</tr>
<tr>
<td><code>self</code></td>
<td>Object</td>
<td>String of form <code>top left</code> (vertical horizontal)</td>
</tr>
<tr>
<td><code>max-height</code></td>
<td>String</td>
<td>Optional maximum height of Popover content. Example: <code>500px</code></td>
</tr>
<tr>
<td><code>touch-position</code></td>
<td>Boolean</td>
<td>Open Popover from the position where user clicked/tapped on anchor.</td>
</tr>
<tr>
<td><code>fit</code></td>
<td>Boolean</td>
<td>Popover has <code>min-width</code> set as same as the <code>width</code> of the container.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>When set to <code>true</code>, Popover won’t be triggered.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Methods"><a href="#Vue-Methods" class="headerlink" title="Vue Methods"></a>Vue Methods</h2><table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>toggle()</code></td>
<td>Toggle open/close state.</td>
</tr>
<tr>
<td><code>open()</code></td>
<td>Open Popover.</td>
</tr>
<tr>
<td><code>close()</code></td>
<td>Close Popover.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@open</code></td>
<td>Triggered after opening Popover.</td>
</tr>
<tr>
<td><code>@close</code></td>
<td>Triggered after closing Popover.</td>
</tr>
</tbody>
</table>
<h2 id="Handling-Popover-Dismissal"><a href="#Handling-Popover-Dismissal" class="headerlink" title="Handling Popover Dismissal"></a>Handling Popover Dismissal</h2><p>By default, clicking/tapping outside the QPopover content will close it. But if you’d like elements from the QPopover content to close it, then use a Vue reference on QPopover to call <code>close()</code> method, like on the “Basic Usage” example above.</p>
<h2 id="Handling-Positioning"><a href="#Handling-Positioning" class="headerlink" title="Handling Positioning"></a>Handling Positioning</h2><p>Position of the QPopover can be customized. It keeps account of the <code>anchor</code> and <code>self</code> optional Vue properties. See demo and play with them.</p>
<p>The final position of the QPopover popup is calculated so that it will be displayed on the available screen real estate, switching to right-side and/or top-side when necessary.</p>
<p>If you would like the QPopover to appear from the touch/click point triggering the QPopover open, then use the Boolean <code>touch-position</code> Vue property:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-popover</span> <span class="attr">touch-position</span>&gt;</span></div><div class="line">  ...</div><div class="line"><span class="tag">&lt;/<span class="name">q-popover</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>The demo has <code>touch-position</code> specified for the big image on the center of the page.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CSS Positioning Classes]]></title>
      <url>http://beta.quasar-framework.org/components/positioning.html</url>
      <content type="html"><![CDATA[<p>There are CSS classes supplied by Quasar to help you position a DOM element easily:</p>
<table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>fullscreen</code></td>
<td>Fix position covering all window real-estate</td>
</tr>
<tr>
<td><code>fixed</code></td>
<td>Set <code>position</code> to <code>fixed</code> without specifying <code>top</code>, <code>left</code>, <code>right</code> or <code>bottom</code> properties</td>
</tr>
<tr>
<td><code>absolute</code></td>
<td>Set <code>position</code> to <code>absolute</code> without specifying <code>top</code>, <code>left</code>, <code>right</code> or <code>bottom</code> properties</td>
</tr>
<tr>
<td><code>fixed-top</code>, <code>absolute-top</code></td>
<td>Fixed or absolute position to top of screen</td>
</tr>
<tr>
<td><code>fixed-right</code>, <code>absolute-right</code></td>
<td>Fixed or absolute position to the right edge of screen</td>
</tr>
<tr>
<td><code>fixed-bottom</code>, <code>absolute-bottom</code></td>
<td>Fixed or absolute position to bottom of screen</td>
</tr>
<tr>
<td><code>fixed-left</code>, <code>absolute-left</code></td>
<td>Fixed or absolute position to the left edge of screen</td>
</tr>
<tr>
<td><code>fixed-top-left</code>, <code>absolute-top-left</code></td>
<td>Fixed or absolute position to top left of screen</td>
</tr>
<tr>
<td><code>fixed-top-right</code>, <code>absolute-top-right</code></td>
<td>Fixed or absolute position to top right of screen</td>
</tr>
<tr>
<td><code>fixed-bottom-left</code>, <code>absolute-bottom-left</code></td>
<td>Fixed or absolute position to bottom left of screen</td>
</tr>
<tr>
<td><code>fixed-bottom-right</code>, <code>absolute-bottom-right</code></td>
<td>Fixed or absolute position to bottom right of screen</td>
</tr>
<tr>
<td><code>relative-position</code></td>
<td>Set position to <code>relative</code></td>
</tr>
</tbody>
</table>
<h2 id="Alignment"><a href="#Alignment" class="headerlink" title="Alignment"></a>Alignment</h2><table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>float-left</code>/<code>pull-left</code></td>
<td>Float to the left</td>
</tr>
<tr>
<td><code>float-right</code>/<code>pull-right</code></td>
<td>Float to the right</td>
</tr>
<tr>
<td><code>on-left</code></td>
<td>Sets a small margin to the right; commonly used for icon elements with other siblings</td>
</tr>
<tr>
<td><code>on-right</code></td>
<td>Sets a small margin to the left; commonly used for icon elements with other siblings</td>
</tr>
</tbody>
</table>
<p>Vertical alignment:</p>
<table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>vertical-top</code></td>
<td>Set vertical alignment to <code>top</code></td>
</tr>
<tr>
<td><code>vertical-middle</code></td>
<td>Set vertical alignment to <code>middle</code></td>
</tr>
<tr>
<td><code>vertical-bottom</code></td>
<td>Set vertical alignment to <code>bottom</code></td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Progress Bar (QProgress)]]></title>
      <url>http://beta.quasar-framework.org/components/progress-bar.html</url>
      <content type="html"><![CDATA[<p>A Progress bar is used to show a process is being worked on, so the user isn’t staring at a static page, even though the system is working in the background. It is a good visual indicator (i.e. good UX) for the user, when waiting for longer term operations to be accomplished.</p>
<input type="hidden" data-fullpage-demo="progress/progress">

<h2 id="Basic-usage"><a href="#Basic-usage" class="headerlink" title="Basic usage"></a>Basic usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-progress</span> <span class="attr">:percentage</span>=<span class="string">"progressModel"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- with buffering; 4px height looks best --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-progress</span></span></div><div class="line">  <span class="attr">:percentage</span>=<span class="string">"progressBuffer"</span></div><div class="line">  <span class="attr">:buffer</span>=<span class="string">"buffer"</span></div><div class="line">  <span class="attr">style</span>=<span class="string">"height: 4px"</span></div><div class="line">/&gt;</div></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>percentage</code></td>
<td>Number</td>
<td>Progress (in percentage).</td>
</tr>
<tr>
<td><code>buffer</code></td>
<td>Number</td>
<td>Buffer (in percentage).</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>The Quasar CSS color value the bar should be.</td>
</tr>
<tr>
<td><code>stripe</code></td>
<td>Boolen</td>
<td>If set to <code>true</code>, the progress bar will be striped.</td>
</tr>
<tr>
<td><code>animate</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, the progress bar will be animated.</td>
</tr>
<tr>
<td><code>indeterminate</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, the state is indeterminate, meaning it is unknown when the progress will stop.</td>
</tr>
</tbody>
</table>
<p>Percentage and buffer, being percentage values, must be between 0 and 100, and <code>percentage</code> + <code>buffer</code> must be lower or equal to 100. If <code>percentage</code> is outside this interval the component will parse it and make it be within the interval.</p>
<p>For color, use one from the <a href="/components/color-palette.html">Quasar Color Palette</a>.</p>
<p>Examples:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-progress</span> <span class="attr">:percentage</span>=<span class="string">"progress"</span> <span class="attr">color</span>=<span class="string">"teal-4"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-progress</span> <span class="attr">:percentage</span>=<span class="string">"progress"</span> <span class="attr">color</span>=<span class="string">"positive"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-progress</span> <span class="attr">:percentage</span>=<span class="string">"progress"</span> <span class="attr">color</span>=<span class="string">"info"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-progress</span> <span class="attr">:percentage</span>=<span class="string">"progress"</span> <span class="attr">color</span>=<span class="string">"warning"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<p>For stripes, just add the <code>stripe</code> prop.</p>
<p>Examples:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-progress</span> <span class="attr">:percentage</span>=<span class="string">"progress"</span> <span class="attr">color</span>=<span class="string">"positive"</span> <span class="attr">stripe</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-progress</span> <span class="attr">:percentage</span>=<span class="string">"progress"</span> <span class="attr">color</span>=<span class="string">"info"</span> <span class="attr">stripe</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-progress</span> <span class="attr">:percentage</span>=<span class="string">"progress"</span> <span class="attr">color</span>=<span class="string">"warning"</span> <span class="attr">stripe</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<p>For buffering, use the buffer prop.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-progress</span> <span class="attr">:percentage</span>=<span class="string">"progress"</span> <span class="attr">color</span>=<span class="string">"positive"</span> <span class="attr">stripe</span> <span class="attr">:buffer</span>=<span class="string">"buffer"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-progress</span> <span class="attr">:percentage</span>=<span class="string">"progress"</span> <span class="attr">color</span>=<span class="string">"info"</span> <span class="attr">stripe</span> <span class="attr">:buffer</span>=<span class="string">"buffer"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-progress</span> <span class="attr">:percentage</span>=<span class="string">"progress"</span> <span class="attr">color</span>=<span class="string">"warning"</span> <span class="attr">stripe</span> <span class="attr">:buffer</span>=<span class="string">"buffer"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>If you cannot calculate the progress in percent, use the indeterminate prop.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-progress</span> <span class="attr">indeterminate</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-progress</span> <span class="attr">indeterminate</span> <span class="attr">color</span>=<span class="string">"positive"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-progress</span> <span class="attr">indeterminate</span> <span class="attr">color</span>=<span class="string">"warning"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-progress</span> <span class="attr">indeterminate</span> <span class="attr">color</span>=<span class="string">"negative"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>If you’d like to set a specific height of the progress bar, add inline styling to the component:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-progress</span> <span class="attr">:percentage</span>=<span class="string">"progress"</span> <span class="attr">stripe</span> <span class="attr">animate</span> <span class="attr">style</span>=<span class="string">"height: 45px"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Pull Down to Refresh]]></title>
      <url>http://beta.quasar-framework.org/components/pull-to-refresh.html</url>
      <content type="html"><![CDATA[<p>When you want to allow the user to refresh the content or add newest content.</p>
<input type="hidden" data-fullpage-demo="navigation/pull-to-refresh">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>Use QPullToRefresh component as direct child of your page component, to encapsulate all its content. Refer to the source on the demo for a more detailed example.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-pull-to-refresh</span> <span class="attr">:handler</span>=<span class="string">"refresher"</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- Content, whatever you like --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span>&gt;</span></div><div class="line">    Lorem ipsum dolor sit amet...</div><div class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-pull-to-refresh</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p><strong>IMPORTANT</strong><br>Do not wrap <code>&lt;q-pull-to-refresh&gt;</code> by a <code>&lt;div class=&quot;layout-padding&gt;&quot;</code>. If you must, place that <code>&lt;div&gt;</code> as direct child of <code>&lt;q-pull-to-refresh&gt;</code>.</p>
</blockquote>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Default Value</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>handler</code></td>
<td>Function</td>
<td></td>
<td><strong>Required</strong> Method from VM to be called to load more content</td>
</tr>
<tr>
<td><code>distance</code></td>
<td>Number</td>
<td>35</td>
<td>Minimum threshold distance in pixels to determine if releasing will determine a refresh</td>
</tr>
<tr>
<td><code>pull-message</code></td>
<td>String</td>
<td>‘Pull down to refresh’</td>
<td>Message to display before hitting the threshold above</td>
</tr>
<tr>
<td><code>release-message</code></td>
<td>String</td>
<td>‘Release to refresh’</td>
<td>Message to display after hitting the threshold above and before releasing</td>
</tr>
<tr>
<td><code>refresh-message</code></td>
<td>String</td>
<td>‘Refreshing…’</td>
<td>Message to display when refreshing content</td>
</tr>
<tr>
<td><code>refresh-icon</code></td>
<td>String</td>
<td>‘refresh’</td>
<td>Icon to display when refreshing the content, besides the text above</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>false</td>
<td>When set to <code>true</code> it disables its functionality. If no value is provided (empty attribute), then it’s considered as set to <code>true</code>.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Methods"><a href="#Vue-Methods" class="headerlink" title="Vue Methods"></a>Vue Methods</h2><table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@trigger</code></td>
<td>Triggers a refresh, calling your handler.</td>
</tr>
</tbody>
</table>
<h2 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h2><p>The handler Function (specified as DOM element property) takes one parameter:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">  methods: &#123;</div><div class="line">    refresher (done) &#123;</div><div class="line">      <span class="comment">// done - Function to call when you made all necessary updates.</span></div><div class="line">      <span class="comment">//        DO NOT forget to call it otherwise the refresh message</span></div><div class="line">      <span class="comment">//        will continue to be displayed</span></div><div class="line"></div><div class="line">      <span class="comment">// make some Ajax call then call done()</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Scroll Area]]></title>
      <url>http://beta.quasar-framework.org/components/scroll-area.html</url>
      <content type="html"><![CDATA[<p>Quasar offers a neat way of customizing the scrollbars with the help of QScrollArea component which can encapsulate your content. Think of it as a DOM element which has <code>overflow: auto</code>, but with your own custom styled scrollbar instead of browser’s default one and a few nice features on top.</p>
<input type="hidden" data-fullpage-demo="scrolling/scroll-area">

<p>This is especially useful for desktop as scrollbars are hidden on a mobile device. When on a mobile device, QScrollArea simply wraps the content in a <code>&lt;div&gt;</code> configured for default browser scrolling.</p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>QScrollArea supports scrolling by user dragging the custom scrollbars or by using the mousewheel. If on a desktop that has a touch screen then scrolling will work with touch actions too.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!--</span></div><div class="line">  In this example we set a height to force</div><div class="line">  custom scrollbars to appear</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">q-scroll-area</span> <span class="attr">style</span>=<span class="string">"width: 400px; height: 100px;"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"n in 10"</span>&gt;</span></div><div class="line">    Lorem ipsum dolor sit amet, consectetur adipisicing</div><div class="line">    elit, sed do eiusmod tempor incididunt ut labore et</div><div class="line">    dolore magna aliqua.</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-scroll-area</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Property</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>thumb-style</code></td>
<td>Object with CSS properties and values for styling the thumb of custom scrollbar.</td>
</tr>
<tr>
<td><code>content-style</code></td>
<td>Object with CSS properties and values for styling the container of QScrollArea.</td>
</tr>
<tr>
<td><code>content-active-style</code></td>
<td>Object with CSS properties and values for styling the container of QScrollArea when scroll area becomes active (is mouse hovered).</td>
</tr>
<tr>
<td><code>delay</code></td>
<td>Number (in milliseconds, default is 1000) defining a delay before custom scrollbars become visible after mouse is hovering the container.</td>
</tr>
</tbody>
</table>
<h2 id="Custom-Scrollbar-Example"><a href="#Custom-Scrollbar-Example" class="headerlink" title="Custom Scrollbar Example"></a>Custom Scrollbar Example</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!--</span></div><div class="line">  Custom scrollbar thumb with a delay of</div><div class="line">  1.5 seconds before appearing after hovering</div><div class="line">  the mouse over the scrollable content</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">q-scroll-area</span></span></div><div class="line">  <span class="attr">style</span>=<span class="string">"height: 200px"</span></div><div class="line">  <span class="attr">:thumb-style</span>=<span class="string">"&#123;</span></div><div class="line">    right: '4px',</div><div class="line">    borderRadius: '5px',</div><div class="line">    background: 'red',</div><div class="line">    width: '10px',</div><div class="line">    opacity: 1</div><div class="line">  &#125;"</div><div class="line">  <span class="attr">:delay</span>=<span class="string">"1500"</span></div><div class="line">&gt;</div><div class="line">  ...Scrollable.Content...</div><div class="line"><span class="tag">&lt;/<span class="name">q-scroll-area</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Vue-Methods"><a href="#Vue-Methods" class="headerlink" title="Vue Methods"></a>Vue Methods</h2><table>
<thead>
<tr>
<th>Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>setScrollPosition(offset[, duration])</code></td>
<td>Set scroll position to an offset. If a duration (in milliseconds) is specified then the scroll is animated.</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Radio]]></title>
      <url>http://beta.quasar-framework.org/components/radio.html</url>
      <content type="html"><![CDATA[<p>The Quasar Radio component is another basic element for user input. You can use this for one or multiple selections between one or more choices.</p>
<input type="hidden" data-fullpage-demo="forms/radio">

<p>Please also refer to the <a href="/components/option-group.html">Option Group documentation</a> on other possibilities for creating groups of Toggles.</p>
<p>Works well with <a href="/components/field.html">QField</a> for additional functionality such as a helper, error message placeholder and many others.</p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Thre choices for the user --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-radio</span> <span class="attr">v-model</span>=<span class="string">"option"</span> <span class="attr">val</span>=<span class="string">"opt1"</span> <span class="attr">label</span>=<span class="string">"Option 1"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-radio</span> <span class="attr">v-model</span>=<span class="string">"option"</span> <span class="attr">val</span>=<span class="string">"opt2"</span> <span class="attr">label</span>=<span class="string">"Option 2"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-radio</span> <span class="attr">v-model</span>=<span class="string">"option"</span> <span class="attr">val</span>=<span class="string">"opt3"</span> <span class="attr">label</span>=<span class="string">"Option 3"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><p>Supports <code>v-model</code> which should be binded to a String in your scope. Choosing one option (clicking/tapping on a radio) makes your <code>v-movel</code> change to Radio’s <code>val</code>.</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>val</code></td>
<td>Object</td>
<td>Used to modify the v-model of the Radio with.</td>
</tr>
<tr>
<td><code>label</code></td>
<td>String</td>
<td>The text label for the Radio.</td>
</tr>
<tr>
<td><code>left-label</code></td>
<td>Boolean</td>
<td>Set to <code>true</code>, if the label should be placed to the left of the radio.</td>
</tr>
<tr>
<td><code>checked-icon</code></td>
<td>String</td>
<td>The icon to use, when the radio is checked. Default is a simple radio icon.</td>
</tr>
<tr>
<td><code>uncheck-icon</code></td>
<td>String</td>
<td>The icon to use, when the radio is not checked. Default is simple unchecked radio icon.</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>Color from <a href="/components/color-palette.html">Quasar Color Palette</a> of the Radio.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>Set to <code>true</code>, to disable the radio.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Vue Event</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@blur</code></td>
<td>Triggered, when Radio loses focus.</td>
</tr>
<tr>
<td><code>@focus</code></td>
<td>Triggered, when Radio gains focus.</td>
</tr>
</tbody>
</table>
<h2 id="More-Examples"><a href="#More-Examples" class="headerlink" title="More Examples"></a>More Examples</h2><p>There are a number of props, which are available to help quickly format a Radio. An interesting feature of Radio is the ripple effect that user gets when clicking/tapping on it to change its state.</p>
<h3 id="Specific-State-Icons"><a href="#Specific-State-Icons" class="headerlink" title="Specific State Icons"></a>Specific State Icons</h3><p>Instead of the default radio icon, you can also use the <code>checked-icon</code> and <code>unchecked-icon</code> props to display a different icon.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-radio</span></span></div><div class="line">  <span class="attr">v-model</span>=<span class="string">"option"</span></div><div class="line">  <span class="attr">val</span>=<span class="string">"opt1"</span></div><div class="line">  <span class="attr">unchecked-icon</span>=<span class="string">"visibility_off"</span></div><div class="line">  <span class="attr">checked-icon</span>=<span class="string">"visibility"</span></div><div class="line">  <span class="attr">label</span>=<span class="string">"Show only Area 1"</span></div><div class="line">/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">q-radio</span></span></div><div class="line">  <span class="attr">v-model</span>=<span class="string">"option"</span></div><div class="line">  <span class="attr">val</span>=<span class="string">"opt2"</span></div><div class="line">  <span class="attr">unchecked-icon</span>=<span class="string">"visibility_off"</span></div><div class="line">  <span class="attr">checked-icon</span>=<span class="string">"visibility"</span></div><div class="line">  <span class="attr">label</span>=<span class="string">"Show only Area 2"</span></div><div class="line">/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">q-radio</span></span></div><div class="line">  <span class="attr">v-model</span>=<span class="string">"option"</span></div><div class="line">  <span class="attr">val</span>=<span class="string">"opt3"</span></div><div class="line">  <span class="attr">unchecked-icon</span>=<span class="string">"visibility_off"</span></div><div class="line">  <span class="attr">checked-icon</span>=<span class="string">"visibility"</span></div><div class="line">  <span class="attr">label</span>=<span class="string">"Show only Area 3"</span></div><div class="line">/&gt;</div></pre></td></tr></table></figure>
<h3 id="Coloring"><a href="#Coloring" class="headerlink" title="Coloring"></a>Coloring</h3><p>Use the <code>color</code> prop to control the Radio color.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Default color, which is "primary" --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-radio</span> <span class="attr">v-model</span>=<span class="string">"option"</span> <span class="attr">val</span>=<span class="string">"opt2"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Teal --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-radio</span> <span class="attr">v-model</span>=<span class="string">"option"</span> <span class="attr">val</span>=<span class="string">"opt3"</span> <span class="attr">color</span>=<span class="string">"teal"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Orange-7 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-radio</span> <span class="attr">v-model</span>=<span class="string">"option"</span> <span class="attr">val</span>=<span class="string">"opt4"</span> <span class="attr">color</span>=<span class="string">"orange-7"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Label-Position"><a href="#Label-Position" class="headerlink" title="Label Position"></a>Label Position</h3><p>Use the <code>left-label</code> prop, to move the label to the left of the radio.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-radio</span></span></div><div class="line">  <span class="attr">v-model</span>=<span class="string">"option"</span></div><div class="line">  <span class="attr">val</span>=<span class="string">"opt2"</span></div><div class="line">  <span class="attr">left-label</span></div><div class="line">  <span class="attr">label</span>=<span class="string">"Option 2"</span></div><div class="line">/&gt;</div></pre></td></tr></table></figure>
<h3 id="Usage-Inside-of-a-List"><a href="#Usage-Inside-of-a-List" class="headerlink" title="Usage Inside of a List"></a>Usage Inside of a List</h3><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-list</span> <span class="attr">link</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!--</span></div><div class="line">    Rendering a &lt;label&gt; tag (notice tag="label")</div><div class="line">    so the whole QItem will respond to clicks to</div><div class="line">    change Toggle state.</div><div class="line">  --&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">tag</span>=<span class="string">"label"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-radio</span> <span class="attr">v-model</span>=<span class="string">"option"</span> <span class="attr">val</span>=<span class="string">"opt1"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Option 1<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">tag</span>=<span class="string">"label"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-radio</span> <span class="attr">v-model</span>=<span class="string">"option"</span> <span class="attr">val</span>=<span class="string">"opt2"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Option 2<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span>Allows notifications<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">tag</span>=<span class="string">"label"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-radio</span> <span class="attr">v-model</span>=<span class="string">"option"</span> <span class="attr">val</span>=<span class="string">"opt3"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Option 3<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span></div><div class="line">        Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod</div><div class="line">        tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,</div><div class="line">        quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo</div><div class="line">        consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse</div><div class="line">        cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat</div><div class="line">        non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</div><div class="line">      <span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Rating]]></title>
      <url>http://beta.quasar-framework.org/components/rating.html</url>
      <content type="html"><![CDATA[<p>Quasar Rating is a Component which allows users to rate items, usually known as “Star Rating”.</p>
<input type="hidden" data-fullpage-demo="forms/rating">

<p>Works well with <a href="/components/field.html">QField</a> for additional functionality such as a helper, error message placeholder and many others.</p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-rating</span> <span class="attr">v-model</span>=<span class="string">"ratingModel"</span> <span class="attr">:max</span>=<span class="string">"3"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Disabled State --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-rating</span></span></div><div class="line">  <span class="attr">disable</span></div><div class="line">  <span class="attr">v-model</span>=<span class="string">"ratingModel"</span></div><div class="line">  <span class="attr">:max</span>=<span class="string">"3"</span></div><div class="line">/&gt;</div></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><p>Supports <code>v-model</code> which should be binded to a Number in your scope.</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>max</code></td>
<td>Number</td>
<td>Number of icons to display.</td>
</tr>
<tr>
<td><code>icon</code></td>
<td>String</td>
<td>Icon to use as grade. Default value: <code>grade</code>.</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>One of <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>size</code></td>
<td>String</td>
<td>CSS size String. Examples: ‘12px’, ‘2rem’.</td>
</tr>
<tr>
<td><code>readonly</code></td>
<td>Boolean</td>
<td>Display as readonly.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>When set to <code>true</code> user can not change model value and Rating is faded.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Methods"><a href="#Vue-Methods" class="headerlink" title="Vue Methods"></a>Vue Methods</h2><table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>set(value)</code></td>
<td>Parses and sets that value.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Vue Event</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@change(newVal)</code></td>
<td>Triggered on model value change.</td>
</tr>
</tbody>
</table>
<h2 id="Coloring"><a href="#Coloring" class="headerlink" title="Coloring"></a>Coloring</h2><p>Use one of the Quasar colors from the <a href="/components/color-palette.html">Color Palette</a>, like <code>primary</code>, <code>secondary</code>, <code>orange-7</code>, <code>teal-2</code> as CSS class:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-rating</span></span></div><div class="line">  <span class="attr">class</span>=<span class="string">"orange"</span></div><div class="line">  <span class="attr">v-model</span>=<span class="string">"ratingModel"</span></div><div class="line">  <span class="attr">:max</span>=<span class="string">"5"</span></div><div class="line">/&gt;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Directive "v-scroll"]]></title>
      <url>http://beta.quasar-framework.org/components/scroll-directive.html</url>
      <content type="html"><![CDATA[<p>This is a Vue directive which takes one parameter (a Function) and fires when user scrolls the page containing that DOM node.</p>
<p>One alternative to using this directive is to place a <a href="/components/scroll-observable.html">QScrollObservable</a> component on your page.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Template for VueModel below --&gt;</span></div><div class="line">...</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-scroll</span>=<span class="string">"scrolled"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">...</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// VueModel for template above</span></div><div class="line">&#123;</div><div class="line">  ...,</div><div class="line">  methods: &#123;</div><div class="line">    ...,</div><div class="line">    scrolled (position) &#123;</div><div class="line">      <span class="comment">// when this method is invoked then it means user</span></div><div class="line">      <span class="comment">// has scrolled the page to `position`</span></div><div class="line">      <span class="comment">//</span></div><div class="line">      <span class="comment">// `position` is an Integer designating the current</span></div><div class="line">      <span class="comment">// scroll position in pixels.</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>IMPORTANT</strong><br>Please note that by default the method called is not debounced. For that you have to do it yourself, by wrapping your method with Quasar’s debouncer (as an example) like in example below.<br><br>Read more about <code>debouncing</code> <a href="/components/other-utils.html#Debounce-Function">here</a>.</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; debounce &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  ...,</div><div class="line">  methods: &#123;</div><div class="line">    ...,</div><div class="line">    scrolled: debounce(position =&gt; &#123;</div><div class="line">      <span class="comment">// when this method is invoked then it means user</span></div><div class="line">      <span class="comment">// has scrolled the Page to `position`</span></div><div class="line">      <span class="comment">//</span></div><div class="line">      <span class="comment">// `position` is an Integer designating the current</span></div><div class="line">      <span class="comment">// scroll position in pixels.</span></div><div class="line">    &#125;, <span class="number">200</span>) <span class="comment">// debounce for 200ms</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>NOTE</strong><br>There is one more scrolling-related directive available called “Scroll Fire” described on its own documentation page. Read more <a href="/components/scroll-fire.html">here</a>.</p>
</blockquote>
<h2 id="Determining-Scrolling-Container"><a href="#Determining-Scrolling-Container" class="headerlink" title="Determining Scrolling Container"></a>Determining Scrolling Container</h2><p>Please read <a href="/components/scroll-observable.html#Determining-Scrolling-Container">here</a> about how Quasar determines the container to attach scrolling events to.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Range]]></title>
      <url>http://beta.quasar-framework.org/components/range.html</url>
      <content type="html"><![CDATA[<p>The Quasar Range component is a great way to offer the user the selection of a sub-range of values between a minimum and maximum value, with optional steps to select those values. An example use case for the Range component would be to offer a price range selection.</p>
<input type="hidden" data-fullpage-demo="forms/range">

<p>Also check out its “sibling”, the <a href="/components/slider.html">Slider</a> component.<br>Remember you can use QRange wrapped by a <a href="/components/field.html">QField</a> too.</p>
<p>Works well with <a href="/components/field.html">QField</a> for additional functionality such as a helper, error message placeholder and many others.</p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>Notice we are using an object for the selection, which holds values for both the lower value of the selected range - <code>rangeValues.min</code> and the higher value - <code>rangeValues.max</code>.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-range</span></span></div><div class="line">    <span class="attr">v-model</span>=<span class="string">"rangeValues"</span></div><div class="line">    <span class="attr">:min</span>=<span class="string">"0"</span></div><div class="line">    <span class="attr">:max</span>=<span class="string">"10"</span></div><div class="line">    <span class="attr">:step</span>=<span class="string">"1"</span></div><div class="line">  /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  data () &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="comment">// our model here</span></div><div class="line">      rangeValues: &#123;</div><div class="line">        min: <span class="number">2</span>,</div><div class="line">        max: <span class="number">4</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Example with <code>step</code>, <code>label</code> and <code>snap</code>:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-range</span></span></div><div class="line">  <span class="attr">v-model</span>=<span class="string">"rangeValues"</span></div><div class="line">  <span class="attr">:min</span>=<span class="string">"0"</span></div><div class="line">  <span class="attr">:max</span>=<span class="string">"10"</span></div><div class="line">  <span class="attr">:step</span>=<span class="string">"2"</span></div><div class="line">  <span class="attr">label</span></div><div class="line">  <span class="attr">snap</span></div><div class="line">/&gt;</div></pre></td></tr></table></figure></p>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><p>Supports <code>v-model</code> which should be binded to an Object in your scope with “min” and “max” properties.</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>min</code></td>
<td>Number</td>
<td>(<strong>Required</strong>) Minimum value for beginning of interval.</td>
</tr>
<tr>
<td><code>max</code></td>
<td>Number</td>
<td>(<strong>Required</strong>) Maximum value for end of interval.</td>
</tr>
<tr>
<td><code>label</code></td>
<td>Boolean</td>
<td>Popup a label when user clicks/taps on the Range.</td>
</tr>
<tr>
<td><code>label-always</code></td>
<td>Boolean</td>
<td>Always display the label.</td>
</tr>
<tr>
<td><code>left-label-value</code></td>
<td>String</td>
<td>Override default left label value.</td>
</tr>
<tr>
<td><code>right-label-value</code></td>
<td>String</td>
<td>Override default right label value.</td>
</tr>
<tr>
<td><code>fill-handle-always</code></td>
<td>Boolean</td>
<td>Fill handle even if at minimum value.</td>
</tr>
<tr>
<td><code>step</code></td>
<td>Number</td>
<td>Specify step amount between valid values.</td>
</tr>
<tr>
<td><code>snap</code></td>
<td>Boolean</td>
<td>Range handler will snap on values, rather than walking freely; good to use along <code>step</code>; also displays step markers on the Range.</td>
</tr>
<tr>
<td><code>markers</code></td>
<td>Boolean</td>
<td>Display markers on background, one for each possible value for the model.</td>
</tr>
<tr>
<td><code>square</code></td>
<td>Boolean</td>
<td>When <code>true</code>. the slider buttons are square instead of round.</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>One of <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>error</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, the range is turned red.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, the user cannot change model value.</td>
</tr>
<tr>
<td><code>drag-range</code></td>
<td>Boolean</td>
<td>User can also drag the range (while maintaining interval in this case).</td>
</tr>
<tr>
<td><code>drag-only-range</code></td>
<td>Boolean</td>
<td>When <code>true</code>, the user can only drag a predetermined range. Range limit values cannot be changed independently.</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>IMPORTANT</strong><br>Make sure you choose the <code>min</code>, <code>max</code> and <code>step</code> values correctly. <code>step</code> must be a divisor of <code>max - min</code>, of <code>v-model.min</code> and of <code>v-model.max</code>, otherwise the component won’t work right. This is because all valid steps must be able to hold an equal position within the <code>min</code>-<code>max</code> values.</p>
</blockquote>
<h3 id="Disabled"><a href="#Disabled" class="headerlink" title="Disabled"></a>Disabled</h3><p>Use the <code>disable</code> prop to stop the user from changing the range values.<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-range</span> <span class="attr">v-model</span>=<span class="string">"rangeValues"</span> <span class="attr">:min</span>=<span class="string">"0"</span> <span class="attr">:max</span>=<span class="string">"50"</span> <span class="attr">disable</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="Error-State"><a href="#Error-State" class="headerlink" title="Error State"></a>Error State</h3><p>Use the <code>error</code> prop to show there is an error. This will turn the <code>double-range</code> component red.<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-range</span> <span class="attr">error</span> <span class="attr">v-model</span>=<span class="string">"rangeValues"</span> <span class="attr">:min</span>=<span class="string">"0"</span> <span class="attr">:max</span>=<span class="string">"50"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="Coloring"><a href="#Coloring" class="headerlink" title="Coloring"></a>Coloring</h3><p>Use one of the Quasar colors from the <a href="/components/color-palette.html">Color Palette</a>, like <code>primary</code>, <code>secondary</code>, <code>orange-9</code>, <code>teal-4</code> within the <code>color</code> prop:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-range</span> <span class="attr">color</span>=<span class="string">"teal"</span> <span class="attr">v-model</span>=<span class="string">"rangeValues"</span> <span class="attr">:min</span>=<span class="string">"0"</span> <span class="attr">:max</span>=<span class="string">"50"</span> <span class="attr">label</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Draging-the-Range"><a href="#Draging-the-Range" class="headerlink" title="Draging the Range"></a>Draging the Range</h3><p>Use the <code>drag-range</code> or <code>drag-only-range</code> props, to allow the user to move the selected range or only a predetermined range as a whole.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-range</span> <span class="attr">drag-range</span> <span class="attr">v-model</span>=<span class="string">"rangeValues"</span> <span class="attr">:min</span>=<span class="string">"0"</span> <span class="attr">:max</span>=<span class="string">"100"</span> <span class="attr">label</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">q-range</span> <span class="attr">drag-only-range</span> <span class="attr">v-model</span>=<span class="string">"rangeValues"</span> <span class="attr">:min</span>=<span class="string">"0"</span> <span class="attr">:max</span>=<span class="string">"100"</span> <span class="attr">label</span> /&gt;</span></div><div class="line">```  </div><div class="line"></div><div class="line">### Adding Markers</div><div class="line">Use the `markers` prop, to show the steps available for the range selection.</div><div class="line">``` html</div><div class="line"><span class="tag">&lt;<span class="name">q-range</span> <span class="attr">markers</span> <span class="attr">v-model</span>=<span class="string">"rangeValues"</span> <span class="attr">:min</span>=<span class="string">"-6"</span> <span class="attr">:max</span>=<span class="string">"10"</span> <span class="attr">:step</span>=<span class="string">"2"</span> <span class="attr">label</span> <span class="attr">snap</span>  /&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Overriding-Labels"><a href="#Overriding-Labels" class="headerlink" title="Overriding Labels"></a>Overriding Labels</h3><p>In the example below we add a “px” suffix to labels.<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-range</span></span></div><div class="line">  <span class="attr">v-model</span>=<span class="string">"label"</span></div><div class="line">  <span class="attr">:min</span>=<span class="string">"-20"</span> <span class="attr">:max</span>=<span class="string">"20"</span></div><div class="line">  <span class="attr">:left-label-value</span>=<span class="string">"`$&#123;label.min&#125;px`"</span></div><div class="line">  <span class="attr">:right-label-value</span>=<span class="string">"`$&#123;label.max&#125;px`"</span></div><div class="line">/&gt;</div></pre></td></tr></table></figure></p>
<h2 id="Usage-Inside-of-a-List"><a href="#Usage-Inside-of-a-List" class="headerlink" title="Usage Inside of a List"></a>Usage Inside of a List</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-list</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"local_atm"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-range</span> <span class="attr">v-model</span>=<span class="string">"standalone"</span> <span class="attr">:min</span>=<span class="string">"0"</span> <span class="attr">:max</span>=<span class="string">"50"</span> <span class="attr">label</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"euro symbol"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-range</span> <span class="attr">v-model</span>=<span class="string">"standalone"</span> <span class="attr">:min</span>=<span class="string">"0"</span> <span class="attr">:max</span>=<span class="string">"50"</span> <span class="attr">label</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Scroll Fire]]></title>
      <url>http://beta.quasar-framework.org/components/scroll-fire.html</url>
      <content type="html"><![CDATA[<p>“Scroll Fire” is a feature that enables a method to be called (once and only once) when user scrolls current page and the DOM element (or component) that it is applied to comes into the viewport.</p>
<input type="hidden" data-fullpage-demo="scrolling/scroll-fire">

<p>For ease of use, its implementation is through a Vue Directive called <code>v-scroll-fire</code>.</p>
<blockquote>
<p><strong>NOTE</strong><br>There is also a <code>v-scroll</code> directive which fires whenever user scrolls the page, available to read <a href="/components/scroll-directive.html">here</a>..</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Template for VueModel below --&gt;</span></div><div class="line">....</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-scroll-fire</span>=<span class="string">"bounceImage"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// VueModel for template above</span></div><div class="line">&#123;</div><div class="line">  ...,</div><div class="line">  methods: &#123;</div><div class="line">    bounceImage (element) &#123;</div><div class="line">      <span class="comment">// in this example, when the `&lt;div&gt;` comes into view,</span></div><div class="line">      <span class="comment">// we bounce it for 2 seconds</span></div><div class="line"></div><div class="line">      <span class="comment">// we add helper `nimate-bounce` Quasar CSS class</span></div><div class="line">      element.classList.add(<span class="string">'animate-bounce'</span>)</div><div class="line">      setTimeout(() =&gt; &#123;</div><div class="line">        <span class="comment">// we make sure the node is still in DOM</span></div><div class="line">        <span class="comment">// (user hasn't navigated away from the Vue component</span></div><div class="line">        <span class="comment">// rendering our `&lt;div&gt;`)</span></div><div class="line">        <span class="comment">// so we don't generate an error</span></div><div class="line">        <span class="keyword">if</span> (<span class="built_in">document</span>.body.contains(element)) &#123;</div><div class="line">          <span class="comment">// then remove the helper class to</span></div><div class="line">          <span class="comment">// stop bouncing</span></div><div class="line">          element.classList.remove(<span class="string">'animate-bounce'</span>)</div><div class="line">        &#125;</div><div class="line">      &#125;, <span class="number">2000</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>IMPORTANT</strong><br>For performance purposes, the scroll listener function injected is by default debounced by 50ms. Read more about <code>debouncing</code> <a href="/components/other-utils.html#Debounce-Function">here</a>.</p>
</blockquote>
<h2 id="Determining-Scrolling-Container"><a href="#Determining-Scrolling-Container" class="headerlink" title="Determining Scrolling Container"></a>Determining Scrolling Container</h2><p>Please read <a href="/components/scroll-observable.html#Determining-Scrolling-Container">here</a> about how Quasar determines the container to attach scrolling events to.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Scroll Observable]]></title>
      <url>http://beta.quasar-framework.org/components/scroll-observable.html</url>
      <content type="html"><![CDATA[<p>QScrollObservable is a Quasar component that emits a <code>scroll</code> event whenever the user scrolls the page or overflowed container with <code>.scroll</code> CSS class applied to it.</p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  ...</div><div class="line">  <span class="tag">&lt;<span class="name">q-scroll-observable</span> @<span class="attr">scroll</span>=<span class="string">"userHasScrolled"</span> /&gt;</span></div><div class="line">  ...</div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  ...,</div><div class="line">  methods: &#123;</div><div class="line">    ...,</div><div class="line">    userHasScrolled (scroll) &#123;</div><div class="line">      <span class="built_in">console</span>.log(scroll)</div><div class="line">      <span class="comment">// &#123;</span></div><div class="line">      <span class="comment">//   position: 56, // pixels from top</span></div><div class="line">      <span class="comment">//   direction: 'down', // 'down' or 'up'</span></div><div class="line">      <span class="comment">//   directionChanged: false, // has direction changed since this handler was called?</span></div><div class="line">      <span class="comment">//   inflexionPosition: 56 // last scroll position where user changed scroll direction</span></div><div class="line">      <span class="comment">// &#125;</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Determining-Scrolling-Container"><a href="#Determining-Scrolling-Container" class="headerlink" title="Determining Scrolling Container"></a>Determining Scrolling Container</h2><p>All components or directives in Quasar have a simple algorithm to determine which is the container that supports the scroll: it searches for a parent DOM element which has the <code>scroll</code> Quasar CSS Helper class attached to it. If none is found, then it considers that the scrolling takes place on the document itself.</p>
<p>Components like <a href="/components/scroll-area.html">QScrollArea</a>, for example, respect this design and have the <code>scroll</code> class embedded into it, so that QScrollObservable (or any other scrolling component or directive) can succesfully detect it and attach the necessary event handlers to it.</p>
<p>Please note that simply attaching <code>scroll</code> CSS class to a DOM element or on a Vue component will have no effect if the respective element is not overflowed (example, with: CSS <code>overflow: hidden</code> and a height smaller than its inner content height).</p>
<p>Example of good container:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!--</span></div><div class="line">  Quasar CSS helper 'overflow-hidden' is</div><div class="line">  equivalent to style="overflow: hidden"</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"scroll overflow-hidden"</span> <span class="attr">style</span>=<span class="string">"height: 100px"</span>&gt;</span></div><div class="line">  ...content expanding over the 100px height from container...</div><div class="line">  <span class="tag">&lt;<span class="name">q-scroll-observable</span> @<span class="attr">scroll</span>=<span class="string">"scrollHandler"</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- example with `v-scroll` directive --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-scroll</span>=<span class="string">"scrollHandler"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>One more example with QScrollArea:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-scroll-area</span> <span class="attr">style</span>=<span class="string">"width: 400px; height: 500px;"</span> <span class="attr">class</span>=<span class="string">"bg-yellow"</span>&gt;</span></div><div class="line">  ...content expanding over the 500px height from container...</div><div class="line">  <span class="tag">&lt;<span class="name">q-scroll-observable</span> @<span class="attr">scroll</span>=<span class="string">"scrollHandler"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-scroll-area</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="Layout-Scrolling"><a href="#Layout-Scrolling" class="headerlink" title="Layout Scrolling"></a>Layout Scrolling</h2><p>When scrolling on a Layout with a Page, rather than injecting a QScrollObservable (and by so doing registering additional scroll events) you can take advantage of <a href="/components/layout.html">QLayout</a>‘s <code>@scroll</code> event directly on your component defining the Layout.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-layout</span> @<span class="attr">scroll</span>=<span class="string">"scrollHandler"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">q-layout</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Scrolling Utils]]></title>
      <url>http://beta.quasar-framework.org/components/scrolling-utils.html</url>
      <content type="html"><![CDATA[<h2 id="Determine-Scrolling-Container"><a href="#Determine-Scrolling-Container" class="headerlink" title="Determine Scrolling Container"></a>Determine Scrolling Container</h2><p>Might be worthwhile to read how this is done <a href="/components/scroll-observable.html#Determining-Scrolling-Container">here</a><br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; scroll &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"><span class="keyword">const</span> &#123; getScrollTarget &#125; = scroll</div><div class="line"></div><div class="line"><span class="comment">// Get parent DomNode that handles page scrolling</span></div><div class="line"><span class="comment">// Usually this is element with classname ".layout-view" or "window"</span></div><div class="line">(DOM Element) getScrollTarget(DomElement)</div></pre></td></tr></table></figure></p>
<h2 id="Get-Set-Scroll-Position"><a href="#Get-Set-Scroll-Position" class="headerlink" title="Get/Set Scroll Position"></a>Get/Set Scroll Position</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; scroll &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"><span class="keyword">const</span> &#123; getScrollPosition, setScrollPosition &#125; = scroll</div><div class="line"></div><div class="line"><span class="comment">// Get scroll position of a element or page. Use it in conjunction with `Utils.dom.getScrollTarget()`</span></div><div class="line">(<span class="built_in">Number</span> pixels) getScrollPosition(scrollTargetDomElement)</div><div class="line"></div><div class="line"><span class="comment">// Setting scroll position of an element or page:</span></div><div class="line">setScrollPosition (scrollTargetElement, offset[, duration])</div><div class="line"><span class="comment">// if "duration" is specified then it will animate the scrolling</span></div></pre></td></tr></table></figure>
<h2 id="Determine-Scroll-Height"><a href="#Determine-Scroll-Height" class="headerlink" title="Determine Scroll Height"></a>Determine Scroll Height</h2><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; scroll &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"><span class="keyword">const</span> &#123; getScrollHeight &#125; = scroll</div><div class="line"></div><div class="line"><span class="comment">// get scrolling container inner height</span></div><div class="line">(<span class="built_in">Number</span>) getScrollHeight(scrollTargetDomElement)</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log( getScrollHeight(el) )</div><div class="line"><span class="comment">// 824 (it's in pixels always)</span></div></pre></td></tr></table></figure>
<h2 id="Determining-Scrollbar-Width"><a href="#Determining-Scrollbar-Width" class="headerlink" title="Determining Scrollbar Width"></a>Determining Scrollbar Width</h2><p>Computes the width of scrollbar in pixels.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; scroll &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"><span class="keyword">const</span> &#123; getScrollbarWidth &#125; = scroll</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(getScrollbarWidth()) <span class="comment">// 16 (it's in pixels)</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Search (Textfield)]]></title>
      <url>http://beta.quasar-framework.org/components/search.html</url>
      <content type="html"><![CDATA[<p>The Search component offers the users an input field with additional features for searching purposes. For autocomplete functionality, also refer to <a href="/components/autocomplete.html">QAutocomplete</a> documentation.</p>
<input type="hidden" data-fullpage-demo="forms/search">

<p>Works well with <a href="/components/field.html">QField</a> for additional functionality such as a helper, error message placeholder and many others.</p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-search</span> <span class="attr">v-model</span>=<span class="string">"search"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><p>Supports <code>v-model</code> which should be binded to a String or Number (depending on <code>type</code> property used) in your scope.</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>icon</code></td>
<td>String</td>
<td>Icon to use.</td>
</tr>
<tr>
<td><code>type</code></td>
<td>String</td>
<td>Must be one of the following: <code>text</code> (default), <code>email</code>, <code>tel</code>, <code>number</code> and <code>url</code>. This is important as it determines the keyboard type popping up on mobile devices.</td>
</tr>
<tr>
<td><code>debounce</code></td>
<td>Number</td>
<td>Number of ms to debounce input. Default is 300.</td>
</tr>
</tbody>
</table>
<p>A more involved example:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-search</span></span></div><div class="line">  <span class="attr">v-model</span>=<span class="string">"searchModel"</span></div><div class="line">  <span class="attr">:debounce</span>=<span class="string">"600"</span></div><div class="line">  <span class="attr">placeholder</span>=<span class="string">"Hotels"</span></div><div class="line">  <span class="attr">icon</span>=<span class="string">"local_hotel"</span></div><div class="line">  <span class="attr">float-label</span>=<span class="string">"What is your hotel?"</span></div><div class="line">/&gt;</div></pre></td></tr></table></figure></p>
<p>Common input field properties:</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>autofocus</code></td>
<td>Boolean</td>
<td>Focus input field after rendering component.</td>
</tr>
<tr>
<td><code>placeholder</code></td>
<td>String</td>
<td>A text to be shown on textfield, mainly to explain what should be entered.</td>
</tr>
<tr>
<td><code>name</code></td>
<td>String</td>
<td>Adds a “name” attribute to the input field.</td>
</tr>
<tr>
<td><code>max-length</code></td>
<td>Number/String</td>
<td>Maximum characters allowed on input field.</td>
</tr>
</tbody>
</table>
<p>Common input frame properties:</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>prefix</code></td>
<td>String</td>
<td>A text that should be shown before the textfield.</td>
</tr>
<tr>
<td><code>suffix</code></td>
<td>String</td>
<td>A text that should be shown after the textfield.</td>
</tr>
<tr>
<td><code>float-label</code></td>
<td>String</td>
<td>A text label that will “float” up above the input field, once the input field gets focus.</td>
</tr>
<tr>
<td><code>stack-label</code></td>
<td>String</td>
<td>A text label that will be shown above the input field and is static.</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>One from <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>inverted</code></td>
<td>Boolean</td>
<td>Inverted mode. Color is applied to background instead.</td>
</tr>
<tr>
<td><code>dark</code></td>
<td>Boolean</td>
<td>Is QSearch rendered on a dark background?</td>
</tr>
<tr>
<td><code>align</code></td>
<td>String</td>
<td>One of ‘left’, ‘center’ or ‘right’ which determines the text align within textfield.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, textfield is disabled and the user cannot type anything.</td>
</tr>
<tr>
<td><code>error</code></td>
<td>Boolean</td>
<td>If set to true, the input fields colors are changed to show there is an error.</td>
</tr>
<tr>
<td><code>before</code></td>
<td>Array of Objects</td>
<td>Icon buttons on left side of input frame. Read below more details.</td>
</tr>
<tr>
<td><code>after</code></td>
<td>Array of Objects</td>
<td>Icon buttons on right side of input frame. Read below more details.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Methods"><a href="#Vue-Methods" class="headerlink" title="Vue Methods"></a>Vue Methods</h2><table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>clear()</code></td>
<td>Resets the model to an empty string.</td>
</tr>
<tr>
<td><code>clearAndFocus()</code></td>
<td>Resets the model to an empty string and gives the input focus.</td>
</tr>
<tr>
<td><code>focus()</code></td>
<td>Focused the textfield.</td>
</tr>
<tr>
<td><code>blur()</code></td>
<td>Makes textfield lose focus.</td>
</tr>
<tr>
<td><code>select()</code></td>
<td>Selects all textfield text and focuses.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Vue Event</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@change(newVal)</code></td>
<td>Triggered on model value change.</td>
</tr>
<tr>
<td><code>@focus</code></td>
<td>Triggered on focus.</td>
</tr>
<tr>
<td><code>@blur</code></td>
<td>Triggered a blur.</td>
</tr>
<tr>
<td><code>@keydown</code></td>
<td>Triggered by keydown event on textfield.</td>
</tr>
<tr>
<td><code>@keyup</code></td>
<td>Triggered by keyup event on textfield.</td>
</tr>
<tr>
<td><code>@click</code></td>
<td>Triggered by a native <code>click</code> event on textfield.</td>
</tr>
</tbody>
</table>
<h3 id="Coloring"><a href="#Coloring" class="headerlink" title="Coloring"></a>Coloring</h3><p>Use the <code>color</code> prop with one of the Quasar colors from the <a href="/components/color-palette.html">Color Palette</a>, like <code>primary</code>, <code>secondary</code>, <code>orange-7</code>, <code>teal-2</code>:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-search</span> <span class="attr">color</span>=<span class="string">"orange"</span> <span class="attr">v-model</span>=<span class="string">"search"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>Use the <code>inverted</code> prop, to change the background of the input to the color.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-search</span> <span class="attr">inverted</span> <span class="attr">color</span>=<span class="string">"orange"</span> <span class="attr">v-model</span>=<span class="string">"search"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Error-State"><a href="#Error-State" class="headerlink" title="Error State"></a>Error State</h3><p>Use the <code>error</code> prop to show there has been an error. This will turn the component color to red.<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-search</span> <span class="attr">error</span> <span class="attr">v-model</span>=<span class="string">"search"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-search</span> <span class="attr">:error</span>=<span class="string">"hasError"</span> <span class="attr">inverted</span> <span class="attr">v-model</span>=<span class="string">"search"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="Disable"><a href="#Disable" class="headerlink" title="Disable"></a>Disable</h3><p>Use the <code>disable</code> prop to stop user input.<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-search</span> <span class="attr">disable</span> <span class="attr">v-model</span>=<span class="string">"search"</span> <span class="attr">color</span>=<span class="string">"primary"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="Usage-with-Layout"><a href="#Usage-with-Layout" class="headerlink" title="Usage with Layout"></a>Usage with Layout</h2><p>If you’d like to set search within a QToolbar on QLayout:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-layout</span>&gt;</span></div><div class="line">  ...</div><div class="line">  <span class="comment">&lt;!--</span></div><div class="line">    Notice we set a color for QToolbar and</div><div class="line">    QSearch has "inverted" and color="none" specified.</div><div class="line">    This makes QSearch use background color set by QToolbar.</div><div class="line">  --&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">q-toolbar</span> <span class="attr">slot</span>=<span class="string">"header"</span> <span class="attr">color</span>=<span class="string">"primary"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-search</span> <span class="attr">inverted</span> <span class="attr">color</span>=<span class="string">"none"</span> <span class="attr">v-model</span>=<span class="string">"search"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-toolbar</span>&gt;</span></div><div class="line">  ...</div><div class="line"><span class="tag">&lt;/<span class="name">q-layout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="Formatting"><a href="#Formatting" class="headerlink" title="Formatting"></a>Formatting</h2><p>It is possible to add formatting to a QSearch in two ways. One is for the basic component. The other is with the QField component. Both methods offer “inverted” coloring.</p>
<h3 id="Additional-Vue-Properties"><a href="#Additional-Vue-Properties" class="headerlink" title="Additional Vue Properties"></a>Additional Vue Properties</h3><table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>The color the QInput should have. The default is <code>primary</code>.</td>
</tr>
<tr>
<td><code>inverted</code></td>
<td>Boolean</td>
<td>Set to <code>true</code>, to color field’s background set by the <code>color</code> prop.</td>
</tr>
<tr>
<td><code>dark</code></td>
<td>Boolean</td>
<td>Set to true, if the field is on a dark background. It will invert the text color to make it light.</td>
</tr>
<tr>
<td><code>align</code></td>
<td>Text</td>
<td>Controls the ‘right’, ‘center’ or ‘left’ alignment of the input. The default is ‘left’.</td>
</tr>
</tbody>
</table>
<h3 id="Basic-Formatting-Examples"><a href="#Basic-Formatting-Examples" class="headerlink" title="Basic Formatting Examples"></a>Basic Formatting Examples</h3><p>This will color the field black.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-search</span> <span class="attr">v-model</span>=<span class="string">"text"</span> <span class="attr">float-label</span>=<span class="string">"Colored"</span> <span class="attr">color</span>=<span class="string">"black"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>This will show an inverted colored input field in amber. Here, the text is automatically inverted to a lighter color.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-search</span> <span class="attr">v-model</span>=<span class="string">"text"</span> <span class="attr">inverted</span> <span class="attr">color</span>=<span class="string">"amber"</span> <span class="attr">stack-label</span>=<span class="string">"Amber Colored Background"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Alignment"><a href="#Alignment" class="headerlink" title="Alignment"></a>Alignment</h3><p>You can also align the input to the right, center or left. The default is left. The below example will show a field for Euro currency input.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Align textfield content to the right --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-search</span> <span class="attr">v-model</span>=<span class="string">"text"</span> <span class="attr">align</span>=<span class="string">"right"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Basic-Usage-with-QField"><a href="#Basic-Usage-with-QField" class="headerlink" title="Basic Usage with QField"></a>Basic Usage with QField</h3><p>It is also possible to further enhance a QInput by wrapping it in a <a href="/components/field.html">QField</a> component.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg-grey-9"</span> <span class="attr">style</span>=<span class="string">"width: 500px; padding: 25px"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-field</span></span></div><div class="line">    <span class="attr">icon</span>=<span class="string">"wifi"</span></div><div class="line">    <span class="attr">label</span>=<span class="string">"Some Label"</span></div><div class="line">    <span class="attr">:count</span>=<span class="string">"10"</span></div><div class="line">    <span class="attr">helper</span>=<span class="string">"Some helper"</span></div><div class="line">    <span class="attr">:error</span>=<span class="string">"error"</span></div><div class="line">    <span class="attr">error-label</span>=<span class="string">"Some error"</span></div><div class="line">  &gt;</div><div class="line">    <span class="tag">&lt;<span class="name">q-search</span></span></div><div class="line">      <span class="attr">v-model</span>=<span class="string">"text"</span></div><div class="line">      <span class="attr">dark</span></div><div class="line">      <span class="attr">inverted</span></div><div class="line">      <span class="attr">color</span>=<span class="string">"black"</span></div><div class="line">      <span class="attr">float-label</span>=<span class="string">"Textfield"</span></div><div class="line">    /&gt;</div><div class="line">  <span class="tag">&lt;/<span class="name">q-field</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>The above usage of QField will show the input field within a dark grey background with an inverse white text. Notice the usage of the <code>dark</code> prop for QInput. This controls the inversion of the text color.</p>
<p>Please refer to the <a href="/components/field.html">QField documentation</a> for more info about its usage.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Select]]></title>
      <url>http://beta.quasar-framework.org/components/select.html</url>
      <content type="html"><![CDATA[<p>Select component has two types of selection: single selection (using Radios or Lists) or multiple selection (using Checkboxes or Toggles). This component opens up a Popover for the selection list and action. A filter can also be used for longer lists.</p>
<input type="hidden" data-fullpage-demo="forms/select/standard-select">

<p>If you need a Dialog for the selection, use the sibling <a href="/components/dialog-select.html">Dialog Select</a> component.</p>
<p>Works well with <a href="/components/field.html">QField</a> for additional functionality such as a helper, error message placeholder and many others.</p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- Single Selection using Radios --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-select</span></span></div><div class="line">      <span class="attr">v-model</span>=<span class="string">"select"</span></div><div class="line">      <span class="attr">float-label</span>=<span class="string">"Is Quasar Awesome?"</span></div><div class="line">      <span class="attr">radio</span></div><div class="line">     <span class="attr">:options</span>=<span class="string">"selectOptions"</span></div><div class="line">    /&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- Single Selection as a simple List --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-select</span></span></div><div class="line">      <span class="attr">v-model</span>=<span class="string">"select"</span></div><div class="line">      <span class="attr">:options</span>=<span class="string">"selectOptions"</span></div><div class="line">    /&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- Multiple Selection using Checkboxes by default --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-select</span></span></div><div class="line">      <span class="attr">multiple</span></div><div class="line">      <span class="attr">v-model</span>=<span class="string">"multipleSelect"</span></div><div class="line">      <span class="attr">:options</span>=<span class="string">"selectOptions"</span></div><div class="line">    /&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- Multiple Selection using Toggles --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-select</span></span></div><div class="line">      <span class="attr">multiple</span></div><div class="line">      <span class="attr">toggle</span></div><div class="line">      <span class="attr">v-model</span>=<span class="string">"multipleSelect"</span></div><div class="line">      <span class="attr">:options</span>=<span class="string">"selectOptions"</span></div><div class="line">      @<span class="attr">change</span>=<span class="string">"inputChange"</span></div><div class="line">    /&gt;</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  data () &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      selectOptions: [</div><div class="line">        &#123;</div><div class="line">          label: <span class="string">'Google'</span>,</div><div class="line">          value: <span class="string">'goog'</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          label: <span class="string">'Facebook'</span>,</div><div class="line">          value: <span class="string">'fb'</span></div><div class="line">        &#125;</div><div class="line">      ]</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><p>Supports <code>v-model</code> which should be the String for single selection and Array for multiple selection.</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>options</code></td>
<td>Array</td>
<td>(<strong>Required</strong>) A list of objects to present as the selection’s options. See below for the data format for the array.</td>
</tr>
<tr>
<td><code>multiple</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, multiple selections will be allowed.</td>
</tr>
<tr>
<td><code>radio</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, the selection will be through radios. For single selection only.</td>
</tr>
<tr>
<td><code>toggle</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, the selection options will offer a toggle to select them.</td>
</tr>
<tr>
<td><code>chips</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, the selections will appear as chips (instead of comma separated strings) on the input frame (works for multiple selection only).</td>
</tr>
<tr>
<td><code>frame-color</code></td>
<td>String</td>
<td>One from <a href="/components/color-palette.html">Quasar Color Palette</a>. Useful when <code>color</code> is to be used for Chips alone and you want a different color for the input frame.</td>
</tr>
<tr>
<td><code>filter</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, the selections will offer an input to filter the selection options.</td>
</tr>
<tr>
<td><code>filter-placeholder</code></td>
<td>String</td>
<td>A text to show in the filter input field. Default is “Filter”.</td>
</tr>
<tr>
<td><code>separator</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, the selection options will be separarted by a line.</td>
</tr>
<tr>
<td><code>display-value</code></td>
<td>String</td>
<td>Overrides text displayed in input frame. See “Working with Display Value” section below.</td>
</tr>
</tbody>
</table>
<p>Common input frame properties:</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>prefix</code></td>
<td>String</td>
<td>A text that should be shown before the textfield.</td>
</tr>
<tr>
<td><code>suffix</code></td>
<td>String</td>
<td>A text that should be shown after the textfield.</td>
</tr>
<tr>
<td><code>float-label</code></td>
<td>String</td>
<td>A text label that will “float” up above the input field, once the input field gets focus.</td>
</tr>
<tr>
<td><code>stack-label</code></td>
<td>String</td>
<td>A text label that will be shown above the input field and is static.</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>A color from the <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>inverted</code></td>
<td>Boolean</td>
<td>Inverted mode. The color is applied to the background instead.</td>
</tr>
<tr>
<td><code>dark</code></td>
<td>Boolean</td>
<td>Is QSelect rendered on a dark background?</td>
</tr>
<tr>
<td><code>align</code></td>
<td>String</td>
<td>One of ‘left’, ‘center’ or ‘right’ which determines the text align within the textfield.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, the field is disabled and the user cannot select anything.</td>
</tr>
<tr>
<td><code>error</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, the input field’s colors are changed to show there is an error.</td>
</tr>
<tr>
<td><code>before</code></td>
<td>Array of Objects</td>
<td>Icon buttons positioned on the left side of field.</td>
</tr>
<tr>
<td><code>after</code></td>
<td>Array of Objects</td>
<td>Icon buttons on the right side of the field.</td>
</tr>
</tbody>
</table>
<h3 id="Icon-buttons"><a href="#Icon-buttons" class="headerlink" title="Icon buttons"></a>Icon buttons</h3><p>This section refers to <code>before</code> and <code>after</code> properties which can add additional buttons as icons to the textfield. Here is the structure of the two properties:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="comment">// required icon</span></div><div class="line">  icon: <span class="built_in">String</span>,</div><div class="line">  <span class="comment">// required function to call when</span></div><div class="line">  <span class="comment">// icon is clicked/tapped</span></div><div class="line">  handler: <span class="built_in">Function</span>,</div><div class="line"></div><div class="line">  <span class="comment">// Optional. Show icon button</span></div><div class="line">  <span class="comment">// if model has a value</span></div><div class="line">  content: <span class="built_in">Boolean</span>,</div><div class="line"></div><div class="line">  <span class="comment">// Optional. Show icon button</span></div><div class="line">  <span class="comment">// if textfield is marked with error</span></div><div class="line">  error: <span class="built_in">Boolean</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Examples:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!--</span></div><div class="line">  Show an icon button (with 'warning' as icon)</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">q-select</span></span></div><div class="line">  <span class="attr">v-model</span>=<span class="string">"selection"</span></div><div class="line">  <span class="attr">:options</span>=<span class="string">"selectListOptions"</span></div><div class="line">  <span class="attr">:after</span>=<span class="string">"[</span></div><div class="line">    &#123;</div><div class="line">      icon: 'warning',</div><div class="line">      handler () &#123;</div><div class="line">        // do something...</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]"</div><div class="line">/&gt;</div><div class="line"></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line">  Show an icon button (with 'arrow_forward' as icon)</div><div class="line">  when the model has a non empty value (like something has</div><div class="line">  been selected).</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">q-select</span></span></div><div class="line">  <span class="attr">v-model</span>=<span class="string">"selection"</span></div><div class="line">  <span class="attr">:options</span>=<span class="string">"selectListOptions"</span></div><div class="line">  <span class="attr">:after</span>=<span class="string">"[</span></div><div class="line">    &#123;</div><div class="line">      icon: 'arrow_forward',</div><div class="line">      content: true,</div><div class="line">      handler () &#123;</div><div class="line">        // do something...</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]"</div><div class="line">/&gt;</div></pre></td></tr></table></figure></p>
<h3 id="Selection-Types"><a href="#Selection-Types" class="headerlink" title="Selection Types"></a>Selection Types</h3><p>You have a number of possible selection types to choose from. They are straight text with optional icons and stamp values, radios, checkboxes, and toggles. Text is default for single selections and checkboxes are default for multiple selections.</p>
<p>Use the <code>radio</code> prop for single selections. These checkboxes are inserted where the icons would be, so you cannot have icons and checkboxes for multiple selections. If you still want icons with your multiple selections, use the <code>toggle</code> prop. This would, however, replace the stamp option.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Radios for single selections --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-select</span></span></div><div class="line">  <span class="attr">radio</span></div><div class="line">  @<span class="attr">change</span>=<span class="string">"onChange"</span></div><div class="line">  <span class="attr">v-model</span>=<span class="string">"select"</span></div><div class="line">  <span class="attr">float-label</span>=<span class="string">"Gogu"</span></div><div class="line">  <span class="attr">:options</span>=<span class="string">"selectListOptions"</span></div><div class="line">/&gt;</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Toggles for Multiple Selection --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-select</span></span></div><div class="line">  <span class="attr">toggle</span></div><div class="line">  <span class="attr">multiple</span></div><div class="line">  <span class="attr">v-model</span>=<span class="string">"multipleSelect"</span></div><div class="line"> <span class="attr">:options</span>=<span class="string">"selectListOptions"</span></div><div class="line">/&gt;</div></pre></td></tr></table></figure>
<h3 id="The-Options-Array-Format"><a href="#The-Options-Array-Format" class="headerlink" title="The Options Array Format"></a>The Options Array Format</h3><p>Below are examples of the array of options you must use to create the selection options:</p>
<p>Select options object:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">selectOptions: [</div><div class="line">  &#123;</div><div class="line">    label: <span class="string">'Google'</span>,</div><div class="line">    value: <span class="string">'goog'</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    label: <span class="string">'Facebook'</span>,</div><div class="line">    value: <span class="string">'fb'</span></div><div class="line">  &#125;,</div><div class="line">  ...</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>More advanced select list object example:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">selectListOptions: [</div><div class="line">  &#123;</div><div class="line">    label: <span class="string">'Google'</span>,</div><div class="line">    icon: <span class="string">'search'</span>,</div><div class="line">    value: <span class="string">'goog'</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    label: <span class="string">'Facebook'</span>,</div><div class="line">    inset: <span class="literal">true</span>,</div><div class="line">    description: <span class="string">'Enables communication'</span>,</div><div class="line">    value: <span class="string">'fb'</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    label: <span class="string">'Oracle'</span>,</div><div class="line">    description: <span class="string">'Some Java for today?'</span>,</div><div class="line">    icon: <span class="string">'mail'</span>,</div><div class="line">    rightIcon: <span class="string">'alarm'</span>,</div><div class="line">    value: <span class="string">'ora'</span></div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    label: <span class="string">'Apple Inc.'</span>,</div><div class="line">    inset: <span class="literal">true</span>,</div><div class="line">    stamp: <span class="string">'10 min'</span>,</div><div class="line">    value: <span class="string">'appl'</span></div><div class="line">  &#125;,</div><div class="line">  ...</div><div class="line">]</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>Note</strong><br>Set “inset” to <code>true</code>, instead of an icon, so the label text is properly aligned with the other options that use icons or avatars.</p>
</blockquote>
<p>Use an Object for each option like above (notice that it uses some properties from <a href="/components/lists-and-list-items.html">List and List Items</a> components, like “label”, “sublabel”, “stamp”, “icon”, “rightIcon” and so on. Here is the full list of properties that can be used for each option:</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>icon</code></td>
<td>String</td>
<td>Icon on the left to use.</td>
</tr>
<tr>
<td><code>avatar</code></td>
<td>String</td>
<td>URL pointing to statics for an avatar.</td>
</tr>
<tr>
<td><code>letter</code></td>
<td>String</td>
<td>One character String.</td>
</tr>
<tr>
<td><code>image</code></td>
<td>String</td>
<td>URL pointing to statics for an image.</td>
</tr>
<tr>
<td><code>label</code></td>
<td>String</td>
<td>Main label of the selection.</td>
</tr>
<tr>
<td><code>sublabel</code></td>
<td>String</td>
<td>Sub-label of the selection.</td>
</tr>
<tr>
<td><code>labelLines</code></td>
<td>String/Number</td>
<td>Number of lines that label can expand to.</td>
</tr>
<tr>
<td><code>sublabelLines</code></td>
<td>String/Number</td>
<td>Number of lines that the sublabel can expand to.</td>
</tr>
<tr>
<td><code>inset</code></td>
<td>Boolean</td>
<td>Inset Label if no left-side is specified (no icon, avatar, letter or image).</td>
</tr>
<tr>
<td><code>rightIcon</code></td>
<td>String</td>
<td>Icon on the right to use.</td>
</tr>
<tr>
<td><code>rightAvatar</code></td>
<td>String</td>
<td>URL pointing to statics for an avatar on right side.</td>
</tr>
<tr>
<td><code>rightLetter</code></td>
<td>String</td>
<td>One character String for right side.</td>
</tr>
<tr>
<td><code>rightImage</code></td>
<td>String</td>
<td>URL pointing to statics for an image on right side.</td>
</tr>
<tr>
<td><code>stamp</code></td>
<td>String</td>
<td>Stamp to use for right side. Example: ‘10 min ago’.</td>
</tr>
</tbody>
</table>
<h3 id="Working-with-Display-Value"><a href="#Working-with-Display-Value" class="headerlink" title="Working with Display Value"></a>Working with Display Value</h3><p>If for some reason you want to have total control over the text in the input frame (replacing the comma delimited option strings), then use <code>display-value</code> property:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-select</span></span></div><div class="line">  <span class="attr">:display-value</span>=<span class="string">"`$&#123; multipleSelect.length &#125; item$&#123; multipleSelect.length !== 1 ? 's' : '' &#125; selected`"</span></div><div class="line">  <span class="attr">multiple</span></div><div class="line">  <span class="attr">v-model</span>=<span class="string">"multipleSelect"</span></div><div class="line">  <span class="attr">float-label</span>=<span class="string">"Select a company"</span></div><div class="line">  <span class="attr">:options</span>=<span class="string">"selectLongListOptions"</span></div><div class="line">/&gt;</div></pre></td></tr></table></figure>
<p>For a more elegant solution (and more efficient too), use a computed property:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- Notice "display-value" is binded to "text" variable --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-select</span></span></div><div class="line">    <span class="attr">:display-value</span>=<span class="string">"text"</span></div><div class="line">    <span class="attr">multiple</span></div><div class="line">    <span class="attr">v-model</span>=<span class="string">"multipleSelect"</span></div><div class="line">    <span class="attr">float-label</span>=<span class="string">"Select a company"</span></div><div class="line">    <span class="attr">:options</span>=<span class="string">"selectLongListOptions"</span></div><div class="line">  /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  data () &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      multipleSelect: <span class="comment">/* value */</span>,</div><div class="line">      selectOptions: <span class="comment">/* options */</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  computed: &#123;</div><div class="line">    text () &#123;</div><div class="line">      <span class="comment">// in this example we want to show how many items are selected,</span></div><div class="line">      <span class="comment">// so we need to check model (multipleSelect) length</span></div><div class="line">      <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;this.multipleSelect.length&#125;</span> item<span class="subst">$&#123;this.multipleSelect.length &gt; 1 ? 's' : ''&#125;</span> selected`</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="Vue-Methods"><a href="#Vue-Methods" class="headerlink" title="Vue Methods"></a>Vue Methods</h2><table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>open()</code></td>
<td>Opens the Popover</td>
</tr>
<tr>
<td><code>close()</code></td>
<td>Closes the Popover</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Vue Event</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@change(newValue)</code></td>
<td>Triggered on model value change.</td>
</tr>
<tr>
<td><code>@focus</code></td>
<td>Triggered, when the field gets focus.</td>
</tr>
<tr>
<td><code>@blur</code></td>
<td>Triggered, when the field loses focus.</td>
</tr>
</tbody>
</table>
<h2 id="More-Examples"><a href="#More-Examples" class="headerlink" title="More Examples"></a>More Examples</h2><h3 id="Error-State"><a href="#Error-State" class="headerlink" title="Error State"></a>Error State</h3><p>Use the <code>error</code> prop, to change the color of the component to red:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-select</span></span></div><div class="line">  <span class="attr">error</span></div><div class="line">  <span class="attr">multiple</span></div><div class="line">  <span class="attr">v-model</span>=<span class="string">"multipleSelect"</span></div><div class="line">  <span class="attr">:options</span>=<span class="string">"selectOptions"</span></div><div class="line">/&gt;</div></pre></td></tr></table></figure></p>
<h3 id="Disable"><a href="#Disable" class="headerlink" title="Disable"></a>Disable</h3><p>Use the <code>disable</code> prop, to stop access to the field.<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Disabled state --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-select</span></span></div><div class="line">  <span class="attr">disable</span></div><div class="line">  <span class="attr">float-label</span>=<span class="string">"Disabled Select"</span></div><div class="line">  <span class="attr">multiple</span></div><div class="line">  <span class="attr">v-model</span>=<span class="string">"multipleSelect"</span></div><div class="line">  <span class="attr">:options</span>=<span class="string">"selectOptions"</span></div><div class="line">/&gt;</div></pre></td></tr></table></figure></p>
<h3 id="Labeling"><a href="#Labeling" class="headerlink" title="Labeling"></a>Labeling</h3><p>As with any input, you have two options for labels. Stack and Floating. Unless you wrap it with a QField which has its own label.<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Floating Label --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-select</span></span></div><div class="line">  <span class="attr">float-label</span>=<span class="string">"This Label Floats"</span></div><div class="line">  <span class="attr">multiple</span></div><div class="line">  <span class="attr">v-model</span>=<span class="string">"multipleSelect"</span></div><div class="line">  <span class="attr">:options</span>=<span class="string">"selectOptions"</span></div><div class="line">/&gt;</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Stack Label --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-select</span></span></div><div class="line">  <span class="attr">static-label</span>=<span class="string">"Company"</span></div><div class="line">  <span class="attr">multiple</span></div><div class="line">  <span class="attr">v-model</span>=<span class="string">"multipleSelect"</span></div><div class="line">  <span class="attr">:options</span>=<span class="string">"selectOptions"</span></div><div class="line">/&gt;</div></pre></td></tr></table></figure></p>
<h3 id="Coloring"><a href="#Coloring" class="headerlink" title="Coloring"></a>Coloring</h3><p>Use the <code>color</code>, <code>inverted</code> and <code>frame-color</code> props to control the coloring of the component.<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Color --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-select</span></span></div><div class="line">  <span class="attr">color</span>=<span class="string">"amber"</span></div><div class="line">  <span class="attr">v-model</span>=<span class="string">"select"</span></div><div class="line">  <span class="attr">:options</span>=<span class="string">"selectListOptions"</span></div><div class="line">/&gt;</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Inverted Color --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-select</span></span></div><div class="line">  <span class="attr">inverted</span></div><div class="line">  <span class="attr">color</span>=<span class="string">"secondary"</span></div><div class="line">  <span class="attr">v-model</span>=<span class="string">"select"</span></div><div class="line">  <span class="attr">:options</span>=<span class="string">"selectListOptions"</span></div><div class="line">/&gt;</div><div class="line"></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line">  With a color for chips and a different color for the frame.</div><div class="line">  Notice "color" and "frame-color". By default, "color" is used</div><div class="line">  for both frame and chips, but specifying a frame-color overrides</div><div class="line">  the color for the frame.</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">q-select</span></span></div><div class="line">  <span class="attr">frame-color</span>=<span class="string">"amber"</span></div><div class="line">  <span class="attr">inverted</span></div><div class="line">  <span class="attr">color</span>=<span class="string">"dark"</span></div><div class="line">  <span class="attr">multiple</span></div><div class="line">  <span class="attr">chips</span></div><div class="line">  <span class="attr">v-model</span>=<span class="string">"multipleSelect"</span></div><div class="line">  <span class="attr">:options</span>=<span class="string">"selectListOptions"</span></div><div class="line">  <span class="attr">float-label</span>=<span class="string">"Some label"</span></div><div class="line">/&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>Note</strong><br>The optional <code>frame-color</code> prop is useful when using chips as selected values, so the chips stand out from the background color.</p>
</blockquote>
<h3 id="Usage-Inside-of-a-List"><a href="#Usage-Inside-of-a-List" class="headerlink" title="Usage Inside of a List"></a>Usage Inside of a List</h3><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-list</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-list-header</span>&gt;</span>Single Selection<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"supervisor_account"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-select</span></span></div><div class="line">        <span class="attr">class</span>=<span class="string">"no-margin"</span></div><div class="line">        <span class="attr">v-model</span>=<span class="string">"select"</span></div><div class="line">        <span class="attr">:options</span>=<span class="string">"selectOptions"</span></div><div class="line">      /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item-separator</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-list-header</span>&gt;</span>Multiple Selection<span class="tag">&lt;/<span class="name">q-list-header</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"supervisor_account"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-select</span></span></div><div class="line">        <span class="attr">multiple</span></div><div class="line">        <span class="attr">class</span>=<span class="string">"no-margin"</span></div><div class="line">        <span class="attr">v-model</span>=<span class="string">"multipleSelect"</span></div><div class="line">        <span class="attr">:options</span>=<span class="string">"selectOptions"</span></div><div class="line">      /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CSS Shadows (Elevation)]]></title>
      <url>http://beta.quasar-framework.org/components/shadows.html</url>
      <content type="html"><![CDATA[<p>Simple yet effective way to add shadows to create a depth/elevation effect.<br>The shadows are in accordance to Material Design specifications (24 levels of depth).</p>
<p>Don’t forget to check the demo.</p>
<input type="hidden" data-fullpage-demo="css-helpers/shadows">

<table>
<thead>
<tr>
<th>CSS Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>no-shadow</code></td>
<td>Remove any shadow</td>
</tr>
<tr>
<td><code>inset-shadow</code></td>
<td>Set an inset shadow</td>
</tr>
<tr>
<td><code>shadow-1</code></td>
<td>Set a depth of 1</td>
</tr>
<tr>
<td><code>shadow-2</code></td>
<td>Set a depth of 2</td>
</tr>
<tr>
<td><code>shadow-N</code></td>
<td>Where <code>N</code> is an integer from 1 to 24.</td>
</tr>
<tr>
<td><code>shadow-transition</code></td>
<td>Apply a CSS transition on the shadow; best use in conjonction with <code>hoverable</code> classes</td>
</tr>
</tbody>
</table>
<p>Example:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"shadow-1"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>The shadows above point towards the bottom of the element. If you want them to point towards the top of the element, add <code>up</code> before the number:</p>
<table>
<thead>
<tr>
<th>CSS Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>shadow-up-1</code></td>
<td>Set a depth of 1</td>
</tr>
<tr>
<td><code>shadow-up-2</code></td>
<td>Set a depth of 2</td>
</tr>
<tr>
<td><code>shadow-up-N</code></td>
<td>Where <code>N</code> is an integer from 1 to 24.</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Slide Transition]]></title>
      <url>http://beta.quasar-framework.org/components/slide-transition.html</url>
      <content type="html"><![CDATA[<p>QSlideTransitions slides the DOM element (or component) up or down, based on its visibility: works alongside <code>v-show</code> and <code>v-if</code> on a single element, similar to Vue’s Transition component with the only difference being that it’s not a group transition too (it only applies to one DOM element or component).</p>
<input type="hidden" data-fullpage-demo="animation/slide-transition">

<p>Example:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-slide-transition</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">img</span></span></div><div class="line">        <span class="attr">v-show</span>=<span class="string">"visible"</span></div><div class="line">        <span class="attr">src</span>=<span class="string">"~assets/quasar.jpg"</span></div><div class="line">      &gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">q-slide-transition</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">q-btn</span> @<span class="attr">click</span>=<span class="string">"toggleVisibility"</span>&gt;</span></div><div class="line">      Toggle</div><div class="line">    <span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  ...,</div><div class="line">  data: &#123;</div><div class="line">    ...,</div><div class="line">    visible: <span class="literal">true</span></div><div class="line">  &#125;,</div><div class="line">  methods: &#123;</div><div class="line">    ...,</div><div class="line">    toggleVisibility () &#123;</div><div class="line">      <span class="keyword">this</span>.visible = !<span class="keyword">this</span>.visible</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>You can also trigger the animation when rendering the component for first time (on appearance) too, by specifying the <code>appear</code> Boolean prop:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-slide-transition</span> <span class="attr">appear</span>&gt;</span></div><div class="line">  ...</div><div class="line"><span class="tag">&lt;/<span class="name">q-slide-transition</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Slider]]></title>
      <url>http://beta.quasar-framework.org/components/slider.html</url>
      <content type="html"><![CDATA[<p>Quasar Slider is a great way to make the user specify a number value between a minimum and maximum value, with optional steps between valid values.</p>
<input type="hidden" data-fullpage-demo="forms/slider">

<p>Also check its “sibling”, the <a href="/components/range.html">Range</a> component.<br>Remember you can use QSlider wrapped by a <a href="/components/field.html">QField</a> too.</p>
<p>Works well with <a href="/components/field.html">QField</a> for additional functionality such as a helper, error message placeholder and many others.</p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-slider</span> <span class="attr">v-model</span>=<span class="string">"selectedValue"</span> <span class="attr">:min</span>=<span class="string">"1"</span> <span class="attr">:max</span>=<span class="string">"7"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>Example with <code>step</code>, <code>label</code> and <code>snap</code>:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-slider</span></span></div><div class="line">  <span class="attr">v-model</span>=<span class="string">"selectedValue"</span></div><div class="line">  <span class="attr">:min</span>=<span class="string">"0"</span></div><div class="line">  <span class="attr">:max</span>=<span class="string">"10"</span></div><div class="line">  <span class="attr">:step</span>=<span class="string">"2"</span></div><div class="line">  <span class="attr">label</span></div><div class="line">  <span class="attr">snap</span></div><div class="line">/&gt;</div></pre></td></tr></table></figure></p>
<p>Example with square slider button:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-slider</span></span></div><div class="line">  <span class="attr">v-model</span>=<span class="string">"selectedValue"</span></div><div class="line">  <span class="attr">:min</span>=<span class="string">"0"</span></div><div class="line">  <span class="attr">:max</span>=<span class="string">"10"</span></div><div class="line">  <span class="attr">square</span></div><div class="line">/&gt;</div></pre></td></tr></table></figure></p>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><p>Supports <code>v-model</code> which should be binded to a Number in your scope.</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>min</code></td>
<td>Number</td>
<td>Minimum value of the model. Default is 1.</td>
</tr>
<tr>
<td><code>max</code></td>
<td>Number</td>
<td>Maximum value of the model. Default is 5.</td>
</tr>
<tr>
<td><code>label</code></td>
<td>Boolean</td>
<td>Popup a label when user clicks/taps on the Range and moves it.</td>
</tr>
<tr>
<td><code>label-always</code></td>
<td>Boolean</td>
<td>Always display the label.</td>
</tr>
<tr>
<td><code>label-value</code></td>
<td>String</td>
<td>Override default label value.</td>
</tr>
<tr>
<td><code>fill-handle-always</code></td>
<td>Boolean</td>
<td>Fill handle even if at minimum value.</td>
</tr>
<tr>
<td><code>step</code></td>
<td>Number</td>
<td>Specify step amount between valid values.</td>
</tr>
<tr>
<td><code>snap</code></td>
<td>Boolean</td>
<td>Range handler will snap on values, rather than sliding freely; good to use along <code>step</code>; also displays step markers on the Range.</td>
</tr>
<tr>
<td><code>markers</code></td>
<td>Boolean</td>
<td>Display markers on background, one for each possible value for the model.</td>
</tr>
<tr>
<td><code>square</code></td>
<td>Boolean</td>
<td>When <code>true</code>. the slider button is square instead of round.</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>One of <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>error</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, the slider is turned red.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, the user cannot change model value.</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>IMPORTANT</strong><br>Make sure you choose the <code>min</code>, <code>max</code> and <code>step</code> value correctly. <code>step</code> must be a divisor of <code>max - min</code>, otherwise the component won’t work right. This is because all valid steps must be able to hold an equal position within the <code>min</code> and <code>max</code> values.</p>
</blockquote>
<h3 id="Error-State"><a href="#Error-State" class="headerlink" title="Error State"></a>Error State</h3><p>Use the <code>error</code> prop to indicate there is an error. This will turn the component red:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-slider</span> <span class="attr">error</span> <span class="attr">v-model</span>=<span class="string">"selectedValue"</span> <span class="attr">:min</span>=<span class="string">"0"</span> <span class="attr">:max</span>=<span class="string">"50"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="Disabled"><a href="#Disabled" class="headerlink" title="Disabled"></a>Disabled</h3><p>Use the <code>disable</code> prop to stop the user from changing the slider value.<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-slider</span> <span class="attr">v-model</span>=<span class="string">"selectedValue"</span> <span class="attr">:min</span>=<span class="string">"0"</span> <span class="attr">:max</span>=<span class="string">"50"</span> <span class="attr">disable</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="Overriding-Label"><a href="#Overriding-Label" class="headerlink" title="Overriding Label"></a>Overriding Label</h3><p>In the example below we add a “px” suffix to the label.<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-range</span></span></div><div class="line">  <span class="attr">v-model</span>=<span class="string">"label"</span></div><div class="line">  <span class="attr">:min</span>=<span class="string">"-20"</span> <span class="attr">:max</span>=<span class="string">"20"</span></div><div class="line">  <span class="attr">:label-value</span>=<span class="string">"`$&#123;label&#125;px`"</span></div><div class="line">/&gt;</div></pre></td></tr></table></figure></p>
<h3 id="Coloring"><a href="#Coloring" class="headerlink" title="Coloring"></a>Coloring</h3><p>Use one of the Quasar colors from the Color Palette with the <code>color</code> prop, like <code>primary</code>, <code>secondary</code>, <code>orange-8</code>, <code>teal-4</code>:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-slider</span> <span class="attr">color</span>=<span class="string">"orange"</span> <span class="attr">v-model</span>=<span class="string">"standalone"</span> <span class="attr">:min</span>=<span class="string">"0"</span> <span class="attr">:max</span>=<span class="string">"50"</span> <span class="attr">label</span> /&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Vue Event</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@change(newVal)</code></td>
<td>Triggered on model value change.</td>
</tr>
</tbody>
</table>
<h2 id="Usage-Inside-of-a-List"><a href="#Usage-Inside-of-a-List" class="headerlink" title="Usage Inside of a List"></a>Usage Inside of a List</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-list</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"volume_up"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-slider</span> <span class="attr">v-model</span>=<span class="string">"standalone"</span> <span class="attr">:min</span>=<span class="string">"0"</span> <span class="attr">:max</span>=<span class="string">"50"</span> <span class="attr">label</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"brightness_medium"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-slider</span> <span class="attr">v-model</span>=<span class="string">"standalone"</span> <span class="attr">:min</span>=<span class="string">"0"</span> <span class="attr">:max</span>=<span class="string">"50"</span> <span class="attr">label</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">icon</span>=<span class="string">"mic"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-slider</span> <span class="attr">v-model</span>=<span class="string">"standalone"</span> <span class="attr">:min</span>=<span class="string">"0"</span> <span class="attr">:max</span>=<span class="string">"50"</span> <span class="attr">label</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Spinners]]></title>
      <url>http://beta.quasar-framework.org/components/spinner.html</url>
      <content type="html"><![CDATA[<p>A Spinner is used to show the user a timely process is currently taking place. It is an important UX feature, which gives the user the feeling the system is continuing to work for longer term activities, like grabbing data from the server or some heavy calculations.   </p>
<input type="hidden" data-fullpage-demo="progress/spinner">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Default platform spinner--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-spinner</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Spinner with options --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-spinner</span> <span class="attr">color</span>=<span class="string">"secondary"</span> <span class="attr">:size</span>=<span class="string">"30"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-spinner</span> <span class="attr">color</span>=<span class="string">"teal-4"</span> <span class="attr">size</span>=<span class="string">"40px"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line">  Alternatively, you can set CSS colo prop on</div><div class="line">  a container or directly with `style` attribute on spinner</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">q-spinner</span> <span class="attr">style</span>=<span class="string">"color: #e2aa6f"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>size</code></td>
<td>Number / String</td>
<td>Number (defining the size in pixels) or String (CSS size with unit).</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>CSS color from <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
</tbody>
</table>
<p>You can change the spinner’s size without a loss of quality, because SVGs are used.</p>
<h2 id="Using-Specific-Spinners"><a href="#Using-Specific-Spinners" class="headerlink" title="Using Specific Spinners"></a>Using Specific Spinners</h2><p>If you’d like to use a different spinner than the default, use a specific spinner component, which inherits the <a href="#Vue-Properties">same props as specified above</a>.</p>
<p>The following specific spinners components are available. The name of these components is <code>q-spinner-*name*</code>, where <code>name</code> is one of ‘audio’, ‘ball’, ‘bars’, ‘circles’, ‘comment’, ‘cube’, ‘dots’, ‘grid’, ‘hearts’, ‘ios’, ‘mat’, ‘oval’, ‘puff’, ‘rings’, ‘tail’, ‘facebook’, ‘gears’, ‘hourglass’, ‘infinity’, ‘pie’, ‘radio’.</p>
<p>Example:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Specific spinner icon --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-spinner-audio</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Specific spinner icon with options --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-spinner-audio</span> <span class="attr">color</span>=<span class="string">"primary"</span> <span class="attr">:size</span>=<span class="string">"30"</span> /&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p><strong>Note</strong><br>Having to use an extra component to identify specific spinners might seem like extra work, however, the goal is to be able to remove all other spinner components in your final build, in order to keep the overall package size of your application down to a minimum.  </p>
</blockquote>
<p>The spinners are used in components such as the <a href="/components/inner-loading.html">QInnerLoading</a> and <a href="/components/button.html">QBtn</a> components or within the <a href="/components/loading.html">Loading</a> feature, just to name a few examples.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tabs]]></title>
      <url>http://beta.quasar-framework.org/components/tabs.html</url>
      <content type="html"><![CDATA[<p>Quasar Tabs are a way of displaying more information using less window real estate.<br>One common use case for this component is in Layout’s header/footer in a QToolbar. Please refer to <a href="/components/layout.html">Layouts</a> and <a href="/components/toolbar.html">Toolbar</a> for references.</p>
<input type="hidden" data-fullpage-demo="navigation/tabs/basic-tabs">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>Below is a basic example of the Tabs component using many of its features.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-tabs</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- Tabs - notice slot="title" --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-tab</span> <span class="attr">default</span> <span class="attr">count</span>=<span class="string">"5"</span> <span class="attr">slot</span>=<span class="string">"title"</span> <span class="attr">name</span>=<span class="string">"tab-1"</span> <span class="attr">icon</span>=<span class="string">"message"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-tab</span> <span class="attr">disable</span> <span class="attr">slot</span>=<span class="string">"title"</span> <span class="attr">name</span>=<span class="string">"tab-2"</span> <span class="attr">icon</span>=<span class="string">"fingerprint"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-tab</span> <span class="attr">alert</span> <span class="attr">slot</span>=<span class="string">"title"</span> <span class="attr">name</span>=<span class="string">"tab-3"</span> <span class="attr">icon</span>=<span class="string">"account_box"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-tab</span> <span class="attr">slot</span>=<span class="string">"title"</span> <span class="attr">name</span>=<span class="string">"tab-4"</span> <span class="attr">icon</span>=<span class="string">"accessibility"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-tab</span> <span class="attr">slot</span>=<span class="string">"title"</span> <span class="attr">name</span>=<span class="string">"tab-5"</span> <span class="attr">icon</span>=<span class="string">"build"</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- Targets --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-tab-pane</span> <span class="attr">name</span>=<span class="string">"tab-1"</span>&gt;</span>Tab One<span class="tag">&lt;/<span class="name">q-tab-pane</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-tab-pane</span> <span class="attr">name</span>=<span class="string">"tab-2"</span>&gt;</span>Tab Two<span class="tag">&lt;/<span class="name">q-tab-pane</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-tab-pane</span> <span class="attr">name</span>=<span class="string">"tab-3"</span>&gt;</span>Tab Three<span class="tag">&lt;/<span class="name">q-tab-pane</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-tab-pane</span> <span class="attr">name</span>=<span class="string">"tab-4"</span>&gt;</span>Tab Four<span class="tag">&lt;/<span class="name">q-tab-pane</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-tab-pane</span> <span class="attr">name</span>=<span class="string">"tab-5"</span>&gt;</span>Tab Five<span class="tag">&lt;/<span class="name">q-tab-pane</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-tabs</span>&gt;</span></div></pre></td></tr></table></figure>
<p>The above example is using QTabPane component as the content container (or target container) for the tabs. There is also the ability to use Vue Router for each tab instead of targeting a QTabPane. Also, QTabPanes are optional and you can use <code>v-model</code> on QTabs. We’ll cover those features later.</p>
<blockquote>
<p>The <code>name</code> prop on QTab and QTabPane links the tab to the targets (panes).</p>
</blockquote>
<p>As you can see from the example, we have a main Tab container with (<code>&lt;q-tabs&gt;</code>) and singular Tabs themselves with (<code>&lt;q-tab&gt;</code>). Let’s look at the Tabs container first:</p>
<h2 id="QTabs-Container-Component"><a href="#QTabs-Container-Component" class="headerlink" title="QTabs (Container Component)"></a>QTabs (Container Component)</h2><p>Use the QTabs component to wrap your Tabs.</p>
<h3 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h3><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>align</code></td>
<td>String</td>
<td>The type of the alignment for the tabs within the tabs container. The allowed values are <code>left</code> (default), <code>center</code>, <code>right</code> or <code>justify</code>.</td>
</tr>
<tr>
<td><code>position</code></td>
<td>String</td>
<td>The screen position of the tabs. The allowed values are <code>top</code> or <code>bottom</code>.</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>A Quasar standard CSS color.</td>
</tr>
<tr>
<td><code>inverted</code></td>
<td>Boolean</td>
<td>Set to true, to invert the tab color.</td>
</tr>
<tr>
<td><code>two-lines</code></td>
<td>Boolean</td>
<td>Set to true, should a tab’s label wrap to a second line.</td>
</tr>
<tr>
<td><code>no-pane-border</code></td>
<td>Boolean</td>
<td>Avoid drawing a border around QTabPanes.</td>
</tr>
<tr>
<td><code>glossy</code></td>
<td>Boolean</td>
<td>Apply a glossy effect</td>
</tr>
</tbody>
</table>
<p>There is support for <code>v-model</code> (which is optional). In this case, you need a Vue variable in your scope which will contain the name of the current selected tab (through <code>name</code> prop on QTab). Changing the value will also make QTabs select the according QTab.</p>
<h4 id="Basic-usage-with-v-model"><a href="#Basic-usage-with-v-model" class="headerlink" title="Basic usage with v-model:"></a>Basic usage with <code>v-model</code>:</h4><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-tabs</span> <span class="attr">v-model</span>=<span class="string">"selectedTab"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-tab</span> <span class="attr">slot</span>=<span class="string">"title"</span> <span class="attr">name</span>=<span class="string">"tab-1"</span> <span class="attr">icon</span>=<span class="string">"message"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-tab</span> <span class="attr">slot</span>=<span class="string">"title"</span> <span class="attr">name</span>=<span class="string">"tab-2"</span> <span class="attr">icon</span>=<span class="string">"fingerprint"</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-tab</span> <span class="attr">slot</span>=<span class="string">"title"</span> <span class="attr">name</span>=<span class="string">"tab-3"</span> <span class="attr">icon</span>=<span class="string">"account_box"</span> /&gt;</span></div><div class="line"></div><div class="line">      ...optional `QTabPane`s...</div><div class="line">    <span class="tag">&lt;/<span class="name">q-tabs</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">q-btn</span> @<span class="attr">click</span>=<span class="string">"selectThirdTab"</span>&gt;</span>Select Third Tab<span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">import</span> &#123; QTabs, QBtn &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  components: &#123;</div><div class="line">    QTabs,</div><div class="line">    QBtn</div><div class="line">  &#125;,</div><div class="line">  data () &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="comment">// initializing for second tab to be selected by default</span></div><div class="line">      selectedTab: <span class="string">'tab-2'</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  methods: &#123;</div><div class="line">    selectThirdTab () &#123;</div><div class="line">      <span class="comment">// we select third tab which has `name` set to 'tab-3'</span></div><div class="line">      <span class="keyword">this</span>.selectedTab = <span class="string">'tab-3'</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Vue-Methods"><a href="#Vue-Methods" class="headerlink" title="Vue Methods"></a>Vue Methods</h3><table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>selectTab(name)</code></td>
<td>Set the active Tab using its name.</td>
</tr>
</tbody>
</table>
<h3 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h3><table>
<thead>
<tr>
<th>Event</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@select</code></td>
<td>Triggered when selected Tab changes.</td>
</tr>
</tbody>
</table>
<h3 id="Overflow-Behavior"><a href="#Overflow-Behavior" class="headerlink" title="Overflow Behavior"></a>Overflow Behavior</h3><p>On a desktop, if the Tabs cannot be dispalayed completely, the user will be offered a scroll action in the form of an opaque gradient fill. When hovered over, it turns to an arrow button. The user can press continually on the button, and the unseen Tabs will scroll by.</p>
<p>If the user is on a device with a small screen (like a phone) and all Tabs can fit on the screen, they will be automatically justify aligned and share the complete screen width. If the Tabs do not fit, then the user will also see the arrow to indicate the user can swipe through the Tabs.</p>
<h2 id="QTab-Child-Component"><a href="#QTab-Child-Component" class="headerlink" title="QTab (Child Component)"></a>QTab (Child Component)</h2><p>QTab component is used to define a title for your Tab. Can be linked to a QTabPane through <code>name</code> prop.<br>If you want to use Vue Router with a Tab (clicking on a Tab triggers a route change in your app), then please refer to QRouteTab component in next section.</p>
<blockquote>
<p><strong>IMPORTANT</strong>. Do not forget to specify <code>slot=&quot;title&quot;</code> on QTab.</p>
</blockquote>
<h3 id="Vue-Properties-1"><a href="#Vue-Properties-1" class="headerlink" title="Vue Properties"></a>Vue Properties</h3><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>default</code></td>
<td>Boolean</td>
<td>Set to <code>true</code> on the tab which you want to be selected by default.</td>
</tr>
<tr>
<td><code>label</code></td>
<td>String</td>
<td>Label to use for the tab.</td>
</tr>
<tr>
<td><code>icon</code></td>
<td>String</td>
<td>Icon to use for the tab.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>If disabled, the user won’t be able to select the tab.</td>
</tr>
<tr>
<td><code>hidden</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, it hides the tab.</td>
</tr>
<tr>
<td><code>hide</code></td>
<td>String</td>
<td>Possible values: <code>icon</code> or <code>label</code>. On narrow screens one of the two will be hidden.</td>
</tr>
<tr>
<td><code>name</code></td>
<td>String</td>
<td>The id of the tab. Default is a uid added by Quasar.</td>
</tr>
<tr>
<td><code>alert</code></td>
<td>Boolean</td>
<td>When <code>true</code>, the tab has a red dot, which is meant to get the user’s attention.</td>
</tr>
<tr>
<td><code>count</code></td>
<td>Number, String</td>
<td>A number to indicate there is a list of unread or unseen items in the tab’s content.</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>The color of the tab’s icon or text, should it be different than the default.</td>
</tr>
</tbody>
</table>
<h3 id="Vue-Methods-1"><a href="#Vue-Methods-1" class="headerlink" title="Vue Methods"></a>Vue Methods</h3><table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>select()</code></td>
<td>Make this Tab the selected one.</td>
</tr>
</tbody>
</table>
<h3 id="Vue-Events-1"><a href="#Vue-Events-1" class="headerlink" title="Vue Events"></a>Vue Events</h3><table>
<thead>
<tr>
<th>Event</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@select</code></td>
<td>Triggered when QTab gets selected.</td>
</tr>
<tr>
<td><code>@click</code></td>
<td>Triggered when user clicks/taps on Tab.</td>
</tr>
</tbody>
</table>
<h2 id="Usage-with-“v-model”"><a href="#Usage-with-“v-model”" class="headerlink" title="Usage with “v-model”"></a>Usage with “v-model”</h2><p>Best way to programmatically switch between Tabs is by using a <code>v-model</code>. Here’s another example, a little bit more complex which includes a QSelect to explain the effects of using a <code>v-model</code>.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-select</span></span></div><div class="line">  <span class="attr">type</span>=<span class="string">"radio"</span></div><div class="line">  <span class="attr">v-model</span>=<span class="string">"tabsModel"</span></div><div class="line">  <span class="attr">:options</span>=<span class="string">"tabsOptions"</span></div><div class="line">&gt;<span class="tag">&lt;/<span class="name">q-select</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">q-tabs</span> <span class="attr">v-model</span>=<span class="string">"tabsModel"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-tab</span> <span class="attr">name</span>=<span class="string">"xtab-1"</span> <span class="attr">icon</span>=<span class="string">"message"</span> <span class="attr">slot</span>=<span class="string">"title"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-tab</span> <span class="attr">name</span>=<span class="string">"xtab-2"</span> <span class="attr">icon</span>=<span class="string">"account_box"</span> <span class="attr">slot</span>=<span class="string">"title"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-tab</span> <span class="attr">name</span>=<span class="string">"xtab-3"</span> <span class="attr">icon</span>=<span class="string">"mail"</span> <span class="attr">slot</span>=<span class="string">"title"</span> /&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">q-tab-pane</span> <span class="attr">name</span>=<span class="string">"xtab-1"</span>&gt;</span>Tab One<span class="tag">&lt;/<span class="name">q-tab-pane</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-tab-pane</span> <span class="attr">name</span>=<span class="string">"xtab-2"</span>&gt;</span>Tab Two<span class="tag">&lt;/<span class="name">q-tab-pane</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-tab-pane</span> <span class="attr">name</span>=<span class="string">"xtab-3"</span>&gt;</span>Tab Three<span class="tag">&lt;/<span class="name">q-tab-pane</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">q-tabs</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// Data for template above</span></div><div class="line">data () &#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    tabsModel: <span class="string">'xtab-2'</span>,</div><div class="line">    tabsOptions: [</div><div class="line">      &#123;label: <span class="string">'Tab 1'</span>, value: <span class="string">'xtab-1'</span>&#125;,</div><div class="line">      &#123;label: <span class="string">'Tab 2'</span>, value: <span class="string">'xtab-2'</span>&#125;,</div><div class="line">      &#123;label: <span class="string">'Tab 3'</span>, value: <span class="string">'xtab-3'</span>&#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Note</strong><br>When the tabs are initially rendered, the value stored in the v-model used by your component, as with <code>tabsModel</code> above, will also indicate to the user a selected tab. If you aren’t using v-model, you can set the initially active tab with the <code>default</code> prop.</p>
<h2 id="QTabPane-Child-Component"><a href="#QTabPane-Child-Component" class="headerlink" title="QTabPane (Child Component)"></a>QTabPane (Child Component)</h2><p>The Tabs Pane component is useful, when the content of each tab is relatively small or simple. If you have complex content, you’ll propably want to use the Tabs Router Component below.</p>
<h3 id="Vue-Properties-2"><a href="#Vue-Properties-2" class="headerlink" title="Vue Properties"></a>Vue Properties</h3><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>name</code></td>
<td>String</td>
<td><strong>Required</strong> The name of the tab and also the target id.</td>
</tr>
</tbody>
</table>
<blockquote>
<p>In order to show the proper content for each tab in each pane, the names of the tabs and panes should match.</p>
</blockquote>
<h2 id="QRouteTab-Child-Component"><a href="#QRouteTab-Child-Component" class="headerlink" title="QRouteTab (Child Component)"></a>QRouteTab (Child Component)</h2><p>The Tabs Router component is just like the QTab component and shares the same properties, however it also has Vue Router properties bound to it. These allow the triggering of your specific routing.</p>
<h3 id="Additional-Vue-Router-Properties"><a href="#Additional-Vue-Router-Properties" class="headerlink" title="Additional Vue Router Properties."></a>Additional Vue Router Properties.</h3><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>to</code></td>
<td>String, Object</td>
<td>The literal path or vue-router object the tab should route to.</td>
</tr>
<tr>
<td><code>exact</code></td>
<td>Boolean</td>
<td>If true, the router will be forced into “exact match mode”</td>
</tr>
<tr>
<td><code>append</code></td>
<td>Boolean</td>
<td>If true, the to path will be appended to the current path.</td>
</tr>
<tr>
<td><code>replace</code></td>
<td>Boolean</td>
<td>If true, there will be no history of the used route.</td>
</tr>
</tbody>
</table>
<p>Please refer to <a href="http://router.vuejs.org/en/api/router-link.html" target="_blank" rel="external">Vue-Router Link</a> documentation to get a feeling how to use these props.</p>
<h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Tabs --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-tabs</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-route-tab</span></span></div><div class="line">    <span class="attr">icon</span>=<span class="string">"mail"</span></div><div class="line">    <span class="attr">to</span>=<span class="string">"/mails"</span></div><div class="line">    <span class="attr">exact</span></div><div class="line">    <span class="attr">slot</span>=<span class="string">"title"</span>    </div><div class="line">  /&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">q-route-tab</span></span></div><div class="line">    <span class="attr">icon</span>=<span class="string">"alarm"</span></div><div class="line">    <span class="attr">to</span>=<span class="string">"/alarms"</span></div><div class="line">    <span class="attr">exact</span></div><div class="line">    <span class="attr">slot</span>=<span class="string">"title"</span></div><div class="line">  /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">q-tabs</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Your Tabs will be auto-selected when user navigates to the specified routes.</p>
<blockquote>
<p><strong>DO NOT</strong> use <code>v-model</code> or <code>selectTab()</code> method on QTabs if using QRouteTab.</p>
</blockquote>
<h2 id="Tabs-in-a-Layout"><a href="#Tabs-in-a-Layout" class="headerlink" title="Tabs in a Layout"></a>Tabs in a Layout</h2><p>You will, in most cases, want to use tabs within a layout component. Below is an example of how this would be done.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-layout</span>&gt;</span></div><div class="line">  ...</div><div class="line">  <span class="tag">&lt;<span class="name">q-tabs</span> <span class="attr">slot</span>=<span class="string">"navigation"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-route-tab</span></span></div><div class="line">      <span class="attr">icon</span>=<span class="string">"mail"</span></div><div class="line">      <span class="attr">to</span>=<span class="string">"/mails"</span></div><div class="line">      <span class="attr">exact</span></div><div class="line">      <span class="attr">slot</span>=<span class="string">"title"</span></div><div class="line">    /&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">q-route-tab</span></span></div><div class="line">      <span class="attr">icon</span>=<span class="string">"alarm"</span></div><div class="line">      <span class="attr">to</span>=<span class="string">"/alarms"</span></div><div class="line">      <span class="attr">exact</span></div><div class="line">      <span class="attr">slot</span>=<span class="string">"title"</span></div><div class="line">    /&gt;</div><div class="line">  <span class="tag">&lt;/<span class="name">q-tabs</span>&gt;</span></div><div class="line">  ...</div><div class="line"><span class="tag">&lt;/<span class="name">q-layout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Notice the <code>slot=&quot;navigation&quot;</code> attribute. This allows Quasar to know where to place your Tabs depending on the theme. With the Material Design theme, the tabs will be placed between the Layout header and the page view. And, with the iOS theme, it will be placed between the page view and the Layout footer.</p>
<p>Please refer to the following documentation for more information: <a href="/components/layout.html">Quasar Layout Component</a></p>
<h2 id="Coloring"><a href="#Coloring" class="headerlink" title="Coloring"></a>Coloring</h2><p>Use one of the Quasar colors from the Color Palette, like <code>primary</code>, <code>secondary</code>, <code>orange</code>, <code>teal</code> or variants (<code>teal-4</code>, <code>orange-10</code>) as CSS class:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Applied to all tabs: --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-tabs</span> <span class="attr">color</span>=<span class="string">"orange"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">q-tabs</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line">  Applied only to a specific tab.</div><div class="line">  In this case you can color Tabs differently:</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">q-tab</span> <span class="attr">slot</span>=<span class="string">"title"</span> <span class="attr">color</span>=<span class="string">"orange"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>You can also invert the colors (see demo for example) by adding the Boolean <code>inverted</code> prop (works only on QTabs and NOT on QTab or QRouteTab):</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- default color, on `inverted` color mode --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-tabs</span> <span class="attr">color</span>=<span class="string">"orange"</span> <span class="attr">inverted</span>&gt;</span>...<span class="tag">&lt;/<span class="name">q-tabs</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- `orange` color, on `inverted` color mode --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-tabs</span> <span class="attr">color</span>=<span class="string">"orange"</span> <span class="attr">inverted</span>&gt;</span>...<span class="tag">&lt;/<span class="name">q-tabs</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Alignment-of-Tabs-in-the-Header"><a href="#Alignment-of-Tabs-in-the-Header" class="headerlink" title="Alignment of Tabs in the Header"></a>Alignment of Tabs in the Header</h2><p>By default, on large width windows the Tabs are aligned to the left. If you wish to maintain a justify alignment (filling all available space on the width), then add <code>justify</code> to the align prop:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-tabs</span> <span class="attr">align</span>=<span class="string">"justify"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">q-tabs</span>&gt;</span></div></pre></td></tr></table></figure>
<p>To align center or to the right, use <code>align=&quot;center&quot;</code> or <code>align=&quot;right&quot;</code>.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Stepper]]></title>
      <url>http://beta.quasar-framework.org/components/stepper.html</url>
      <content type="html"><![CDATA[<p>Quasar Stepper conveys progress through numbered steps. Steppers display progress through a sequence of logical and numbered steps. They may also be used for navigation. It’s usually useful when the user has to follow steps to complete a process, like in a <a href="https://en.wikipedia.org/wiki/Wizard_(software)" target="_blank" rel="external">wizard</a>.</p>
<input type="hidden" data-fullpage-demo="grouping/stepper">

<p>The stepper component is built from three different child components:</p>
<ul>
<li><strong>QStepper</strong> - main Stepper encapsulating component</li>
<li><strong>QStep</strong> - individual steps</li>
<li><strong>QStepperNavigation</strong> - helper for encapsulating Stepper navigation buttons (within QStep or globally for the stepper as direct child of QStepper)</li>
</ul>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>Here’s a small example showcasing a very basic Stepper to understand how components fit together.<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-stepper</span> <span class="attr">ref</span>=<span class="string">"stepper"</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- Step: --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-step</span> <span class="attr">default</span> <span class="attr">title</span>=<span class="string">"First Step"</span> <span class="attr">subtitle</span>=<span class="string">"Here we go"</span>&gt;</span></div><div class="line">    ...Step content, components, ...</div><div class="line">  <span class="tag">&lt;/<span class="name">q-step</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- Step: --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-step</span> <span class="attr">title</span>=<span class="string">"Step 2"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">q-step</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- Step: --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-step</span> <span class="attr">title</span>=<span class="string">"Step 3"</span> <span class="attr">subtitle</span>=<span class="string">"Review and submit"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">q-step</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!--</span></div><div class="line">    Optional.</div><div class="line"></div><div class="line">    "Globally" available Stepper navigation which means</div><div class="line">    that it will be visible regardless of the current step.</div><div class="line">    If we'd put QStepperNavigation under a QStep then we'd</div><div class="line">    be using it for that step only.</div><div class="line">  --&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">q-stepper-navigation</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">flat</span> @<span class="attr">click</span>=<span class="string">"$refs.stepper.previous()"</span>&gt;</span>Back<span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-btn</span> @<span class="attr">click</span>=<span class="string">"$refs.stepper.next()"</span>&gt;</span>Next<span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-stepper-navigation</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-stepper</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>A more involved example. This one doesn’t uses QStepperNavigation as direct child of QStepper because each step has navigation configured. Notice the additional attributes on each component below. They will be detailed in next sections.<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-stepper</span> <span class="attr">color</span>=<span class="string">"secondary"</span> <span class="attr">ref</span>=<span class="string">"stepper"</span> <span class="attr">alternative-labels</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-step</span> <span class="attr">default</span> <span class="attr">name</span>=<span class="string">"first"</span> <span class="attr">title</span>=<span class="string">"Ad style"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"n in 10"</span>&gt;</span>Step 1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- Navigation for this step at the end of QStep--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-stepper-navigation</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"secondary"</span> @<span class="attr">click</span>=<span class="string">"$refs.stepper.next()"</span>&gt;</span>Continue<span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-stepper-navigation</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-step</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">q-step</span> <span class="attr">error</span> <span class="attr">name</span>=<span class="string">"second"</span> <span class="attr">title</span>=<span class="string">"Custom channels"</span> <span class="attr">subtitle</span>=<span class="string">"Alert message"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"n in 10"</span>&gt;</span>Step 2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-stepper-navigation</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"secondary"</span> @<span class="attr">click</span>=<span class="string">"$refs.stepper.next()"</span>&gt;</span>Next<span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"secondary"</span> <span class="attr">flat</span> @<span class="attr">click</span>=<span class="string">"$refs.stepper.previous()"</span>&gt;</span>Back<span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-stepper-navigation</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-step</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-step</span> <span class="attr">name</span>=<span class="string">"third"</span> <span class="attr">title</span>=<span class="string">"Get code"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"n in 3"</span>&gt;</span>Step 3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-stepper-navigation</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"secondary"</span> @<span class="attr">click</span>=<span class="string">"$refs.stepper.next()"</span>&gt;</span>Next<span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"secondary"</span> <span class="attr">flat</span> @<span class="attr">click</span>=<span class="string">"$refs.stepper.previous()"</span>&gt;</span>Back<span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-stepper-navigation</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-step</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-step</span> <span class="attr">name</span>=<span class="string">"fifth"</span> <span class="attr">disable</span> <span class="attr">title</span>=<span class="string">"Disabled"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"n in 3"</span>&gt;</span>Step 4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-stepper-navigation</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"secondary"</span> @<span class="attr">click</span>=<span class="string">"$refs.stepper.next()"</span>&gt;</span>Next<span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"secondary"</span> <span class="attr">flat</span> @<span class="attr">click</span>=<span class="string">"$refs.stepper.previous()"</span>&gt;</span>Back<span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-stepper-navigation</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-step</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-step</span> <span class="attr">name</span>=<span class="string">"fourth"</span> <span class="attr">title</span>=<span class="string">"Review and Finalize"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"n in 3"</span>&gt;</span>Step 5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-stepper-navigation</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"secondary"</span> @<span class="attr">click</span>=<span class="string">"$refs.stepper.goToStep('first')"</span>&gt;</span>Restart<span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"secondary"</span> <span class="attr">flat</span> @<span class="attr">click</span>=<span class="string">"$refs.stepper.previous()"</span>&gt;</span>Back<span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-stepper-navigation</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-step</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-stepper</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="QStepper-Parent"><a href="#QStepper-Parent" class="headerlink" title="QStepper (Parent)"></a>QStepper (Parent)</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>Main color of Stepper, from <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>vertical</code></td>
<td>Boolean</td>
<td>Set Stepper as vertical instead of default horizontal.</td>
</tr>
<tr>
<td><code>alternative-labels</code></td>
<td>Boolean</td>
<td>Use alternative labels (applies only to horizontal Stepper).</td>
</tr>
<tr>
<td><code>contractable</code></td>
<td>Boolean</td>
<td>Labels are hidden on narrow windows.</td>
</tr>
<tr>
<td><code>order</code></td>
<td>Number / String</td>
<td>If you add/remove Steps dynamically, it’s good to use this prop to specify the order in which Steps should be displayed.</td>
</tr>
<tr>
<td><code>doneIcon</code></td>
<td>String, Boolean</td>
<td>Used to change the display of the Step icon, when the step is finished. Default is the “check” icon.</td>
</tr>
<tr>
<td><code>selectedIcon</code></td>
<td>String, Boolean</td>
<td>Used to change the icon, when a Step is selected. Default is the “edit” icon.</td>
</tr>
<tr>
<td><code>errorIcon</code></td>
<td>String / Boolean</td>
<td>Used to change the icon, when there is an error in a Step. Default is the “warning” icon.</td>
</tr>
</tbody>
</table>
<p>You can also control the current step by using <code>v-model</code> on QStep. More details in next section.</p>
<table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>goToStep(String)</code></td>
<td>Moves the user to the given Step, defined by Step’s “name” property.</td>
</tr>
<tr>
<td><code>next()</code></td>
<td>Stepper goes to the next step.</td>
</tr>
<tr>
<td><code>previous()</code></td>
<td>Stepper goes to the previous step.</td>
</tr>
<tr>
<td><code>reset()</code></td>
<td>Returns the stepper back to the first step.</td>
</tr>
</tbody>
</table>
<h3 id="Using-v-model"><a href="#Using-v-model" class="headerlink" title="Using v-model"></a>Using <code>v-model</code></h3><p>Each QStep has a <code>name</code> prop (which is optional). Use this prop along with <code>v-model</code> to control the current step.</p>
<p>The example below shows how you can use <code>v-model</code> alone to control navigation. Notice the <code>@click</code> events. If you dynamically insert/remove Steps it’s better to use a Vue reference on QStepper and call <code>next()</code> or <code>previous()</code> methods since these methods are not binded to specific Step names.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-stepper</span> <span class="attr">v-model</span>=<span class="string">"currentStep"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-step</span> <span class="attr">name</span>=<span class="string">"first"</span>&gt;</span></div><div class="line">      ...</div><div class="line">      <span class="tag">&lt;<span class="name">q-stepper-navigation</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"currentStep = 'second'"</span>&gt;</span>Go to Step 2<span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">q-stepper-navigation</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-step</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">q-step</span> <span class="attr">name</span>=<span class="string">"second"</span>&gt;</span></div><div class="line">      ...</div><div class="line">      <span class="tag">&lt;<span class="name">q-stepper-navigation</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"primary"</span> @<span class="attr">click</span>=<span class="string">"currentStep = 'first'"</span>&gt;</span>Go Back<span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">q-stepper-navigation</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-step</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-stepper</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  data () &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="comment">// we initialize it with first step's name</span></div><div class="line">      currentStep: <span class="string">'first'</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="QStep-Child"><a href="#QStep-Child" class="headerlink" title="QStep (Child)"></a>QStep (Child)</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>name</code></td>
<td>Number, String</td>
<td>Step name, used by QStepper’s <code>v-model</code> or <code>goToStep()</code> method.</td>
</tr>
<tr>
<td><code>error</code></td>
<td>Boolean</td>
<td>Mark Step as having an error.</td>
</tr>
<tr>
<td><code>default</code></td>
<td>Boolean</td>
<td>Use on only one Step to make it be the active one by default. Previous steps will be marked as <code>done</code>. Useful when refreshing page.</td>
</tr>
<tr>
<td><code>title</code></td>
<td>String</td>
<td>Step title.</td>
</tr>
<tr>
<td><code>subtitle</code></td>
<td>String</td>
<td>Step’s additional information along the title.</td>
</tr>
<tr>
<td><code>icon</code></td>
<td>String</td>
<td>Step’s icon when Step isn’t finished yet. If no <code>active-icon</code> is specified, then this icon will be used when Step is currently active too.</td>
</tr>
<tr>
<td><code>active-icon</code></td>
<td>String</td>
<td>The icon used for the Step when it’s currently active. Defaults to <code>icon</code> prop value when <code>active-icon</code> isn’t specified.</td>
</tr>
<tr>
<td><code>done-icon</code></td>
<td>String</td>
<td>The icon to use for Step when it’s finished.</td>
</tr>
<tr>
<td><code>error-icon</code></td>
<td>String</td>
<td>The icon to use for Step when it’s marked as having an error.</td>
</tr>
</tbody>
</table>
<p>Methods for this component:</p>
<table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>select()</code></td>
<td>Stepper selects this step as current one.</td>
</tr>
</tbody>
</table>
<h2 id="QStepperNavigation-Child-of-QStepper-or-QStep"><a href="#QStepperNavigation-Child-of-QStepper-or-QStep" class="headerlink" title="QStepperNavigation (Child of QStepper or QStep)"></a>QStepperNavigation (Child of QStepper or QStep)</h2><p>This component allows you to place buttons within QStepper or QStep to navigate through the steps. It is up to you to add whatever <a href="/components/button.html">buttons</a> you require.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-stepper</span> <span class="attr">ref</span>=<span class="string">"myStepper"</span>&gt;</span></div><div class="line">  ...</div><div class="line">  <span class="tag">&lt;<span class="name">q-stepper-navigation</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"secondary"</span> @<span class="attr">click</span>=<span class="string">"$refs.myStepper.next()"</span>&gt;</span>Next<span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"secondary"</span> <span class="attr">flat</span> @<span class="attr">click</span>=<span class="string">"$refs.myStepper.previous()"</span>&gt;</span>Back<span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-stepper-navigation</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-stepper</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="More-Examples"><a href="#More-Examples" class="headerlink" title="More Examples"></a>More Examples</h2><h3 id="Vertical-Stepper"><a href="#Vertical-Stepper" class="headerlink" title="Vertical Stepper"></a>Vertical Stepper</h3><p>It is also possible to build a stepper, which presents itself in a vertical fashion. To do this, simply use <code>vertical</code> property on QStepper:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-stepper</span> <span class="attr">vertical</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-step</span>&gt;</span>..<span class="tag">&lt;/<span class="name">q-step</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-step</span>&gt;</span>..<span class="tag">&lt;/<span class="name">q-step</span>&gt;</span></div><div class="line">  ...</div><div class="line"><span class="tag">&lt;/<span class="name">q-stepper</span>&gt;</span></div></pre></td></tr></table></figure>
<p>When using a vertical Stepper, it doesn’t really make sense to use a “global” QStepper navigation. Instead, use navigation within each QStep.</p>
<h3 id="Displaying-Progress"><a href="#Displaying-Progress" class="headerlink" title="Displaying Progress"></a>Displaying Progress</h3><p>A common case is where you need to take an asynchronouse action (like an Ajax call) before going to next step. Make use of <a href="/components/inner-loading.html">QInnerLoading</a> component for this:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-stepper</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- Steps... --&gt;</span></div><div class="line">  ........</div><div class="line"></div><div class="line">  <span class="comment">&lt;!--</span></div><div class="line">    Create a Boolean scope variable (here it's "inProgress")</div><div class="line">    and binded to "visible" prop.</div><div class="line">    Then toggle it whenever you need to display</div><div class="line">    that the Stepper has a background process going.</div><div class="line">  --&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">q-inner-loading</span> <span class="attr">:visible</span>=<span class="string">"inProgress"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-stepper</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Specific-Steps-Order"><a href="#Specific-Steps-Order" class="headerlink" title="Specific Steps Order"></a>Specific Steps Order</h3><p>If you dynamically add/remove Steps, then you need to specify the <code>order</code> property (for ALL QSteps) so that the Stepper will know the actual order of Steps. By using <code>v-if</code> or <code>v-for</code> directives, Vue &amp; Quasar can’t ensure Steps will be registered in the order they are placed in DOM.</p>
<blockquote>
<p><strong>IMPORTANT</strong><br>Just make sure that when you use <code>order</code> you apply it to <strong>all</strong> QSteps and don’t leave out any step without it. Either use <code>order</code> for all QSteps or don’t use it at all.</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-stepper</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- Will come as second step --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-step</span> <span class="attr">:order</span>=<span class="string">"2"</span>&gt;</span>..<span class="tag">&lt;/<span class="name">q-step</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- Will come as first step --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-step</span> <span class="attr">:order</span>=<span class="string">"1"</span>&gt;</span>..<span class="tag">&lt;/<span class="name">q-step</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- Will come as third step --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-step</span> <span class="attr">:order</span>=<span class="string">"3"</span>&gt;</span>..<span class="tag">&lt;/<span class="name">q-step</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-stepper</span>&gt;</span></div></pre></td></tr></table></figure>
<p>The <code>order</code> property applied to all QStep doesn’t has to be strictly growing consecutively. Setting <code>order</code> as <code>10</code>, <code>100</code> and <code>52</code> will work too.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Swipe Touch/Mouse Action]]></title>
      <url>http://beta.quasar-framework.org/components/swiping.html</url>
      <content type="html"><![CDATA[<p>Quasar offers full-featured Vue directives that can totally replace libraries like Hammerjs: <code>v-touch-pan</code>, <code>v-touch-swipe</code> and <code>v-touch-hold</code>.</p>
<blockquote>
<p><strong>These directives also work with mouse events, not only touch events</strong>, so you are able to build cool functionality for your App on desktops too.</p>
</blockquote>
<p>We will be describing <code>v-touch-swipe</code> on the lines below.</p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-touch-swipe</span>=<span class="string">"handler"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">// "handler" is a Function which receives an Object as parameter</div></pre></td></tr></table></figure>
<h2 id="Handler-Parameter"><a href="#Handler-Parameter" class="headerlink" title="Handler Parameter"></a>Handler Parameter</h2><p>The <code>handler</code> function/method is called by the directive when a <code>swipe</code> touch action took place on the DOM element and it receives the following parameter:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">  evt, <span class="comment">// JS Native Event</span></div><div class="line">  direction, <span class="comment">// "left", "right", "up" or "down"</span></div><div class="line">  duration, <span class="comment">// Number in ms</span></div><div class="line">  distance <span class="comment">// &#123;x, y&#125; Distance in pixels covered by swipe on horizontal and vertical</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// example:</span></div><div class="line">handler (obj) &#123;</div><div class="line">  <span class="built_in">console</span>.log(obj.direction) <span class="comment">// "right"</span></div><div class="line">  <span class="built_in">console</span>.log(obj.duration) <span class="comment">// 78</span></div><div class="line">  <span class="built_in">console</span>.log(obj.distance.x) <span class="comment">// 273</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Modifiers"><a href="#Modifiers" class="headerlink" title="Modifiers"></a>Modifiers</h2><p>Use <code>horizontal</code> or <code>vertical</code> when you only want to capture horizontal or vertical swipes.<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-touch-swipe.horizontal</span>=<span class="string">"userHasSwiped"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>NOTE</strong><br>The directive allows vertical scroll when capturing only horizontal swipes.</p>
</blockquote>
<p>When you don’t want to capture mouse actions too, use the <code>nomouse</code> modifier:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!--</span></div><div class="line">  directive won't be triggered by mouse actions;</div><div class="line">  it's exclusively triggered by touch actions now:</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-touch-swipe.nomouse</span>=<span class="string">"userHasSwiped"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Toast]]></title>
      <url>http://beta.quasar-framework.org/components/toast.html</url>
      <content type="html"><![CDATA[<p>Quasar Toasts appear on top of the screen above any other components to signal the user with a message and sometimes with an action too. They can be dismissed by clicking on the right side button or waiting for them to timeout. Toasts are displayed one at a time, but you can build up a queue of them.</p>
<p>Check the sibling <a href="/components/alert.html">Alert</a> too.</p>
<input type="hidden" data-fullpage-demo="popups/toast">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>A Quasar App Toast is a message displayed to the user. Below is an example of a simple Toast containing only a message:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Toast &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">Toast.create(<span class="built_in">String</span> or <span class="built_in">Object</span>)</div></pre></td></tr></table></figure></p>
<p>When creating a Toast with a String, that String is the actual message going to be displayed. For more complex cases (like also displaying an icon or an image, or controlling the Toast’s color), use an Object instead of String and read below on <a href="#Toast-Options">Toast Options</a>.</p>
<h2 id="Toast-Options"><a href="#Toast-Options" class="headerlink" title="Toast Options"></a>Toast Options</h2><p>We saw how to display a Toast, but let’s go deeper and analize the required parameter at instantiation, which can be a String or an Object.</p>
<p>When a String, it simply displays that String as the content of your Toast.<br>When an Object, you can specify more options:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Toast &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">Toast.create(&#123;</div><div class="line">  html: <span class="string">'Message to display'</span>,</div><div class="line">  icon: <span class="string">'alarm_add'</span>,</div><div class="line">  timeout: <span class="number">2500</span>,</div><div class="line">  color: <span class="string">'#f8c1c1'</span>,</div><div class="line">  bgColor: <span class="string">'white'</span>,</div><div class="line">  button: &#123;</div><div class="line">    label: <span class="string">'Undo'</span>,</div><div class="line">    handler () &#123;</div><div class="line">      <span class="comment">// Specify what to do when button is clicked/tapped</span></div><div class="line">    &#125;,</div><div class="line">    color: <span class="string">'#000'</span></div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>html</code></td>
<td>String</td>
<td>(<strong>Required</strong>) HTML to display.</td>
</tr>
<tr>
<td><code>icon</code></td>
<td>String</td>
<td>Icon to use. See <a href="/components/icons.html">Icons</a>.</td>
</tr>
<tr>
<td><code>image</code></td>
<td>String</td>
<td>Image to include.</td>
</tr>
<tr>
<td><code>timeout</code></td>
<td>2500</td>
<td>Timeout in milliseconds until being automatically dissmissed.</td>
</tr>
<tr>
<td><code>button</code></td>
<td>Object</td>
<td>Place a button with an action, like “Undo”. Specify <code>label</code> (String) and <code>handler</code> (Function). Optionally, specify <code>color</code> with a CSS color.</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>CSS color of Toast text</td>
</tr>
<tr>
<td><code>bgColor</code></td>
<td>String</td>
<td>CSS color of Toast background</td>
</tr>
<tr>
<td><code>onDismiss</code></td>
<td>Function</td>
<td>Function to execute when Toast gets dismissed.</td>
</tr>
</tbody>
</table>
<h2 id="Types-of-Toasts"><a href="#Types-of-Toasts" class="headerlink" title="Types of Toasts"></a>Types of Toasts</h2><p>Quasar offers the possibility to create out of the box Toasts for different types of success or failure messages. The Toast types have specific icons and colors.</p>
<p>The types of Toasts we are talking about are: <code>positive</code> (for success), <code>negative</code> (for errors), <code>warning</code> and <code>info</code>. Here’s how to create them:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Toast &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">Toast.create.positive(&#123;...&#125;)</div><div class="line">Toast.create.negative(&#123;...&#125;)</div><div class="line">Toast.create.warning(&#123;...&#125;)</div><div class="line">Toast.create.info(&#123;...&#125;)</div></pre></td></tr></table></figure>
<h2 id="Setting-Up-Defaults"><a href="#Setting-Up-Defaults" class="headerlink" title="Setting Up Defaults"></a>Setting Up Defaults</h2><p>If you like to change the default Toast’s settings, like color of text, color of background or timeout, you can easily do so:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Toast &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="comment">// Call this only AFTER Vue.use(Quasar):</span></div><div class="line">Toast.setDefaults(&#123;</div><div class="line">  <span class="comment">// props from above</span></div><div class="line">  color: <span class="string">'#eee'</span>,</div><div class="line">  timeout: <span class="number">10000</span>,</div><div class="line">  ...</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>Now all of the default Toasts will inherit these properties.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Stylus Variables]]></title>
      <url>http://beta.quasar-framework.org/components/stylus-variables.html</url>
      <content type="html"><![CDATA[<p>Quasar CSS is a blank slate that you can easily customize and modify to fit your brand, while still following the standards of each platform. The best apps in the app stores are fully customized and Quasar makes it easy to do the same with your App.</p>
<p>Quasar is built on top of Stylus, which allows it to set some default styles for your App but makes it extremely easy for you to change the defaults in your App code.</p>
<p>Customizing a theme means overriding Stylus variables which can hold colors, sizes, border types and so on. To understand how and where to make use of the full list of variables below, read <a href="/guide/quasar-theming.html">Guide &gt; Theming</a>.</p>
<h2 id="Variables-List"><a href="#Variables-List" class="headerlink" title="Variables List"></a>Variables List</h2><!-- DO NOT WRITE ANYTHING BELOW THIS LINE -->
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Toolbar]]></title>
      <url>http://beta.quasar-framework.org/components/toolbar.html</url>
      <content type="html"><![CDATA[<p>A Quasar Layout can have headers and/or footers (also called “marginals”) and this is a great place to use Toolbars, but note that you can also place Toolbars anywhere else you want. One QToolbar will represent a row in your marginals, usually used for navigation buttons and a title (but not limited to only this).</p>
<input type="hidden" data-fullpage-demo="navigation/toolbar">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>A Toolbar is defined by two Quasar components: <strong>QToolbar</strong> and optional <strong>QToolbarTitle</strong>.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-toolbar</span> <span class="attr">color</span>=<span class="string">"primary"</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!--</span></div><div class="line">    For Toolbar title, we use</div><div class="line">    QToolbarTitle component</div><div class="line">  --&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">q-toolbar-title</span>&gt;</span></div><div class="line">    Title</div><div class="line">  <span class="tag">&lt;/<span class="name">q-toolbar-title</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!--</span></div><div class="line">    In a Toolbar, buttons are best</div><div class="line">    configured as "flat" and with an icon,</div><div class="line">    but any button will do</div><div class="line">  --&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">flat</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"mail"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!--</span></div><div class="line">    ...and also small flat round buttons</div><div class="line">  --&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">flat</span> <span class="attr">round</span> <span class="attr">small</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"mail"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-toolbar</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- A color "inverted" Toolbar --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-toolbar</span> <span class="attr">color</span>=<span class="string">"primary"</span> <span class="attr">inverted</span>&gt;</span></div><div class="line">  ...</div><div class="line"><span class="tag">&lt;/<span class="name">q-toolbar</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- A Toolbar with a title and subtitle --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-toolbar</span> <span class="attr">color</span>=<span class="string">"primary"</span> <span class="attr">inverted</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-toolbar-title</span>&gt;</span></div><div class="line">    Title</div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"subtitle"</span>&gt;</span></div><div class="line">      Subtitle</div><div class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-toolbar-title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-toolbar</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Example on using a Toolbar on Layout header:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-layout</span> <span class="attr">ref</span>=<span class="string">"layout"</span>&gt;</span></div><div class="line">  ...</div><div class="line">  <span class="tag">&lt;<span class="name">q-toolbar</span> <span class="attr">slot</span>=<span class="string">"header"</span> <span class="attr">color</span>=<span class="string">"secondary"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- toggles QLayout left side --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-btn</span></span></div><div class="line">      <span class="attr">flat</span></div><div class="line">      @<span class="attr">click</span>=<span class="string">"$refs.layout.toggleLeft()"</span></div><div class="line">    &gt;</div><div class="line">      <span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"menu"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">q-toolbar-title</span>&gt;</span></div><div class="line">      Title</div><div class="line">    <span class="tag">&lt;/<span class="name">q-toolbar-title</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">flat</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"mail"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">flat</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-icon</span> <span class="attr">name</span>=<span class="string">"alarm"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  ...</div><div class="line"><span class="tag">&lt;/<span class="name">q-layout</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="QToolbar-Vue-Props"><a href="#QToolbar-Vue-Props" class="headerlink" title="QToolbar Vue Props"></a>QToolbar Vue Props</h2><table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>A color from <a href="/components/color-palette.html">Quasar Color Palette</a></td>
</tr>
<tr>
<td><code>inverted</code></td>
<td>Boolean</td>
<td>Invert color: background becomes transparent while text has <code>color</code></td>
</tr>
<tr>
<td><code>glossy</code></td>
<td>Boolean</td>
<td>Apply a glossy effect</td>
</tr>
</tbody>
</table>
<h2 id="QToolbarTitle"><a href="#QToolbarTitle" class="headerlink" title="QToolbarTitle"></a>QToolbarTitle</h2><p>QToolbarTitle is a component used to wrap the “title” of your Toolbar. It spreads horizontally to the full real estate space it can get. If not enough space to cover the full extent of the content then ending ellipsis are used.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- A Toolbar with a title and subtitle --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-toolbar</span> <span class="attr">color</span>=<span class="string">"primary"</span> <span class="attr">inverted</span>&gt;</span></div><div class="line">  ...</div><div class="line">  <span class="tag">&lt;<span class="name">q-toolbar-title</span>&gt;</span></div><div class="line">    Title</div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot</span>=<span class="string">"subtitle"</span>&gt;</span></div><div class="line">      Subtitle</div><div class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-toolbar-title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-toolbar</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Toggle]]></title>
      <url>http://beta.quasar-framework.org/components/toggle.html</url>
      <content type="html"><![CDATA[<p>The Quasar Toggle component is another basic element for user input. You can use this for turning settings, features or true/ false inputs on and off.</p>
<input type="hidden" data-fullpage-demo="forms/toggle">

<p>Please also refer to the <a href="/components/option-group.html">Option Group documentation</a> on other possibilities for creating groups of Toggles.</p>
<p>Works well with <a href="/components/field.html">QField</a> for additional functionality such as a helper, error message placeholder and many others.</p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-toggle</span> <span class="attr">v-model</span>=<span class="string">"checked"</span> <span class="attr">label</span>=<span class="string">"Toggle Label"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- With no label --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-toggle</span> <span class="attr">v-model</span>=<span class="string">"checked"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- With a specific color --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-toggle</span> <span class="attr">v-model</span>=<span class="string">"checked"</span> <span class="attr">color</span>=<span class="string">"teal-8"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- With icon --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-toggle</span> <span class="attr">v-model</span>=<span class="string">"checked"</span> <span class="attr">icon</span>=<span class="string">"alarm"</span> <span class="attr">label</span>=<span class="string">"Toggle Label"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Disabled state --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-toggle</span> <span class="attr">v-model</span>=<span class="string">"checked"</span> <span class="attr">disable</span> <span class="attr">label</span>=<span class="string">"Toggle Label"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>Check “Vue Properties” for even more options.</p>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><p>Supports <code>v-model</code> which should be binded to a Boolean or Array in your scope.</p>
<table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>label</code></td>
<td>String</td>
<td>The text label for the Toggle.</td>
</tr>
<tr>
<td><code>left-label</code></td>
<td>Boolean</td>
<td>Set to <code>true</code>, if the label should be placed to the left of the Toggle.</td>
</tr>
<tr>
<td><code>icon</code></td>
<td>String</td>
<td>Optional icon to use. Overriden by <code>checked-icon</code> and <code>unchecked-icon</code> if the latter are used.</td>
</tr>
<tr>
<td><code>checked-icon</code></td>
<td>String</td>
<td>The icon to use, when the Toggle is checked.</td>
</tr>
<tr>
<td><code>unchecked-icon</code></td>
<td>String</td>
<td>The icon to use, when the Toggle is not checked.</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>Color from <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>Set to true, to disable the toggle.</td>
</tr>
<tr>
<td><code>val</code></td>
<td>Object</td>
<td>Used to modify the v-model of the Toggle when using an Array as <code>v-model</code>.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Vue Event</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@blur</code></td>
<td>Triggered, when Toggle loses focus.</td>
</tr>
<tr>
<td><code>@focus</code></td>
<td>Triggered, when Toggle gains focus.</td>
</tr>
</tbody>
</table>
<h2 id="Array-as-Model"><a href="#Array-as-Model" class="headerlink" title="Array as Model"></a>Array as Model</h2><p>If you have a number of toggles for a selection, use can also use an Array as the model object and the <code>val</code> prop for the inserted value into the Array.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-toggle</span> <span class="attr">v-model</span>=<span class="string">"selection"</span> <span class="attr">val</span>=<span class="string">"one"</span> <span class="attr">label</span>=<span class="string">"One"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-toggle</span> <span class="attr">v-model</span>=<span class="string">"selection"</span> <span class="attr">val</span>=<span class="string">"two"</span> <span class="attr">label</span>=<span class="string">"Two"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-toggle</span> <span class="attr">v-model</span>=<span class="string">"selection"</span> <span class="attr">val</span>=<span class="string">"three"</span> <span class="attr">label</span>=<span class="string">"Three"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  data () &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      selection: [<span class="string">'two'</span>]</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Ticking all toggles will make <code>selection</code> scope variable to be <code>[&#39;one&#39;, &#39;two&#39;, &#39;three&#39;]</code>. Unticking all toggles will result in <code>selection</code> being an empty array <code>[]</code>.</p>
<h2 id="More-Examples"><a href="#More-Examples" class="headerlink" title="More Examples"></a>More Examples</h2><p>There are a number of props, which are available to help quickly format a Toggle. An interesting feature of Toggle is the ripple effect that user gets when clicking/tapping on it to change its state.</p>
<h3 id="Specific-State-Icons"><a href="#Specific-State-Icons" class="headerlink" title="Specific State Icons"></a>Specific State Icons</h3><p>For a more informational Toggle, you can also use the <code>checked-icon</code> and <code>unchecked-icon</code> props to display an inset icon in the toggle.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-toggle</span></span></div><div class="line">  <span class="attr">v-model</span>=<span class="string">"checked"</span></div><div class="line">  <span class="attr">unchecked-icon</span>=<span class="string">"visibility_off"</span></div><div class="line">  <span class="attr">checked-icon</span>=<span class="string">"visibility"</span></div><div class="line">  <span class="attr">label</span>=<span class="string">"Toggle Label"</span></div><div class="line">/&gt;</div></pre></td></tr></table></figure>
<p>Specifying <code>checked-icon</code> and <code>unchecked-icon</code> overrides <code>icon</code> property if you’ve also used it.</p>
<h3 id="Coloring"><a href="#Coloring" class="headerlink" title="Coloring"></a>Coloring</h3><p>Use the <code>color</code> prop to control the toggle’s color.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-toggle</span> <span class="attr">v-model</span>=<span class="string">"checked"</span> <span class="attr">color</span>=<span class="string">"orange"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">q-toggle</span> <span class="attr">v-model</span>=<span class="string">"checked"</span> <span class="attr">color</span>=<span class="string">"teal"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">q-toggle</span> <span class="attr">v-model</span>=<span class="string">"checked"</span> <span class="attr">color</span>=<span class="string">"dark"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Label-Position"><a href="#Label-Position" class="headerlink" title="Label Position"></a>Label Position</h3><p>Use the <code>left-label</code> prop, to move the label to the left of Toggle.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-toggle</span></span></div><div class="line">  <span class="attr">v-model</span>=<span class="string">"checked"</span></div><div class="line">  <span class="attr">left-label</span></div><div class="line">  <span class="attr">label</span>=<span class="string">"Checkbox Label"</span></div><div class="line">/&gt;</div></pre></td></tr></table></figure>
<h3 id="Usage-Inside-of-a-List"><a href="#Usage-Inside-of-a-List" class="headerlink" title="Usage Inside of a List"></a>Usage Inside of a List</h3><p>In the following example we use the right side of QItems to insert Toggle, but it works anywhere.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-list</span> <span class="attr">link</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!--</span></div><div class="line">    Rendering a &lt;label&gt; tag (notice tag="label")</div><div class="line">    so the whole QItem will respond to clicks to</div><div class="line">    change Toggle state.</div><div class="line">  --&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">tag</span>=<span class="string">"label"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Events and reminders<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-toggle</span> <span class="attr">v-model</span>=<span class="string">"checked"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">tag</span>=<span class="string">"label"</span> <span class="attr">multiline</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Events and reminders<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span>Lorem ipsum<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-toggle</span> <span class="attr">v-model</span>=<span class="string">"checked"</span> <span class="attr">class</span>=<span class="string">"purple"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-item</span> <span class="attr">tag</span>=<span class="string">"label"</span> <span class="attr">multiline</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-main</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">label</span>&gt;</span>Events and reminders<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-item-tile</span> <span class="attr">sublabel</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.<span class="tag">&lt;/<span class="name">q-item-tile</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-main</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-item-side</span> <span class="attr">right</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-toggle</span> <span class="attr">v-model</span>=<span class="string">"checked"</span> <span class="attr">class</span>=<span class="string">"red"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-item-side</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">q-item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-list</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tooltip]]></title>
      <url>http://beta.quasar-framework.org/components/tooltip.html</url>
      <content type="html"><![CDATA[<p>QTooltip should be used when you want to offer the user more information about a certain area in your App. When hovering the mouse over the target element (or quickly tapping on mobile platforms), the Tooltip will appear.</p>
<input type="hidden" data-fullpage-demo="popups/tooltip">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>In the example below we use a QBtn (as a target) and when hovering over it, Quasar will display some text.</p>
<p>You can replace QBtn and the QPopover content with any DOM elements or components you like.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!--</span></div><div class="line">  The target button (can be anything else)</div><div class="line">  must be direct parent of QTooltip on the</div><div class="line">  DOM hierarchy.</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">q-btn</span>&gt;</span></div><div class="line">  Email</div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- Direct child of target --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-tooltip</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--</span></div><div class="line">      The DOM element(s) that make up the tooltip,</div><div class="line">      in this case a simple text:</div><div class="line">    --&gt;</div><div class="line">    Some text as content of Tooltip</div><div class="line">  <span class="tag">&lt;/<span class="name">q-tooltip</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div></pre></td></tr></table></figure>
<p>The idea is to place QTooltip inside your DOM element / component (as <strong>direct child in DOM hierarchy</strong>), when you want it to be the trigger for the QTooltip. Don’t worry about QTooltip content inheriting CSS from the container. This won’t occur, since QTooltip will be injected as a direct child of <code>&lt;body&gt;</code>.</p>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>anchor</code></td>
<td>Object</td>
<td>String of form <code>bottom left</code> (vertical horizontal).</td>
</tr>
<tr>
<td><code>self</code></td>
<td>Object</td>
<td>String of form <code>top left</code> (vertical horizontal).</td>
</tr>
<tr>
<td><code>offset</code></td>
<td>Array</td>
<td>Array with two numbers. Offset on horizontal and vertical (in pixels).</td>
</tr>
<tr>
<td><code>max-height</code></td>
<td>String</td>
<td>Optional maximum height of Popover content. Example: <code>500px</code></td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>When set to <code>true</code>, Popover won’t be triggered.</td>
</tr>
<tr>
<td><code>delay</code></td>
<td>Number</td>
<td>Set the delay, when tooltip should appear.</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Methods"><a href="#Vue-Methods" class="headerlink" title="Vue Methods"></a>Vue Methods</h2><table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>toggle()</code></td>
<td>Toggle open/close state.</td>
</tr>
<tr>
<td><code>open()</code></td>
<td>Open Popover.</td>
</tr>
<tr>
<td><code>close()</code></td>
<td>Close Popover.</td>
</tr>
</tbody>
</table>
<h2 id="Handling-Positioning"><a href="#Handling-Positioning" class="headerlink" title="Handling Positioning"></a>Handling Positioning</h2><p>The position of QTooltip can be customized. It keeps account of the <code>anchor</code> and <code>self</code> optional Vue properties. Check out the demo and play with them.</p>
<p>The final position of QTooltip popup is calculated so that it will be displayed on the available screen real estate, switching to the right-side and/or top-side when necessary.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Swipe Touch/Mouse Action]]></title>
      <url>http://beta.quasar-framework.org/components/touch-hold.html</url>
      <content type="html"><![CDATA[<p>Quasar offers full-featured Vue directives that can totally replace libraries like Hammerjs: <code>v-touch-pan</code>, <code>v-touch-swipe</code> and <code>v-touch-hold</code>.</p>
<blockquote>
<p><strong>These directives also work with mouse events, not only touch events</strong>, so you are able to build cool functionality for your App on desktops too.</p>
</blockquote>
<p>We will be describing <code>v-touch-hold</code> on the lines below.</p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-touch-hold</span>=<span class="string">"handler"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">// "handler" is a Function which receives an Object as parameter</div></pre></td></tr></table></figure>
<h2 id="Handler-Parameter"><a href="#Handler-Parameter" class="headerlink" title="Handler Parameter"></a>Handler Parameter</h2><p>The <code>handler</code> function/method is called by the directive when user taps/clicks and holds on the DOM element and it receives the following parameter:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">  evt, <span class="comment">// JS Native Event</span></div><div class="line">  position: <span class="comment">// &#123;x, y&#125; offset on screen</span></div><div class="line">  duration <span class="comment">// Number in ms</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// example:</span></div><div class="line">handler (obj) &#123;</div><div class="line">  <span class="built_in">console</span>.log(obj.psoition) <span class="comment">// &#123;x: 22, y: 451&#125;</span></div><div class="line">  <span class="built_in">console</span>.log(obj.duration) <span class="comment">// 78</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Modifiers"><a href="#Modifiers" class="headerlink" title="Modifiers"></a>Modifiers</h2><p>When you don’t want to capture mouse actions too, use the <code>nomouse</code> modifier:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!--</span></div><div class="line">  directive won't be triggered by mouse actions;</div><div class="line">  it's exclusively triggered by touch actions now:</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-touch-hold.nomouse</span>=<span class="string">"userHasSwiped"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Transition (QTransition)]]></title>
      <url>http://beta.quasar-framework.org/components/transition.html</url>
      <content type="html"><![CDATA[<p>The Quasar Transition component (called QTransition) gives transitional animation behavior to any components or HTML elements, which are wrapped by it. It is basically a simplification of <a href="https://vuejs.org/v2/guide/transitions.html" target="_blank" rel="external">the Vue Transition Component</a>. The transitions are used for entering (appearing) or leaving (disappearing) animations.</p>
<p>The animation effects are borrowed from <a href="https://daneden.github.io/animate.css/" target="_blank" rel="external">Animate.css</a>.  So there are 12 general, 32 entering (In) and 32 leaving (Out) animation types currently available for you to use out of the box. Check the list either on Animate.css website or on the demo available for this page.</p>
<input type="hidden" data-fullpage-demo="animation/transition">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><p>To use QTransition component, simply wrap a component or HTML element with the transition component and add the necessary properties to it.</p>
<p>It’s also important that you import the CSS animation(s) from <code>quasar-extra</code> package as none will be supplied by default in order to reduce the footprint of your website/app.</p>
<h3 id="Adding-an-Animation-to-the-Bundle"><a href="#Adding-an-Animation-to-the-Bundle" class="headerlink" title="Adding an Animation to the Bundle"></a>Adding an Animation to the Bundle</h3><p>In you Vue component where the template contains a QTransition or in <code>src/main.js</code> or <code>src/App.vue</code> (if you are using in multiple places), import the animations like this:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">'quasar-extras/animate/fadeIn.css'</span></div><div class="line"><span class="keyword">import</span> <span class="string">'quasar-extras/animate/fadeOut.css'</span></div><div class="line"></div><div class="line"><span class="comment">// Or import them all -- but notice that your</span></div><div class="line"><span class="comment">// bundle will probably include unused ones,</span></div><div class="line"><span class="comment">// so more KB over the wire that never get used.</span></div><div class="line"><span class="keyword">import</span> <span class="string">'quasar-extras/animate'</span></div></pre></td></tr></table></figure>
<p>If you are building a website, you can also replace “quasar-extras” imports and use a CDN link which points to Animate.css like this (following is just an example, Google for latest link). Remember this will require an Internet connection for your user, as opposed to bundling from “quasar-extras”.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- index.html --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  ...</div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- CDN example for Animate.css --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">link</span></span></div><div class="line">    <span class="attr">rel</span>=<span class="string">"stylesheet"</span></div><div class="line">    <span class="attr">href</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.5.2/animate.min.css"</span></div><div class="line">  &gt;</div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Wrapping-a-Single-Element"><a href="#Wrapping-a-Single-Element" class="headerlink" title="Wrapping a Single Element"></a>Wrapping a Single Element</h3><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Example with wrapping only one DOM element / component --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-transition</span></span></div><div class="line">  <span class="attr">appear</span></div><div class="line">  <span class="attr">enter</span>=<span class="string">"fadeIn"</span></div><div class="line">  <span class="attr">leave</span>=<span class="string">"fadeOut"</span></div><div class="line">&gt;</div><div class="line">  <span class="comment">&lt;!-- Wrapping only one DOM element, defined by QBtn --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"secondary"</span> <span class="attr">icon</span>=<span class="string">"mail"</span>&gt;</span></div><div class="line">    Email</div><div class="line">  <span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-transition</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Wrapping-Multiple-Elements"><a href="#Wrapping-Multiple-Elements" class="headerlink" title="Wrapping Multiple Elements"></a>Wrapping Multiple Elements</h3><p>You can also group components or DOM elements in a QTransition so that the same effects are applied to all of them simultaneously.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Example with wrapping multiple DOM elements / components --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">q-transition</span></span></div><div class="line">  <span class="attr">appear</span></div><div class="line">  <span class="attr">group</span></div><div class="line">  <span class="attr">enter</span>=<span class="string">"fadeIn"</span></div><div class="line">  <span class="attr">leave</span>=<span class="string">"fadeOut"</span></div><div class="line">&gt;</div><div class="line">  <span class="comment">&lt;!-- We wrap a "p" tag and a QBtn --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">key</span>=<span class="string">"text"</span>&gt;</span></div><div class="line">     Lorum Ipsum</div><div class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">q-btn</span></span></div><div class="line">    <span class="attr">key</span>=<span class="string">"email-button"</span></div><div class="line">    <span class="attr">color</span>=<span class="string">"secondary"</span></div><div class="line">    <span class="attr">icon</span>=<span class="string">"mail"</span></div><div class="line">  &gt;</div><div class="line">    Email</div><div class="line">  <span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">q-transition</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Please note two things in the above example.</p>
<ol>
<li>The <code>group</code> property must be added to animate a group of components and/or DOM elements.</li>
<li>The components and DOM elements must be keyed, like <code>key=&quot;text&quot;</code> or <code>key=&quot;email-button&quot;</code> in the example above.</li>
<li>Both examples above have the Boolean property <code>appear</code> specified, which makes the entering animation kick in right after component(s) have been rendered. This property is optional.</li>
</ol>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><p>There are several properties within the transition component.</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>appear</code></td>
<td>Boolean</td>
<td>Should the entering (In) animation occur right after rendering DOM / component?</td>
</tr>
<tr>
<td><code>enter</code></td>
<td>String</td>
<td>The animation for transitioning into the screen.</td>
</tr>
<tr>
<td><code>leave</code></td>
<td>String</td>
<td>The animation for transitioning out of the screen.</td>
</tr>
<tr>
<td><code>group</code></td>
<td>Boolean</td>
<td>For transitions on a group of components or DOM elements.</td>
</tr>
<tr>
<td><code>duration</code></td>
<td>Number</td>
<td>The time in milliseconds the transition should take.</td>
</tr>
<tr>
<td><code>name</code></td>
<td>String</td>
<td>Used for custom animations, just like on the Vue Transition component.</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>Note</strong><br>The <code>enter</code> and <code>leave</code> properties are necessary, for the transition to work properly, unless you specify <code>name</code> property which tells QTransition to use a <a href="#Custom-Animations">custom animation</a> defined by your own CSS classes.</p>
</blockquote>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Event</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>before-enter</code></td>
</tr>
<tr>
<td><code>before-leave</code></td>
</tr>
<tr>
<td><code>before-appear</code></td>
</tr>
<tr>
<td><code>leave</code></td>
</tr>
<tr>
<td><code>appear</code></td>
</tr>
<tr>
<td><code>after-enter</code></td>
</tr>
<tr>
<td><code>after-leave</code></td>
</tr>
<tr>
<td><code>after-appear</code></td>
</tr>
</tbody>
</table>
<p>You can use these events to control state, which controls the display logic.</p>
<h2 id="Custom-Animations"><a href="#Custom-Animations" class="headerlink" title="Custom Animations"></a>Custom Animations</h2><p>If the default animations supplied with Quasar are not enough, QTransition also allows you to specify custom animations defined by CSS classes in your website/app. This works much like Vue’s Transition component (which it wraps) when specifying the <code>name</code> property.</p>
<blockquote>
<p>If you are only interested in using a custom transition, then it’s more efficient to use Vue’s internal <code>&lt;transition&gt;</code> component. Adding this feature for QTransition is just for convenience so you can dynamically switch from and to an Animate.css animation to a custom one if you like.</p>
</blockquote>
<h3 id="Transition-CSS-Classes"><a href="#Transition-CSS-Classes" class="headerlink" title="Transition CSS Classes"></a>Transition CSS Classes</h3><p><strong>Note</strong>. The following information (including the image) is taken from Vuejs official documentation for convenience, since QTransition is a wrapper for Vue’s internal Transition component.</p>
<p>There are six CSS classes applied for enter/leave transitions. Replace <code>v</code> with the name of your custom animation (which you will supply QTransition as <code>name</code> property).</p>
<ol>
<li><p><code>v-enter</code>: Starting state for enter. Added before element is inserted, removed one frame after element is inserted.</p>
</li>
<li><p><code>v-enter-active</code>: Active state for enter. Applied during the entire entering phase. Added before element is inserted, removed when transition/animation finishes. This class can be used to define the duration, delay and easing curve for the entering transition.</p>
</li>
<li><p><code>v-enter-to</code>: Ending state for enter. Added one frame after element is inserted (at the same time <code>v-enter</code> is removed), removed when transition/animation finishes.</p>
</li>
<li><p><code>v-leave</code>: Starting state for leave. Added immediately when a leaving transition is triggered, removed after one frame.</p>
</li>
<li><p><code>v-leave-active</code>: Active state for leave. Applied during the entire leaving phase. Added immediately when leave transition is triggered, removed when the transition/animation finishes. This class can be used to define the duration, delay and easing curve for the leaving transition.</p>
</li>
<li><p><code>v-leave-to</code>: Ending state for leave. Added one frame after a leaving transition is triggered (at the same time <code>v-leave</code> is removed), removed when the transition/animation finishes.</p>
</li>
</ol>
<p><img src="/images/transition.png" alt="Transition Diagram"></p>
<p>Each of the classes mentioned above are prefixed with <code>v-</code>, but if for example you are defining a custom transition named <code>custom-anim</code> then <code>v-enter</code> class would instead be <code>custom-anim-enter</code> (and so on for all others).</p>
<p><code>v-enter-active</code> and <code>v-leave-active</code> give you the ability to specify different easing curves for enter/leave transitions.</p>
<h3 id="Example-of-Custom-Animation"><a href="#Example-of-Custom-Animation" class="headerlink" title="Example of Custom Animation"></a>Example of Custom Animation</h3><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-transition</span> <span class="attr">name</span>=<span class="string">"custom"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">q-btn</span> <span class="attr">color</span>=<span class="string">"primary"</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">q-btn</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">q-transition</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="comment">// ...</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">/* Enter and leave animations can use different */</div><div class="line">/* durations and timing functions.              */</div><div class="line">.custom-enter-active &#123;</div><div class="line">  transition: all .3s ease;</div><div class="line">&#125;</div><div class="line">.custom-leave-active &#123;</div><div class="line">  transition: all .8s cubic-bezier(1.0, 0.5, 0.8, 1.0);</div><div class="line">&#125;</div><div class="line">.custom-enter, .custom-leave-to</div><div class="line">  transform: translateX(10px);</div><div class="line">  opacity: 0;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Tree]]></title>
      <url>http://beta.quasar-framework.org/components/tree.html</url>
      <content type="html"><![CDATA[<p>Quasar Tree represents a highly configurable component that displays hierarchical data, such as a table of contents in a tree structure.</p>
<p>Trees are stripped out of any design by default so you can<br>easily stylize and turn them into anything you want.</p>
<input type="hidden" data-fullpage-demo="other-components/tree">

<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-tree</span></span></div><div class="line">  <span class="attr">:model</span>=<span class="string">"treeModel"</span></div><div class="line">  <span class="attr">contract-html</span>=<span class="string">"&lt;i&gt;remove_circle&lt;/i&gt;"</span></div><div class="line">  <span class="attr">expand-html</span>=<span class="string">"&lt;i&gt;add_circle&lt;/i&gt;"</span></div><div class="line">&gt;<span class="tag">&lt;/<span class="name">q-tree</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Tree-model-structure"><a href="#Tree-model-structure" class="headerlink" title="Tree model structure"></a>Tree model structure</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">treeModel: [</div><div class="line">  &#123;</div><div class="line">    title: <span class="string">'Item 1'</span>,</div><div class="line">    expanded: <span class="literal">true</span>,</div><div class="line">    children: [</div><div class="line">      &#123;</div><div class="line">        title: <span class="string">'Item 1.1'</span>,</div><div class="line">        expanded: <span class="literal">false</span>,</div><div class="line">        children: [</div><div class="line">          &#123;</div><div class="line">            title: <span class="string">'Item 1.1.1'</span>,</div><div class="line">            expanded: <span class="literal">false</span>,</div><div class="line">            children: [</div><div class="line">              &#123;</div><div class="line">                title: <span class="string">'Item 1.1.1.1'</span>,</div><div class="line">                expanded: <span class="literal">false</span>,</div><div class="line">                children: []</div><div class="line">              &#125;</div><div class="line">            ]</div><div class="line">          &#125;,</div><div class="line">          &#123;</div><div class="line">            title: <span class="string">'Item 1.1.2'</span>,</div><div class="line">            expanded: <span class="literal">false</span>,</div><div class="line">            handler () &#123; <span class="built_in">console</span>.log(<span class="string">'Tapped on Item 1.1.2'</span>) &#125;,</div><div class="line">            children: []</div><div class="line">          &#125;</div><div class="line">        ]</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        title: <span class="string">'Item 1.2'</span>,</div><div class="line">        expanded: <span class="literal">false</span>,</div><div class="line">        children: []</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  &#123;</div><div class="line">    title: <span class="string">'Item 2'</span>,</div><div class="line">    expanded: <span class="literal">false</span>,</div><div class="line">    children: []</div><div class="line">  &#125;</div><div class="line">]</div></pre></td></tr></table></figure>
<h3 id="Handler-Method"><a href="#Handler-Method" class="headerlink" title="Handler Method"></a>Handler Method</h3><p>Items containing a <code>handler</code> method will make those items trigger the handler method when clicked/tapped.<br>The handler is passed the item as an argument.</p>
<h3 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h3><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>model</code></td>
<td>Vue model for the Tree</td>
</tr>
<tr>
<td><code>contract-html</code></td>
<td>HTML to display at the end of each item; when user clicks on it its branch contracts</td>
</tr>
<tr>
<td><code>expand-html</code></td>
<td>HTML to display at the end of each item; when user clicks on it its branch expands</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Uploader]]></title>
      <url>http://beta.quasar-framework.org/components/uploader.html</url>
      <content type="html"><![CDATA[<p>Quasar supplies a way for you to upload files through QUploader component.</p>
<p>Works well with <a href="/components/field.html">QField</a> for additional functionality such as a helper, error message placeholder and many others.</p>
<blockquote>
<p>The documentation website only allows static content, so a demo with QUploader is not possible as this assumes a server script running. As a result you can only see some screenshots (may be out of date) below:</p>
</blockquote>
<p><img src="/images/uploader-1.png" alt="Uploader Screenshot 1"><br><img src="/images/uploader-2.png" alt="Uploader Screenshot 2"></p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-uploader</span> <span class="attr">:url</span>=<span class="string">"url"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Vue-Properties"><a href="#Vue-Properties" class="headerlink" title="Vue Properties"></a>Vue Properties</h2><table>
<thead>
<tr>
<th>Vue Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>url</code></td>
<td>String</td>
<td>(<strong>Required</strong>) URL or path to the server which handles the upload</td>
</tr>
<tr>
<td><code>name</code></td>
<td>String</td>
<td>Name of the file, if it should be different than the file’s name.</td>
</tr>
<tr>
<td><code>headers</code></td>
<td>Object</td>
<td>Specify what headers need to be added to the XHR request</td>
</tr>
<tr>
<td><code>url-factory</code></td>
<td>Function</td>
<td>Function (with <code>file</code> object received as parameter) which returns a Promise that resolves to a URL.</td>
</tr>
<tr>
<td><code>method</code></td>
<td>String</td>
<td>HTTP method to use (POST/PUT). Defaults to POST.</td>
</tr>
<tr>
<td><code>extensions</code></td>
<td>String</td>
<td>Extensions to allow for uploading. Example: <code>&#39;.gif,.jpg,.jpeg,.png&#39;</code></td>
</tr>
<tr>
<td><code>multiple</code></td>
<td>Boolean</td>
<td>Allow multiple file uploads</td>
</tr>
<tr>
<td><code>hide-upload-button</code></td>
<td>Boolean</td>
<td>Hides the Upload button. You can then trigger it manually by calling <code>upload()</code> on the Vue ref</td>
</tr>
<tr>
<td><code>hide-upload-progress</code></td>
<td>Boolean</td>
<td>Hides the upload progress. Useful when you want some other means of signaling upload progress to the user.</td>
</tr>
<tr>
<td><code>additionalFields</code></td>
<td>Array</td>
<td><strong>Additional fields to send along the upload request.</strong> Useful for authentication and so on. Array of Objects containing <code>name</code> and <code>value</code> props.</td>
</tr>
</tbody>
</table>
<p>Common input frame properties:</p>
<table>
<thead>
<tr>
<th>Property</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>prefix</code></td>
<td>String</td>
<td>A text that should be shown before the textfield.</td>
</tr>
<tr>
<td><code>suffix</code></td>
<td>String</td>
<td>A text that should be shown after the textfield.</td>
</tr>
<tr>
<td><code>float-label</code></td>
<td>String</td>
<td>A text label that will “float” up above the input field, once the input field gets focus.</td>
</tr>
<tr>
<td><code>stack-label</code></td>
<td>String</td>
<td>A text label that will be shown above the input field and is static.</td>
</tr>
<tr>
<td><code>color</code></td>
<td>String</td>
<td>One from <a href="/components/color-palette.html">Quasar Color Palette</a>.</td>
</tr>
<tr>
<td><code>inverted</code></td>
<td>Boolean</td>
<td>Inverted mode. Color is applied to background instead.</td>
</tr>
<tr>
<td><code>dark</code></td>
<td>Boolean</td>
<td>Is QUploader rendered on a dark background?</td>
</tr>
<tr>
<td><code>align</code></td>
<td>String</td>
<td>One of ‘left’, ‘center’ or ‘right’ which determines the text align within textfield.</td>
</tr>
<tr>
<td><code>disable</code></td>
<td>Boolean</td>
<td>If set to <code>true</code>, textfield is disabled and the user cannot type anything.</td>
</tr>
<tr>
<td><code>error</code></td>
<td>Boolean</td>
<td>If set to true, the input fields colors are changed to show there is an error.</td>
</tr>
<tr>
<td><code>before</code></td>
<td>Array of Objects</td>
<td>Icon buttons on left side of input frame. Read below more details.</td>
</tr>
<tr>
<td><code>after</code></td>
<td>Array of Objects</td>
<td>Icon buttons on right side of input frame. Read below more details.</td>
</tr>
</tbody>
</table>
<h3 id="Icon-buttons"><a href="#Icon-buttons" class="headerlink" title="Icon buttons"></a>Icon buttons</h3><p>This section refers to <code>before</code> and <code>after</code> properties which can add additional buttons as icons to the textfield. Here is the structure of the two properties:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="comment">// required icon</span></div><div class="line">  icon: <span class="built_in">String</span>,</div><div class="line">  <span class="comment">// required function to call when</span></div><div class="line">  <span class="comment">// icon is clicked/tapped</span></div><div class="line">  handler: <span class="built_in">Function</span>,</div><div class="line"></div><div class="line">  <span class="comment">// Optional. Show icon button</span></div><div class="line">  <span class="comment">// if model has a value</span></div><div class="line">  content: <span class="built_in">Boolean</span>,</div><div class="line"></div><div class="line">  <span class="comment">// Optional. Show icon button</span></div><div class="line">  <span class="comment">// if textfield is marked with error</span></div><div class="line">  error: <span class="built_in">Boolean</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Examples:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!--</span></div><div class="line">  Show an icon button (with 'warning' as icon)</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">q-uploader</span></span></div><div class="line">  <span class="attr">:url</span>=<span class="string">"url"</span></div><div class="line">  <span class="attr">:after</span>=<span class="string">"[</span></div><div class="line">    &#123;</div><div class="line">      icon: 'warning',</div><div class="line">      handler () &#123;</div><div class="line">        // do something...</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]"</div><div class="line">/&gt;</div></pre></td></tr></table></figure></p>
<h2 id="Vue-Methods"><a href="#Vue-Methods" class="headerlink" title="Vue Methods"></a>Vue Methods</h2><table>
<thead>
<tr>
<th>Vue Method</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>upload()</code></td>
<td>Start file(s) upload.</td>
</tr>
<tr>
<td><code>abort()</code></td>
<td>Abort uploading file(s).</td>
</tr>
</tbody>
</table>
<h2 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h2><table>
<thead>
<tr>
<th>Vue Event</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@add(files)</code></td>
<td>Triggered when file is picked for upload</td>
</tr>
<tr>
<td><code>@remove:abort(file)</code></td>
<td>Triggered when file is removed from upload queue while uploading.</td>
</tr>
<tr>
<td><code>@remove:cancel(file)</code></td>
<td>Triggered when file is removed from upload queue before uploading.</td>
</tr>
<tr>
<td><code>@remove:done(file)</code></td>
<td>Triggered when file is removed from upload list after it has been  uploaded.</td>
</tr>
<tr>
<td><code>@uploaded(file, xhr)</code></td>
<td>Triggered individually for each file that has just been uploaded</td>
</tr>
<tr>
<td><code>@fail(file, xhr)</code></td>
<td>Triggered individually for each file that has encountered error while uploading</td>
</tr>
<tr>
<td><code>@start</code></td>
<td>Triggered when upload has started</td>
</tr>
<tr>
<td><code>@finish</code></td>
<td>Triggered when upload of file(s) has ended (with success or failure)</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Typography]]></title>
      <url>http://beta.quasar-framework.org/components/typography.html</url>
      <content type="html"><![CDATA[<p>See how headings, blockquotes, definitions lists and more are displayed in the demo. At the end of this page you can read about CSS helper classes.</p>
<input type="hidden" data-fullpage-demo="style-and-identity/typography">

<h3 id="Default-MD-Font"><a href="#Default-MD-Font" class="headerlink" title="Default MD Font"></a>Default MD Font</h3><p>The default font embedded in Quasar App <em>when built with Material Design Theme</em> is Roboto. It comes with 5 different font weights you can use: 100, 300, 400, 500, 700. Below is an image from Google’s Roboto Specimen document displaying the different font weights:</p>
<div style="max-width: 550px"><br><img src="/images/roboto.png" alt="Roboto Font" title="Roboto Font"><br></div>

<blockquote>
<p><strong>NOTE</strong><br>You can embed it for iOS theme too by copying font related code from <code>themes/app.mat.styl</code> to <code>themes/app.ios.styl</code> and requiring the <code>.styl</code> version of CSS in <code>src/App.vue</code></p>
</blockquote>
<h3 id="Text-Types"><a href="#Text-Types" class="headerlink" title="Text Types"></a>Text Types</h3><p>You can display text in a variety of ways.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Token (as CSS class) --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"token"</span>&gt;</span>blue<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Small and Big text --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">small</span>&gt;</span>Text<span class="tag">&lt;/<span class="name">small</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">big</span>&gt;</span>Text<span class="tag">&lt;/<span class="name">big</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- sub and sup --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">sub</span>&gt;</span>Subtext<span class="tag">&lt;/<span class="name">sub</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">sup</span>&gt;</span>Supertext<span class="tag">&lt;/<span class="name">sup</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Paragraphs --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Default Paragraph<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"caption"</span>&gt;</span>Caption Paragraph<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"light-paragraph"</span>&gt;</span>Light Paragraph<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"thin-paragraph"</span>&gt;</span>Thin Paragraph<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Bold or italic --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-bold"</span>&gt;</span>Bold text<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- or: --&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>Bold text<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-italic"</span>&gt;</span>Italic text<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- or: --&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>Italic text<span class="tag">&lt;/<span class="name">em</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Quotes --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"quote"</span>&gt;</span></div><div class="line">  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"quote text-right"</span>&gt;</span></div><div class="line">  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Blockquotes --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">small</span>&gt;</span>Someone famous for <span class="tag">&lt;<span class="name">cite</span> <span class="attr">title</span>=<span class="string">"Quasar Framework"</span>&gt;</span>Quasar Framework<span class="tag">&lt;/<span class="name">cite</span>&gt;</span><span class="tag">&lt;/<span class="name">small</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">blockquote</span> <span class="attr">class</span>=<span class="string">"text-right"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">small</span>&gt;</span>Someone famous for <span class="tag">&lt;<span class="name">cite</span> <span class="attr">title</span>=<span class="string">"Quasar Framework"</span>&gt;</span>Quasar Framework<span class="tag">&lt;/<span class="name">cite</span>&gt;</span><span class="tag">&lt;/<span class="name">small</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Definition Lists --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Description lists<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>A description list is perfect for defining terms.<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Euismod<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Vestibulum id ligula porta felis euismod semper eget lacinia odio sem nec elit.<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dl</span> <span class="attr">class</span>=<span class="string">"horizontal"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Description lists<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>A description list is perfect for defining terms.<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>Euismod<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>Vestibulum id ligula porta felis euismod semper eget lacinia odio sem nec elit.<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Tokens; alternative: Chips --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"token"</span>&gt;</span>Some token<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="CSS-Helper-Classes"><a href="#CSS-Helper-Classes" class="headerlink" title="CSS Helper Classes"></a>CSS Helper Classes</h3><table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>text-right</code></td>
<td>Align text to the right</td>
</tr>
<tr>
<td><code>text-left</code></td>
<td>Align text to the left</td>
</tr>
<tr>
<td><code>text-center</code></td>
<td>Align text to the center</td>
</tr>
<tr>
<td><code>text-justify</code></td>
<td>Text will be justified</td>
</tr>
<tr>
<td><code>text-truncate</code></td>
<td>Applies all CSS tweaks to truncate text when container is too small</td>
</tr>
<tr>
<td><code>text-bold</code></td>
<td>Text will be in bold</td>
</tr>
<tr>
<td><code>text-italic</code></td>
<td>Text will be in italic</td>
</tr>
<tr>
<td><code>caption</code></td>
<td>For use on caption parapgraphs</td>
</tr>
<tr>
<td><code>light-paragraph</code></td>
<td>Applies a font-weight of 300</td>
</tr>
<tr>
<td><code>thin-paragraph</code></td>
<td>Applies a font-weight of 200</td>
</tr>
<tr>
<td><code>uppercase</code></td>
<td>Transform text to uppercase</td>
</tr>
<tr>
<td><code>lowercase</code></td>
<td>Transform text to lowercase</td>
</tr>
<tr>
<td><code>capitalize</code></td>
<td>Capitalize first letter of the text</td>
</tr>
<tr>
<td><code>strong</code></td>
<td>DOM element’s font becomes <strong>bold</strong></td>
</tr>
<tr>
<td><code>emphasize</code></td>
<td>DOM element’s font becomes <em>italic</em></td>
</tr>
<tr>
<td><code>round-borders</code></td>
<td>Every Quasar Theme has a generic border radius. This radius is applied to the DOM node</td>
</tr>
<tr>
<td><code>block</code></td>
<td><code>display</code> property set to <code>block</code></td>
</tr>
<tr>
<td><code>no-margin</code></td>
<td>Margins are set to 0</td>
</tr>
<tr>
<td><code>no-padding</code></td>
<td>Padding is set to 0</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Video Embedding]]></title>
      <url>http://beta.quasar-framework.org/components/video-embedding.html</url>
      <content type="html"><![CDATA[<p>Embedding a video like Youtube is easy. It also resizes to fit the container by default.</p>
<input type="hidden" data-fullpage-demo="media/video">

<h2 id="Using-QVideo"><a href="#Using-QVideo" class="headerlink" title="Using QVideo"></a>Using QVideo</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">q-video</span></span></div><div class="line">  <span class="attr">src</span>=<span class="string">"https://www.youtube.com/embed/k3_tw44QsZQ?rel=0"</span></div><div class="line">  <span class="attr">style</span>=<span class="string">"width: 853px; height: 480px"</span></div><div class="line">/&gt;</div></pre></td></tr></table></figure>
<p>Or, if you prefer the “raw” version for more control:<br><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"q-video"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">iframe</span></span></div><div class="line">    <span class="attr">width</span>=<span class="string">"853"</span></div><div class="line">    <span class="attr">height</span>=<span class="string">"480"</span></div><div class="line">    <span class="attr">src</span>=<span class="string">"https://www.youtube.com/embed/k3_tw44QsZQ?rel=0"</span></div><div class="line">    <span class="attr">frameborder</span>=<span class="string">"0"</span></div><div class="line">    <span class="attr">allowfullscreen</span></div><div class="line">  &gt;<span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[CSS Visibility]]></title>
      <url>http://beta.quasar-framework.org/components/visibility.html</url>
      <content type="html"><![CDATA[<p>There are some CSS classes that you can use out of the box for common functionality.</p>
<table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>disabled</code></td>
<td>Cursor is changed to notify a ‘disable’ and opacity is set to a lower value.</td>
</tr>
<tr>
<td><code>hidden</code></td>
<td>Set <code>display</code> to <code>none</code>. Compare with below - the class <code>hidden</code> means the element will not show <em>and</em> will not take up space in the layout.</td>
</tr>
<tr>
<td><code>invisible</code></td>
<td>Set <code>visibility</code> to <code>hidden</code>. Compare with above - the class <code>invisible</code> means the element will not show, but it will still take up space in the layout.</td>
</tr>
<tr>
<td><code>transparent</code></td>
<td>Background color is transparent.</td>
</tr>
<tr>
<td><code>dimmed</code></td>
<td>Apply dark transparent overlay on top of your element. Do not use on elements which already have <strong>:after</strong> pseudoelement.</td>
</tr>
<tr>
<td><code>light-dimmed</code></td>
<td>Apply white transparent overlay on top of your element. Do not use on elements which already have <strong>:after</strong> pseudoelement.</td>
</tr>
<tr>
<td><code>highlight-and-fade</code></td>
<td>Adds a yellow background color and fades it away upon element is displayed.</td>
</tr>
<tr>
<td><code>ellipsis</code></td>
<td>Truncates text and shows ellipsis when not enough space available.</td>
</tr>
<tr>
<td><code>ellipsis-2-lines</code></td>
<td>Truncates text and shows ellipsis when not enough space available on two lines (works only on Webkit browsers).</td>
</tr>
<tr>
<td><code>ellipsis-3-lines</code></td>
<td>Truncates text and shows ellipsis when not enough space available on three lines (works only on Webkit browsers).</td>
</tr>
<tr>
<td><code>z-absolute</code></td>
<td>Positions your element on top of any other component (including Drawer, Modals, Toasts, Layout header/footer, …)</td>
</tr>
</tbody>
</table>
<h3 id="Window-Width-Related"><a href="#Window-Width-Related" class="headerlink" title="Window Width Related"></a>Window Width Related</h3><p>First of all, let’s define what does a small, medium, big or large window means:</p>
<table>
<thead>
<tr>
<th>Window Size</th>
<th>Prefix</th>
<th>Width threshold in pixels</th>
</tr>
</thead>
<tbody>
<tr>
<td>Extra Small</td>
<td>xs</td>
<td>Up to 576px</td>
</tr>
<tr>
<td>Small</td>
<td>sm</td>
<td>Up to 768px</td>
</tr>
<tr>
<td>Medium</td>
<td>md</td>
<td>Up to 992px</td>
</tr>
<tr>
<td>Large</td>
<td>lg</td>
<td>Up to 1200px</td>
</tr>
<tr>
<td>Extra Large</td>
<td>xl</td>
<td>Bigger than 1200px</td>
</tr>
</tbody>
</table>
<p>Now on to the window width related CSS classes.</p>
<table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>xs</code></td>
<td>Display only on extra small windows</td>
</tr>
<tr>
<td><code>sm</code></td>
<td>Display only on small windows</td>
</tr>
<tr>
<td><code>md</code></td>
<td>Display only on medium-sized windows</td>
</tr>
<tr>
<td><code>lg</code></td>
<td>Display only on large windows</td>
</tr>
<tr>
<td><code>xl</code></td>
<td>Display only on extra large windows</td>
</tr>
</tbody>
</table>
<p>You can also show some DOM element or component <strong>if it’s lower than one of the sizes</strong>. <strong>Same for greater than one of the sizes</strong>. Just attach <code>lt-</code> or <code>gt-</code> prefixes, which come from “lower than” and “greater than”. Example: <code>lt-md</code> (display on xs and sm only), <code>lt-xl</code> (display on xs, sm, md and lg windows only), <code>gt-md</code> (display on greater than medium windows: lg and xl).</p>
<blockquote>
<p><strong>NOTE</strong><br>You can combine the visibility classes with the <code>inline</code> class for inline-blocks.<br>Example : <code>&lt;span class=&quot;gt-sm inline&quot;&gt;&amp;nbsp;and here is the end of this long sentence.&lt;/span&gt;</code></p>
</blockquote>
<h3 id="Platform-Related"><a href="#Platform-Related" class="headerlink" title="Platform Related"></a>Platform Related</h3><p>Visible only on:</p>
<table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>desktop-only</code></td>
<td>Visible only on desktop</td>
</tr>
<tr>
<td><code>mobile-only</code></td>
<td>Visible only on mobile</td>
</tr>
<tr>
<td><code>cordova-only</code></td>
<td>Visible only on Cordova wrapped Apps</td>
</tr>
<tr>
<td><code>electron-only</code></td>
<td>Visible only on Electron wrapped Apps</td>
</tr>
<tr>
<td><code>touch-only</code></td>
<td>Visible only on touch capable platforms</td>
</tr>
<tr>
<td><code>mat-only</code></td>
<td>Visible only for Material Quasar Theme</td>
</tr>
<tr>
<td><code>ios-only</code></td>
<td>Visible only for iOS Quasar Theme</td>
</tr>
<tr>
<td><code>platform-ios</code></td>
<td>Visible only on an iOS platform</td>
</tr>
<tr>
<td><code>platform-android</code></td>
<td>Visible only on an Android platform</td>
</tr>
<tr>
<td><code>within-iframe-only</code></td>
<td>Visible only when entire website is under an IFRAME tag</td>
</tr>
</tbody>
</table>
<p>Hide on:</p>
<table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>desktop-hide</code></td>
<td>Hide on desktop</td>
</tr>
<tr>
<td><code>mobile-hide</code></td>
<td>Hide on mobile</td>
</tr>
<tr>
<td><code>cordova-hide</code></td>
<td>Hide on Cordova wrapped Apps</td>
</tr>
<tr>
<td><code>electron-hide</code></td>
<td>Hide on Electron wrapped Apps</td>
</tr>
<tr>
<td><code>touch-hide</code></td>
<td>Hide on touch capable platforms</td>
</tr>
<tr>
<td><code>mat-hide</code></td>
<td>Hide for Material Quasar Theme</td>
</tr>
<tr>
<td><code>ios-hide</code></td>
<td>Hide for iOS Quasar Theme</td>
</tr>
<tr>
<td><code>platform-ios</code></td>
<td>Hide on iOS platform</td>
</tr>
<tr>
<td><code>platform-android</code></td>
<td>Hide on Android platform</td>
</tr>
<tr>
<td><code>within-iframe-hide</code></td>
<td>Hide only when entire website is under an IFRAME tag</td>
</tr>
</tbody>
</table>
<p>Also check <a href="/guide/quasar-theming.html#Platform-Specific-Styles">Quasar Theming &gt; Platform Specific Styles</a>.</p>
<blockquote>
<p><strong>NOTE</strong><br>There is also a non-recommended way to hide DOM elements through Javascript. Read more on <a href="/components/platform-detection.html">Javascript &gt; Environment</a> page.</p>
</blockquote>
<h3 id="Orientation-Related"><a href="#Orientation-Related" class="headerlink" title="Orientation Related"></a>Orientation Related</h3><table>
<thead>
<tr>
<th>Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>orientation-portrait</code></td>
<td>Visible only when screen orientation is <em>Portrait</em></td>
</tr>
<tr>
<td><code>orientation-landscape</code></td>
<td>Visible only when screen orientation is <em>Landscape</em></td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Vue Prototype Injections]]></title>
      <url>http://beta.quasar-framework.org/components/vue-prototype-injections.html</url>
      <content type="html"><![CDATA[<p>Quasar injects Vue prototype with <code>$q</code> object:</p>
<table>
<thead>
<tr>
<th>Injection</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>$q.version</code></td>
<td>String</td>
<td>Quasar version.</td>
</tr>
<tr>
<td><code>$q.theme</code></td>
<td>String</td>
<td>Theme being used. Examples: mat, ios</td>
</tr>
<tr>
<td><code>$q.platform</code></td>
<td>Object</td>
<td>Same object as <a href="/components/platform-detection.html">Platform</a> import from Quasar.</td>
</tr>
<tr>
<td><code>$q.events</code></td>
<td>Object</td>
<td>Same object as <a href="/components/global-event-bus.html">Events</a> import from Quasar.</td>
</tr>
</tbody>
</table>
<p>You can use it globally inside a Vue context (component script or template) like this:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- inside a Vue template --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"$q.platform.is.ios"</span>&gt;</span></div><div class="line">      Gets rendered only on iOS platform.</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="comment">// not availabel here outside</span></div><div class="line"><span class="comment">// of the export</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  <span class="comment">// inside a Vue component script</span></div><div class="line">  ...,</div><div class="line"></div><div class="line">  <span class="comment">// showing an example on a method, but</span></div><div class="line">  <span class="comment">// can be any part of Vue script</span></div><div class="line">  methods: &#123;</div><div class="line">    show () &#123;</div><div class="line">      <span class="comment">// prints out Quasar version</span></div><div class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.$q.version)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Mobile-Apps"><a href="#Mobile-Apps" class="headerlink" title="Mobile Apps"></a>Mobile Apps</h3><p>When running under Cordova, you’ll be able to use <code>$cordova</code> injection too (<code>this.$cordova</code> in Vue components script, <code>$cordova</code> in Vue templates).</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Web Storage]]></title>
      <url>http://beta.quasar-framework.org/components/web-storage.html</url>
      <content type="html"><![CDATA[<p>Quasar provides a wrapper over <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API" target="_blank" rel="external">Web Storage API</a>.</p>
<blockquote>
<p><strong>NOTE</strong><br>Web Storage API only retrieves strings. <strong>Quasar retrieves data with its original data type.</strong> You tell it to store a Number then to retrieve it and it will still be a Number, not a string representation of the number as with Web Storage API. Same for JSON, Regular Expressions, Dates, Booleans and so on. Read below.</p>
</blockquote>
<h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><p>Quasar supports both Local and Session Storage.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; LocalStorage, SessionStorage &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">LocalStorage.set(key, value)</div><div class="line"><span class="keyword">let</span> value = LocalStorage.get.item(key)</div><div class="line"></div><div class="line">SessionStorage.set(key, value)</div><div class="line"><span class="keyword">let</span> value = SessionStorage.get.item(key)</div></pre></td></tr></table></figure>
<p>Before we jump to discuss on the API, let’s see what data types are supported out of the box.</p>
<h2 id="Data-Types"><a href="#Data-Types" class="headerlink" title="Data Types"></a>Data Types</h2><p>Quasar Storage supports (but not limited to) the following data types out of the box. If you store one of these types, the retrieved data will have the same data type.</p>
<ul>
<li>Dates</li>
<li>Regular Expressions</li>
<li>Numbers</li>
<li>Booleans</li>
<li>Strings</li>
<li>Plain Javascript Objects</li>
</ul>
<p>If you store any <em>other</em> data type, the returned value will be a String.</p>
<p>So you can even store functions, but be careful that you need to eval() the returned value (which is a String representation of the function).</p>
<h2 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h2><h3 id="Storing-Data"><a href="#Storing-Data" class="headerlink" title="Storing Data"></a>Storing Data</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; LocalStorage, SessionStorage &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">LocalStorage.set(key, value)</div><div class="line">SessionStorage.set(key, value)</div></pre></td></tr></table></figure>
<h3 id="Retrieving-Data"><a href="#Retrieving-Data" class="headerlink" title="Retrieving Data"></a>Retrieving Data</h3><p>One item:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; LocalStorage, SessionStorage &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> item = LocalStorage.get.item(key)</div><div class="line"><span class="keyword">let</span> item = SessionStorage.get.item(key)</div></pre></td></tr></table></figure></p>
<p>All items:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; LocalStorage, SessionStorage &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> item = LocalStorage.get.all()</div><div class="line"><span class="keyword">let</span> item = SessionStorage.get.all()</div></pre></td></tr></table></figure></p>
<h3 id="Iterating-through-Store"><a href="#Iterating-through-Store" class="headerlink" title="Iterating through Store"></a>Iterating through Store</h3><p>Getting length of store:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; LocalStorage, SessionStorage &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> length = LocalStorage.get.length()</div><div class="line"><span class="keyword">let</span> length = SessionStorage.get.length()</div></pre></td></tr></table></figure></p>
<p>Getting item at index:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; LocalStorage, SessionStorage &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> item = LocalStorage.get.index(index)</div><div class="line"><span class="keyword">let</span> item = SessionStorage.get.index(index)</div></pre></td></tr></table></figure></p>
<p>Now you know how to loop through the store.</p>
<h3 id="Removing-Data"><a href="#Removing-Data" class="headerlink" title="Removing Data"></a>Removing Data</h3><p>One item:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; LocalStorage, SessionStorage &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">LocalStorage.remove(key)</div><div class="line">SessionStorage.remove(key)</div></pre></td></tr></table></figure></p>
<p>All items (clear the store):<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; LocalStorage, SessionStorage &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">LocalStorage.clear(key)</div><div class="line">SessionStorage.clear(key)</div></pre></td></tr></table></figure></p>
<h3 id="Is-Store-Empty"><a href="#Is-Store-Empty" class="headerlink" title="Is Store Empty?"></a>Is Store Empty?</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; LocalStorage, SessionStorage &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">(boolean) LocalStorage.isEmpty()</div><div class="line">(boolean) SessionStorage.isEmpty()</div></pre></td></tr></table></figure>
<h3 id="Is-Key-in-Store"><a href="#Is-Key-in-Store" class="headerlink" title="Is Key in Store?"></a>Is Key in Store?</h3><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; LocalStorage, SessionStorage &#125; <span class="keyword">from</span> <span class="string">'quasar'</span></div><div class="line"></div><div class="line">(boolean) LocalStorage.has(key)</div><div class="line">(boolean) SessionStorage.has(key)</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Window Resize Observable]]></title>
      <url>http://beta.quasar-framework.org/components/window-resize-observable.html</url>
      <content type="html"><![CDATA[<p>QWindowResizeObservable is a Quasar component that emits a <code>resize</code> event whenever the document viewport (window) changes its size, with no polling involved.</p>
<h2 id="Basic-Usage"><a href="#Basic-Usage" class="headerlink" title="Basic Usage"></a>Basic Usage</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  ...</div><div class="line">    <span class="comment">&lt;!--can be placed anywhere within your template --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">q-window-resize-observable</span> @<span class="attr">resize</span>=<span class="string">"onResize"</span> /&gt;</span></div><div class="line">  ...</div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  ...,</div><div class="line">  methods: &#123;</div><div class="line">    ...,</div><div class="line">    onResize (size) &#123;</div><div class="line">      <span class="built_in">console</span>.log(size)</div><div class="line">      <span class="comment">// &#123;</span></div><div class="line">      <span class="comment">//   width: 1200 // width of viewport (in px)</span></div><div class="line">      <span class="comment">//   height: 920 // height of viewport (in px)</span></div><div class="line">      <span class="comment">// &#125;</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Please note that QWindowResizeObservable will issue an event as soon as it gets rendered and attached to DOM, so you can have the initial size of the window.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ajax Requests]]></title>
      <url>http://beta.quasar-framework.org/guide/ajax-requests.html</url>
      <content type="html"><![CDATA[<p>Quasar recommends using <code>Axios</code> or <code>Vue-Ressource</code>.<br>These packages are not provided by default so you will have to npm install them and import from <code>src/main.js</code>.</p>
<h2 id="Quickstart-with-axios"><a href="#Quickstart-with-axios" class="headerlink" title="Quickstart with axios"></a>Quickstart with axios</h2><p>Installation: <code>npm install axios --save</code></p>
<p>First make the package globally available within Vue(main.js):<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">import axios from &apos;axios&apos;;</div><div class="line">Vue.prototype.$http = axios</div></pre></td></tr></table></figure></p>
<p>Then to use the package in your components:<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">// Make a get request</div><div class="line">this.$http.get(&apos;/user&apos;)</div><div class="line">  .then(function (response) &#123;</div><div class="line">    console.log(response);</div><div class="line">  &#125;)</div><div class="line">  .catch(function (error) &#123;</div><div class="line">    console.log(error);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure></p>
<ul>
<li>Get started with <a href="https://github.com/mzabriskie/axios" target="_blank" rel="external">axios</a></li>
<li>Get started with <a href="https://github.com/pagekit/vue-resource" target="_blank" rel="external">vue-resource</a></li>
<li>Vue Cookbook topic <a href="https://vuejs.org/v2/cookbook/adding-instance-properties.html" target="_blank" rel="external">vuejs-cookbook</a></li>
<li>Using libraries from npm with vue: <a href="http://vuejsdevelopers.com/2017/04/22/vue-js-libraries-plugins/" target="_blank" rel="external">vuejsdevelopers.com</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[App API Proxying for Dev]]></title>
      <url>http://beta.quasar-framework.org/guide/app-api-proxying-for-dev.html</url>
      <content type="html"><![CDATA[<p>When integrating the boilerplate created by Quasar CLI with an existing backend, a common need is to access the backend API when using the dev server. To achieve that, we can run the dev server and the API backend side-by-side (or remotely), and let the dev server proxy all API requests to the actual backend.</p>
<p>To configure the proxy rules, edit <code>dev.proxyTable</code> option in <code>config/index.js</code>. The dev server is using <code>http-proxy-middleware</code> for proxying, so you should refer to its docs for detailed usage. But here’s a simple example:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// config/index.js</span></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  dev: &#123;</div><div class="line">    ...</div><div class="line">    proxyTable: &#123;</div><div class="line">      <span class="comment">// proxy all requests starting with /api to jsonplaceholder</span></div><div class="line">      <span class="string">'/api'</span>: &#123;</div><div class="line">        target: <span class="string">'http://jsonplaceholder.typicode.com'</span>,</div><div class="line">        changeOrigin: <span class="literal">true</span>,</div><div class="line">        pathRewrite: &#123;</div><div class="line">          <span class="string">'^/api'</span>: <span class="string">''</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>The above example will proxy the request <code>/api/posts/1</code> to <code>http://jsonplaceholder.typicode.com/posts/1</code>.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[App Folder Boilerplate]]></title>
      <url>http://beta.quasar-framework.org/guide/app-boilerplate.html</url>
      <content type="html"><![CDATA[<p>The Quasar CLI helps you start an App folder with all the necessary boilerplate  you will need to get started building your application. To begin, there is a simple command:<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$ quasar init &lt;folder name&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>The boilerplate created is a fork of the <a href="https://github.com/vuejs-templates/webpack" target="_blank" rel="external">official Webpack + VueJs</a> repo. So, if you’ve worked with Vue’s CLI, Quasar’s CLI should seem quite familiar to you.</p>
</blockquote>
<p>If you want to tweak things specific for your App, you first need to understand the underlying tools being used in the generated boilerplate.</p>
<p>The boilerplate is targeted towards large, serious projects and assumes you are somewhat familiar with <strong>Webpack</strong> and <strong>vue-loader</strong>. Make sure to also read <a href="http://vue-loader.vuejs.org/index.html" target="_blank" rel="external">vue-loader’s documentation</a> for common workflow recipes.</p>
<h2 id="What’s-Included"><a href="#What’s-Included" class="headerlink" title="What’s Included"></a>What’s Included</h2><p>While developing with Dev Server (<code>$ quasar dev</code>):</p>
<ul>
<li>Webbpack + vue-loader for single file Vue components</li>
<li>State preserving hot-reload</li>
<li>State preserving compilation error overlay</li>
<li>Lint-on-save with ESLint</li>
<li>Source maps</li>
</ul>
<p>Developing for production (<code>$quasar build</code>):</p>
<ul>
<li>Javascript minified with <a href="https://github.com/mishoo/UglifyJS2" target="_blank" rel="external">UglifyJS</a></li>
<li>HTML minified with <a href="https://github.com/kangax/html-minifier" target="_blank" rel="external">html-minifier</a></li>
<li>CSS across all components extracted into a single file and minified with <a href="https://github.com/ben-eb/cssnano" target="_blank" rel="external">cssnano</a></li>
<li>All static assets are compiled with version hashes for efficient long-term caching, and a production index.html is auto-generated with proper URLs to these generated assets.</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[App Build Commands]]></title>
      <url>http://beta.quasar-framework.org/guide/app-build-commands.html</url>
      <content type="html"><![CDATA[<h3 id="Development"><a href="#Development" class="headerlink" title="Development"></a>Development</h3><blockquote>
<p>Starts a Node.js local development server. See <a href="/guide/app-api-proxying-for-dev.html">API Proxying For Dev</a> for more details.</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># run development server (with default theme)</span></div><div class="line">$ quasar dev</div><div class="line"></div><div class="line"><span class="comment"># run development server with specific theme</span></div><div class="line">$ quasar dev mat</div><div class="line">$ quasar dev ios</div><div class="line"></div><div class="line"><span class="comment"># dev server with QR code</span></div><div class="line"><span class="comment"># scan QR code with Quasar Play app</span></div><div class="line">$ quasar dev -p</div><div class="line">$ quasar dev --play</div><div class="line">$ quasar dev mat --play</div></pre></td></tr></table></figure>
<p>While developing with the Dev Server you will have:</p>
<ul>
<li>The ability to develop on your phone with <a href="/guide/quasar-play-app.html">Quasar Play</a> App</li>
<li>The Webbpack + vue-loader for single file Vue components</li>
<li>State preserving hot-reload</li>
<li>State preserving compilation error overlay</li>
<li>Lint-on-save with ESLint</li>
<li>Source maps</li>
</ul>
<h4 id="Generate-vue-Components"><a href="#Generate-vue-Components" class="headerlink" title="Generate .vue Components"></a>Generate .vue Components</h4><p>After creating an App folder with the CLI, you’ll have a folder named <code>/templates</code> inside the generated app folder, which contains templates for: <code>layout</code>, <code>page</code>, or a generic Vue <code>component</code>.</p>
<p>You can generate components for your App in your <code>/src</code> folder:<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># get available Component templates</div><div class="line">$ quasar new -l</div><div class="line">$ quasar new --list</div><div class="line"></div><div class="line"># generate .vue file from a Component template</div><div class="line">$ quasar new component Hello</div><div class="line"></div><div class="line"># generate .vue file from a template to a subfolder</div><div class="line">$ quasar new layout layout/about/help/Hello</div><div class="line"># the above creates src/components/layout/about/help/Hello.vue</div></pre></td></tr></table></figure></p>
<blockquote>
<p>You can also add your own component templates. Quasar will be able to handle them too.</p>
</blockquote>
<h4 id="Serve-Static-Content-Folder"><a href="#Serve-Static-Content-Folder" class="headerlink" title="Serve Static-Content Folder"></a>Serve Static-Content Folder</h4><p>You are able to create an ad-hoc web server to serve static-content web files from a folder. Browser sessions are automatically refreshed when content changes. User click/scroll can be synchronized.</p>
<p>This command comes in really handy after building your Quasar App for production. The <code>/dist</code> folder contains files that are meant to be served with a webserver. So here you go:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># Serve current folder:</span></div><div class="line">$ quasar serve</div><div class="line"></div><div class="line"><span class="comment"># ..or serve a full or relative path</span></div><div class="line">$ quasar serve dist</div><div class="line">$ quasar serve ./dist</div><div class="line">$ quasar serve /work/quasar-app/dist</div></pre></td></tr></table></figure>
<p>This command does not rely on Quasar Framework. Any folder with any web content can be served.</p>
<h3 id="Production"><a href="#Production" class="headerlink" title="Production"></a>Production</h3><blockquote>
<p>Build assets for production.</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># build for production</span></div><div class="line">$ quasar build</div><div class="line"></div><div class="line"><span class="comment"># build for production with specific theme</span></div><div class="line">$ quasar build mat</div><div class="line">$ quasar build ios</div></pre></td></tr></table></figure>
<ul>
<li>Javascript minified with <a href="https://github.com/mishoo/UglifyJS2" target="_blank" rel="external">UglifyJS</a></li>
<li>HTML minified with <a href="https://github.com/kangax/html-minifier" target="_blank" rel="external">html-minifier</a></li>
<li>Unused CSS removed with <a href="https://github.com/purifycss/purifycss" target="_blank" rel="external">PurifyCSS</a></li>
<li>CSS across all components extracted into a single file and minified with <a href="https://github.com/ben-eb/cssnano" target="_blank" rel="external">cssnano</a></li>
<li>All static assets compiled with version hashes for efficient long-term caching, and a production index.html is auto-generated with proper URLs to these generated assets</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Dev vs Production Code]]></title>
      <url>http://beta.quasar-framework.org/guide/app-dev-vs-production-code.html</url>
      <content type="html"><![CDATA[<p>Quasar boilerplate has built-in functionality so you can differentiate between Development and Production code.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span> (DEV) &#123;</div><div class="line">  <span class="comment">// this code block gets executed only in Dev mode</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (PROD) &#123;</div><div class="line">  <span class="comment">// this code block gets executed only in Production mode</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Due to the way that this is implemented, for example when building for Production, the first block (dealing with Dev mode) is completely discarded from the bundle (gets removed for the production build).</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[App Handling Static Assets]]></title>
      <url>http://beta.quasar-framework.org/guide/app-handling-static-assets.html</url>
      <content type="html"><![CDATA[<p>You will notice in the project structure we have two directories for static assets: <code>src/assets/</code> and <code>src/statics/</code>. What is the difference between them?</p>
<h2 id="Webpacked-Assets"><a href="#Webpacked-Assets" class="headerlink" title="Webpacked Assets"></a>Webpacked Assets</h2><p>To answer this question, we first need to understand how Webpack deals with static assets. In <code>*.vue</code> components, all your templates and CSS are parsed by <code>vue-html-loader</code> and <code>css-loader</code> to look for asset URLs. For example, in <code>&lt;img src=&quot;./logo.png&quot;&gt;</code> and <code>background: url(./logo.png)</code>, <code>&quot;./logo.png&quot;</code> is a relative asset path and will be resolved by Webpack as a module dependency.</p>
<p>Because <code>logo.png</code> is not JavaScript, when treated as a module dependency, we need to use <code>url-loader</code> and <code>file-loader</code> to process it. The boilerplate has already configured these loaders for you, so you basically get features such as filename fingerprinting and conditional base64 inlining for free, while being able to use relative/module paths without worrying about deployment.</p>
<p>Since these assets may be inlined/copied/renamed during build, they are essentially part of your source code. This is why it is recommended to place Webpack-processed static assets inside <code>/src/assets</code>, along side other source files. In fact, you don’t even have to put them all in <code>/src/assets</code>: you can organize them based on the module/component using them. For example, you can put each component in its own directory, with its static assets right next to it.</p>
<h2 id="Asset-Resolving-Rules"><a href="#Asset-Resolving-Rules" class="headerlink" title="Asset Resolving Rules"></a>Asset Resolving Rules</h2><p>Relative URLs, e.g. <code>./assets/logo.png</code> will be interpreted as a module dependency. They will be replaced with a auto-generated URL based on your Webpack output configuration.</p>
<p>Non-prefixed URLs, e.g. <code>assets/logo.png</code> will be treated the same as the relative URLs and translated into <code>./assets/logo.png</code>.</p>
<p>URLs prefixed with <code>~</code> are treated as a module request, similar to <code>require(&#39;some-module/image.png&#39;)</code>. You need to use this prefix if you want to leverage Webpack’s module resolving configurations. For example if you have a resolve alias for assets, you need to use <code>&lt;img src=&quot;~assets/logo.png&quot;&gt;</code> to ensure that alias is respected.</p>
<p>Root-relative URLs, e.g. <code>/assets/logo.png</code> are not processed at all. This should be placed in <code>src/statics/</code>.</p>
<blockquote>
<p><strong>IMPORTANT</strong><br><br>You can force serving static assets by using <code>src</code> as a Vue property. Instead of <code>src=&quot;statics/path/to/image&quot;</code> use <code>:src=&quot;&#39;statics/path/to/image&#39;&quot;</code>. Please note the usage of single and double quotes.</p>
</blockquote>
<h2 id="Getting-Asset-Paths-in-JavaScript"><a href="#Getting-Asset-Paths-in-JavaScript" class="headerlink" title="Getting Asset Paths in JavaScript"></a>Getting Asset Paths in JavaScript</h2><p>In order for Webpack to return the correct asset paths, you need to use <code>require(&#39;./relative/path/to/file.jpg&#39;)</code>, which will get processed by <code>file-loader</code> and returns the resolved URL. For example:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">computed: &#123;</div><div class="line">  background () &#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'./bgs/'</span> + <span class="keyword">this</span>.id + <span class="string">'.jpg'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Note the above example will include every image under <code>./bgs/</code> in the final build. This is because Webpack cannot guess which of them will be used at runtime, so it includes them all.</p>
<h2 id="“Real”-Static-Assets"><a href="#“Real”-Static-Assets" class="headerlink" title="“Real” Static Assets"></a>“Real” Static Assets</h2><p>In comparison, files in <code>src/statics/</code> are not processed by Webpack at all: they are directly copied to their final destination as-is, with the same filename. You must reference these files using absolute paths, which is determined by <code>build.publicPath</code> in <code>config/index.js</code>.</p>
<p>As an example, with the following default values:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// config/index.js</span></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  build: &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    publicPath: <span class="string">'/'</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Any file placed in <code>src/statics/</code> should be referenced using the absolute URL <code>/statics/[filename]</code>.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[App Linter Configuration]]></title>
      <url>http://beta.quasar-framework.org/guide/app-linter-configuration.html</url>
      <content type="html"><![CDATA[<p>The boilerplate created by Quasar CLI uses <a href="http://eslint.org/" target="_blank" rel="external">ESLint</a> as the linter, and uses the <a href="https://github.com/feross/standard/blob/master/RULES.md" target="_blank" rel="external">Standard</a> preset with some small customizations.</p>
<p>If you are not happy with the default linting rules, you have several options:</p>
<ol>
<li><p>Overwrite individual rules in .eslintrc.js. For example, you can add the following rule to enforce semicolons instead of omitting them:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="string">"semi"</span>: [<span class="number">2</span>, <span class="string">"always"</span>]</div></pre></td></tr></table></figure>
</li>
<li><p>Remove linter by editing <code>/build/webpack.base.conf.js</code> and removing (or commenting) the lines below from <code>module/rules</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&#123; <span class="comment">// eslint</span></div><div class="line">  enforce: <span class="string">'pre'</span>,</div><div class="line">  test: <span class="regexp">/\.(vue|js)$/</span>,</div><div class="line">  loader: <span class="string">'eslint-loader'</span>,</div><div class="line">  include: projectRoot,</div><div class="line">  exclude: <span class="regexp">/node_modules/</span>,</div><div class="line">  options: &#123;</div><div class="line">    formatter: <span class="built_in">require</span>(<span class="string">'eslint-friendly-formatter'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[App Pre-Processors]]></title>
      <url>http://beta.quasar-framework.org/guide/app-pre-processors.html</url>
      <content type="html"><![CDATA[<p>The boilerplate created with Quasar CLI has pre-configured CSS extraction for most popular CSS pre-processors including LESS, SASS, Stylus, and PostCSS. To use a pre-processor, all you need to do is installing the appropriate webpack loader for it. For example, to use SASS:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ npm install sass-loader node-sass --save-dev</div></pre></td></tr></table></figure>
<p>Note you also need to install node-sass because sass-loader depends on it as a peer dependency.</p>
<h2 id="Installing-CSS-related-loaders"><a href="#Installing-CSS-related-loaders" class="headerlink" title="Installing CSS related loaders"></a>Installing CSS related loaders</h2><p>By default, if you will use LESS, SASS/SCSS you only need to install the loader. If however you want another CSS preprocessor, install the loader then edit <code>build/css-utils.js</code> by adding an entry to <code>styleLoaders</code> besides the standard following ones:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">  css: generateLoaders([<span class="string">'css'</span>]),</div><div class="line">  less: generateLoaders([<span class="string">'css'</span>, <span class="string">'less'</span>]),</div><div class="line">  sass: generateLoaders([<span class="string">'css'</span>, <span class="string">'sass?indentedSyntax'</span>]),</div><div class="line">  scss: generateLoaders([<span class="string">'css'</span>, <span class="string">'sass'</span>]),</div><div class="line">  styl: generateLoaders([<span class="string">'css'</span>, <span class="string">'stylus'</span>]),</div><div class="line">  stylus: generateLoaders([<span class="string">'css'</span>, <span class="string">'stylus'</span>])</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Installing-non-CSS-related-loaders"><a href="#Installing-non-CSS-related-loaders" class="headerlink" title="Installing non-CSS related loaders:"></a>Installing non-CSS related loaders:</h2><p>After installing your loaders, make sure you edit <code>build/webpack.base.config.js</code> and add entries to <code>module/rules</code> for each new loader. Example of a loader:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">  test: <span class="regexp">/\.js$/</span>,</div><div class="line">  loader: <span class="string">'babel-loader'</span>,</div><div class="line">  include: projectRoot,</div><div class="line">  exclude: <span class="regexp">/node_modules/</span></div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<h2 id="Using-Pre-Processors-inside-Components"><a href="#Using-Pre-Processors-inside-Components" class="headerlink" title="Using Pre-Processors inside Components"></a>Using Pre-Processors inside Components</h2><p>Once installed, you can use the pre-processors inside your <code>*.vue</code> components using the lang attribute on <code>&lt;style&gt;</code> tags:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"scss"</span>&gt;</span><span class="undefined"></span></div><div class="line">/* write SASS! */</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="A-note-on-SASS-syntax"><a href="#A-note-on-SASS-syntax" class="headerlink" title="A note on SASS syntax"></a>A note on SASS syntax</h3><ul>
<li>lang=”scss” corresponds to the CSS-superset syntax (with curly braces and semicolons).</li>
<li>lang=”sass” corresponds to the indentation-based syntax.</li>
</ul>
<h2 id="PostCSS"><a href="#PostCSS" class="headerlink" title="PostCSS"></a>PostCSS</h2><p>Styles in <code>*.vue</code> files (and all other style files) are piped through PostCSS by default, so you don’t need to use a specific loader for it.</p>
<p>By default, PostCSS is configured to use Autoprefixer.</p>
<h2 id="A-note-on-Coffeescript"><a href="#A-note-on-Coffeescript" class="headerlink" title="A note on Coffeescript"></a>A note on Coffeescript</h2><p>If you are using Coffeescript then you need to disable ESLint. Open up <code>/build/webpack.base.conf.js</code> and remove the following section from <code>module/rules</code>:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&#123; <span class="comment">// eslint</span></div><div class="line">  enforce: <span class="string">'pre'</span>,</div><div class="line">  test: <span class="regexp">/\.(vue|js)$/</span>,</div><div class="line">  loader: <span class="string">'eslint-loader'</span>,</div><div class="line">  include: projectRoot,</div><div class="line">  exclude: <span class="regexp">/node_modules/</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Standalone-CSS-Files"><a href="#Standalone-CSS-Files" class="headerlink" title="Standalone CSS Files"></a>Standalone CSS Files</h2><p>To ensure consistent extraction and processing it is recommended that you import global, standalone style files from your root component, for example:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">src</span>=<span class="string">"./styles/global.less"</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Note you should probably only do this for the styles written by yourself for your application. For existing libraries e.g. Bootstrap or Semantic UI, you can place them inside <code>src/statics/</code> and reference them directly in index.html. This avoids extra build time and also is better for browser caching. (See <a href="/guide/app-handling-static-assets.html">Handling Static Assets</a>).</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[App Prerendering for SEO]]></title>
      <url>http://beta.quasar-framework.org/guide/app-prerendering-for-seo.html</url>
      <content type="html"><![CDATA[<p>If you want to prerender routes that will not significantly change once pushed to production, use this Webpack plugin: <a href="https://www.npmjs.com/package/prerender-spa-plugin" target="_blank" rel="external">prerender-spa-plugin</a>, which has been tested for use with Vue. For pages that <em>do</em> frequently change, <a href="https://prerender.io/" target="_blank" rel="external">Prerender.io</a> and <a href="https://www.netlify.com/pricing" target="_blank" rel="external">Netlify</a> both offer plans for regularly re-prerendering your content for search engines.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[App Structure]]></title>
      <url>http://beta.quasar-framework.org/guide/app-structure.html</url>
      <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">.</div><div class="line">├── build/                        <span class="comment"># webpack config files</span></div><div class="line">│   └── ...</div><div class="line">├── config/                       <span class="comment"># main project config</span></div><div class="line">│   ├── index.js</div><div class="line">│   └── ...</div><div class="line">├── cordova/                      <span class="comment"># where cordova boilerplate goes if you wrap app</span></div><div class="line">├── dist/                         <span class="comment"># where production build will go</span></div><div class="line">├── electron/                     <span class="comment"># where electron boilerplate goes if you wrap app</span></div><div class="line">├── src/</div><div class="line">│   ├── assets/                   <span class="comment"># dynamic assets (processed by webpack)</span></div><div class="line">│   ├── components/               <span class="comment"># .vue components</span></div><div class="line">│   ├── statics/                  <span class="comment"># pure static assets (directly copied)</span></div><div class="line">│   ├── themes/                   <span class="comment"># themes entry points for you to tweak</span></div><div class="line">│   │   ├── app.ios.styl</div><div class="line">│   │   ├── app.mat.styl</div><div class="line">│   │   └── app.variables.styl</div><div class="line">│   ├── App.vue                   <span class="comment"># root Vue component of your App</span></div><div class="line">│   ├── index.html                <span class="comment"># boilerplate for webpack to inject deps</span></div><div class="line">│   ├── main.js                   <span class="comment"># app entry file</span></div><div class="line">│   └── router.js                 <span class="comment"># app router logic</span></div><div class="line">├── templates/                    <span class="comment"># templates for quickly generating components</span></div><div class="line">│   ├── component.vue             <span class="comment"># generic .vue component file</span></div><div class="line">│   ├── layout.vue                <span class="comment"># generic .vue for a Layout</span></div><div class="line">│   └── view.vue                  <span class="comment"># generic .vue for a Page</span></div><div class="line">├── .babelrc                      <span class="comment"># babel config</span></div><div class="line">├── .editorconfig                 <span class="comment"># editor config</span></div><div class="line">├── .eslintignore                 <span class="comment"># ESlint ignore paths</span></div><div class="line">├── .eslintrc.js                  <span class="comment"># ESlint config</span></div><div class="line">├── .gitignore                    <span class="comment"># GIT ignore paths</span></div><div class="line">├── package.json                  <span class="comment"># npm scripts and dependencies</span></div><div class="line">├── README.md                     <span class="comment"># readme for your App</span></div><div class="line">└── .stylintrc                    <span class="comment"># Stylus lint config</span></div></pre></td></tr></table></figure>
<h3 id="build"><a href="#build" class="headerlink" title="build/"></a>build/</h3><p>This directory holds the actual configurations for both the development server and the production webpack build. Normally you don’t need to touch these files unless you want to customize Webpack loaders, in which case you should probably look at <code>build/webpack.base.conf.js</code>.</p>
<h3 id="config-index-js"><a href="#config-index-js" class="headerlink" title="config/index.js"></a>config/index.js</h3><p>This is the main configuration file that exposes some of the most common configuration options for the build setup.</p>
<h3 id="src"><a href="#src" class="headerlink" title="src/"></a>src/</h3><p>This is where most of your application code will live in. How to structure everything inside this directory is largely up to you; if you are using Vuex, you can consult the <a href="http://vuex.vuejs.org/en/structure.html" target="_blank" rel="external">recommendations for Vuex applications</a>.</p>
<h3 id="src-index-html"><a href="#src-index-html" class="headerlink" title="src/index.html"></a>src/index.html</h3><p>This is the <strong>template</strong> index.html for our single page application. During development and builds, Webpack will generate assets, and the URLs for those generated assets will automatically injected into this template to render the final HTML.</p>
<h3 id="src-statics"><a href="#src-statics" class="headerlink" title="src/statics/"></a>src/statics/</h3><p>This directory is an escape hatch for static assets that you do not want to process with Webpack. They will be directly copied into the same directory where webpack-built assets are generated.</p>
<p>See <a href="/guide/app-handling-static-assets.html">Handling Static Assets</a> for more details.</p>
<h3 id="templates"><a href="#templates" class="headerlink" title="templates/"></a>templates/</h3><p>Component templates that you can use along Quasar CLI to generate <code>*.vue</code> files for your App. See <a href="/guide/quasar-cli.html#Generating-Components">Generating Components</a>.</p>
<h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p>The NPM package meta file that contains all the build dependencies and scripts (including build scripts used by Quasar CLI).</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Troubleshoot]]></title>
      <url>http://beta.quasar-framework.org/guide/app-troubleshoot-and-tips.html</url>
      <content type="html"><![CDATA[<h3 id="Building-App-takes-too-long"><a href="#Building-App-takes-too-long" class="headerlink" title="Building App takes too long"></a>Building App takes too long</h3><p>At some point you might notice that the build takes an unusual long time to finish (if it even finishes). Due to how Webpack and its loaders work, this is a clear indication that <strong>your HTML Vue templates have a syntax error somewhere</strong>. Example: <code>&lt;span&lt;&gt;</code>, where an extra character breaks HTML: <code>&lt;</code>.</p>
<h3 id="Disabling-Linters"><a href="#Disabling-Linters" class="headerlink" title="Disabling Linters"></a>Disabling Linters</h3><p>It’s highly <strong>NOT recommended</strong>, but here is how to do it: edit <code>/build/webpack.base.conf.js</code> and removing the lines below from <code>module/rules</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">&#123; <span class="comment">// eslint</span></div><div class="line">  enforce: <span class="string">'pre'</span>,</div><div class="line">  test: <span class="regexp">/\.(vue|js)$/</span>,</div><div class="line">  loader: <span class="string">'eslint-loader'</span>,</div><div class="line">  include: projectRoot,</div><div class="line">  exclude: <span class="regexp">/node_modules/</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Remote-Debugging-Mobile-Apps"><a href="#Remote-Debugging-Mobile-Apps" class="headerlink" title="Remote Debugging Mobile Apps"></a>Remote Debugging Mobile Apps</h3><p>Check the guide <a href="/guide/cordova-wrapper.html#Remote-Debugging">here</a></p>
<h3 id="White-Screen-on-Electron"><a href="#White-Screen-on-Electron" class="headerlink" title="White Screen on Electron"></a>White Screen on Electron</h3><p>When using the development build it’s easy to see what it is broken as you can use Chrome Development Tools. But when building for production, you have to deal with this differently. Check the guide <a href="/guide/electron-wrapper.html#Debugging">here</a></p>
<h3 id="Win10-Unexpected-token-import"><a href="#Win10-Unexpected-token-import" class="headerlink" title="Win10: Unexpected token import"></a>Win10: Unexpected token import</h3><p>When on <strong>Windows 10 (the 64bits version)</strong> you may get this error. This is due to NPM. You can fix it by installing and running <code>npm-windows-upgrade</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">npm install -g npm-windows-upgrade</div><div class="line">npm-windows-upgrade</div></pre></td></tr></table></figure>
<h3 id="Disabling-iOS-rubber-band-effect"><a href="#Disabling-iOS-rubber-band-effect" class="headerlink" title="Disabling iOS rubber band effect"></a>Disabling iOS rubber band effect</h3><p>When building an iOS app with Cordova and you want to disable the <a href="https://www.youtube.com/watch?v=UjuNGpU29Mk" target="_blank" rel="external">rubber band effect</a>, add this to your <code>config.xml</code> from the <code>cordova</code> wrapper folder inside your project:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Preference</span> <span class="attr">name</span> = <span class="string">"DisallowOverscroll"</span> <span class="attr">value</span> = <span class="string">"true"</span> /&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Browser Support]]></title>
      <url>http://beta.quasar-framework.org/guide/browser-support.html</url>
      <content type="html"><![CDATA[<p>The Supported Browsers are:</p>
<ul>
<li>Chrome</li>
<li>Firefox</li>
<li>IE11+</li>
<li>Edge</li>
<li>Safari 9.1+</li>
<li>Opera</li>
<li>Android Browser 4.4+</li>
</ul>
<h1 id="IE11-Edge-Support"><a href="#IE11-Edge-Support" class="headerlink" title="IE11/Edge Support"></a>IE11/Edge Support</h1><p>Adding support for IE11/Edge requires you to check <code>src/main.js</code> in your project folder for the code below (should be near the beginning of file):<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// Uncomment the following lines if you need IE11/Edge support</span></div><div class="line"><span class="comment">// require(`quasar/dist/quasar.ie`)</span></div><div class="line"><span class="comment">// require(`quasar/dist/quasar.ie.$&#123;__THEME&#125;.css`)</span></div></pre></td></tr></table></figure></p>
<p>Due to the fact that it adds about ~10KB (mainly due to Promise polyfill) to the bundle size (we care about bundle size!) and there are cases where you don’t need it (like Cordova apps for iOS or Android), this is totally optional. Uncomment those two lines and that’s everything you need to do.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Sharing State Between Components]]></title>
      <url>http://beta.quasar-framework.org/guide/components-sharing-state.html</url>
      <content type="html"><![CDATA[<p>In large applications, state management often becomes complex due to multiple pieces of state scattered across many components and the interactions between them. It is often overlooked that the source of truth in Vue instances is the raw data object - a Vue instances simply proxies access to it. Therefore, if you have a piece of state that should be shared by multiple instances, you should avoid duplicating it and share it by identity:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> sourceOfTruth = &#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> vmA = <span class="keyword">new</span> Vue(&#123;</div><div class="line">  data: sourceOfTruth</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">var</span> vmB = <span class="keyword">new</span> Vue(&#123;</div><div class="line">  data: sourceOfTruth</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>Now whenever <code>sourceOfTruth</code> is mutated, both <code>vmA</code> and <code>vmB</code> will update their views automatically. Extending this idea further, we would arrive at the <strong>store pattern</strong>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> store = &#123;</div><div class="line">  state: &#123;</div><div class="line">    message: <span class="string">'Hello!'</span></div><div class="line">  &#125;,</div><div class="line">  actionA: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.state.message = <span class="string">'action A triggered'</span></div><div class="line">  &#125;,</div><div class="line">  actionB: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.state.message = <span class="string">'action B triggered'</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> vmA = <span class="keyword">new</span> Vue(&#123;</div><div class="line">  data: &#123;</div><div class="line">    privateState: &#123;&#125;,</div><div class="line">    sharedState: store.state</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">var</span> vmB = <span class="keyword">new</span> Vue(&#123;</div><div class="line">  data: &#123;</div><div class="line">    privateState: &#123;&#125;,</div><div class="line">    sharedState: store.state</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>Notice we are putting all actions that mutate the store’s state inside the store itself. This type of centralized state management makes it easier to understand what type of mutations could happen to the state, and how are they triggered. Each component can still own and manage its private state.</p>
<p><img src="/images/vue-state-management.png" alt="Vue State Management"></p>
<p>One thing to take note is that you should never replace the original state object in your actions - the components and the store need to share reference to the same object in order for the mutations to be observed.</p>
<p>If we enforce a convention where components are never allowed to directly mutate state that belongs to a store, but should instead dispatch events that notify the store to perform actions, we’ve essentially arrived at the <a href="https://facebook.github.io/flux/" target="_blank" rel="external">Flux</a> architecture. The benefits of this convention is we can record all state mutations happening to the store, and on top of that we can implement advanced debugging helpers such as mutation logs, snapshots, history re-rolls etc.</p>
<p>The Flux architecture is commonly used in React applications. Turns out the core idea behind Flux can be quite simply achieved in Vue.js, thanks to the unobtrusive reactivity system. Do note what we demonstrated here is just an example to introduce the concept - you may not need it at all for simple scenarios, and you should adapt the pattern to fit the real needs of your application.</p>
<h2 id="Best-Solution-Vuex"><a href="#Best-Solution-Vuex" class="headerlink" title="Best Solution: Vuex"></a>Best Solution: Vuex</h2><p>Vuex (see documentation <a href="http://vuex.vuejs.org/" target="_blank" rel="external">here</a> and Github page <a href="https://github.com/vuejs/vuex" target="_blank" rel="external">here</a>) is an application architecture for centralized state management in Vue.js applications. It is inspired by Flux and Redux, but with simplified concepts and an implementation that is designed specifically to take advantage of Vue.js’ reactivity system.</p>
<blockquote>
<p>Vuex is not supplied by default with Quasar Framework. NPM install it and import it from <code>src/main.js</code> in order to use it.</p>
</blockquote>
<h3 id="Why-using-Vuex"><a href="#Why-using-Vuex" class="headerlink" title="Why using Vuex"></a>Why using Vuex</h3><p>If your app is simple enough, you probably don’t need Vuex. Don’t apply it prematurely. But if you are building a medium-to-large-scale SPA, chances are you have run into situations that make you think about how to better structure things outside of your Vue components. This is where Vuex comes into play.</p>
<p>When using Vue.js alone, we often tend to store the state “inside” our components. That is, each component owns a piece of our application state, and as a result the state is scattered all over the place. However, sometimes a piece of state needs to be shared by multiple components. A commonly-seen practice is letting one component “send” some state to other components using the custom event system. The problem with this pattern is that the event flow inside large component trees can quickly become complex, and it’s often difficult to reason about when something goes wrong.</p>
<p>To better deal with shared state in large applications, we need to differentiate between component local state and application level state. Application state does not belong to a specific component, but our components can still observe it for reactive DOM updates. By centralizing its management in a single place, we no longer need to pass events around, because everything that affects more than one component should belong there. In addition, this allows us to record and inspect every mutation for easier understanding of state changes, and even implement fancy stuff like time-travel debugging.</p>
<p><img src="/images/vuex.png" alt="Vuex"></p>
<p>Vuex also enforces some opinions on how to split state management logic into different places, but still allows enough flexibility for the actual code structure.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Framework Contributing Guide]]></title>
      <url>http://beta.quasar-framework.org/guide/contributing.html</url>
      <content type="html"><![CDATA[<p>The Quasar team is really excited, when anyone helps by contributing to Quasar Framework. It’s what OSS community is all about! </p>
<p>There are <a href="https://github.com/quasarframework/quasar/issues?q=is%3Aissue+is%3Aopen+label%3Aproposal" target="_blank" rel="external">lots of features waiting</a> for someone to write them and make the Quasar experience even better. Check <a href="https://github.com/quasarframework/quasar" target="_blank" rel="external">Github</a> or contact <a href="https://github.com/rstoenescu" target="_blank" rel="external">Razvan Stoenescu</a> through Gitter/email.</p>
<blockquote>
<p>Before submitting your contribution though, please make sure to take a moment and read through <a href="https://github.com/quasarframework/quasar/blob/dev/.github/CONTRIBUTING.md" target="_blank" rel="external">the contributing guidelines</a> and also <a href="https://github.com/quasarframework/quasar/blob/dev/.github/CODE_OF_CONDUCT.md" target="_blank" rel="external">the code of conduct</a>.</p>
</blockquote>
<p>You can also help with the documentation. If you catch a mistake or want to add a few lines to a page or write new pages, use the link at the end of each page of this website (specifically the <em>Suggest an edit on Github</em> link).</p>
<blockquote>
<p><i class="fa fa-usd" style="font-size: 2rem; float: left; margin-right: 10px;"></i> Finally, if you want, you can leave a buck for coffee from time to time. Quasar needs some financial backing to evolve more rapidly. <a href="/support-quasar-framework.html">Read more here</a>.</p>
</blockquote>
<h2 id="Github-Repositories"><a href="#Github-Repositories" class="headerlink" title="Github Repositories"></a>Github Repositories</h2><ul>
<li><a href="https://github.com/quasarframework/quasar" target="_blank" rel="external">Quasar Framework</a></li>
<li><a href="https://github.com/quasarframework/quasar-cli" target="_blank" rel="external">Quasar CLI</a></li>
<li><a href="https://github.com/quasarframework/app-template-default" target="_blank" rel="external">Quasar Starter Kit (project folder template)</a></li>
<li><a href="https://github.com/quasarframework/electron-wrapper" target="_blank" rel="external">Electron Wrapper</a></li>
<li><a href="https://github.com/quasarframework/quasar-play" target="_blank" rel="external">Quasar Play</a></li>
<li><a href="https://github.com/quasarframework/quasar-framework.org" target="_blank" rel="external">Documentation Website</a></li>
</ul>
<p><strong>Please use the appropriate Github repo to report issues. See “Github Repositories” above.</strong> For example, a bug related to CLI should be reported to the CLI repo, one related to build issues to Quasar Starter Kit repo and so on.</p>
<h2 id="Code-Style"><a href="#Code-Style" class="headerlink" title="Code Style"></a>Code Style</h2><ul>
<li>Follow <a href="https://google.github.io/styleguide/javascriptguide.xml" target="_blank" rel="external">Google JavaScript Style Guide</a></li>
<li>2 spaces indentation (<em>NO</em> tabs).</li>
<li>Stroustrup brace style.</li>
<li><p>Multiple var declarations like this:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">let</span></div><div class="line">  first,</div><div class="line">  second,</div><div class="line">  ...,</div><div class="line">  last</div></pre></td></tr></table></figure>
</li>
<li><p>Omit ending semi-colons when not necessary.</p>
</li>
<li>Return early.</li>
<li><p>Notice the spaces when declaring a <code>function</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fnName</span>(<span class="params">param1, param2, ..., paramN</span>) </span>&#123;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>1 space between arguments, but not between parentheses.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span> (conditions) &#123;</div><div class="line">  ...</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (a === <span class="number">2</span> &amp;&amp; b === <span class="number">3</span>) &#123;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>When in doubt, read the source code.</p>
</li>
</ul>
<h2 id="Commit-Message-Format"><a href="#Commit-Message-Format" class="headerlink" title="Commit Message Format"></a>Commit Message Format</h2><p>Each commit message consists of a <strong>header</strong>, a <strong>body</strong> and a <strong>footer</strong>.  The header has a special format that includes a <strong>type</strong>, a <strong>scope</strong> and a <strong>subject</strong>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</div><div class="line">&lt;BLANK LINE&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;BLANK LINE&gt;</div><div class="line">&lt;footer&gt;</div></pre></td></tr></table></figure>
<p>The <strong>header</strong> is mandatory and the <strong>scope</strong> of the header is optional.</p>
<p>Any line of the commit message cannot be longer 100 characters! This allows the message to be easier to read on GitHub as well as in various git tools.</p>
<h4 id="Revert"><a href="#Revert" class="headerlink" title="Revert"></a>Revert</h4><p>If the commit reverts a previous commit, it should begin with <code>revert:</code>, followed by the header of the reverted commit. In the body it should say: <code>This reverts commit &lt;hash&gt;.</code>, where the hash is the SHA of the commit being reverted.</p>
<h4 id="Type"><a href="#Type" class="headerlink" title="Type"></a>Type</h4><p>Must be one of the following:</p>
<ul>
<li><strong>feat</strong>: A new feature</li>
<li><strong>fix</strong>: A bug fix</li>
<li><strong>docs</strong>: Documentation only changes</li>
<li><strong>style</strong>: Changes that do not affect the meaning of the code (white-space, formatting, missing<br>semi-colons, etc)</li>
<li><strong>refactor</strong>: A code change that neither fixes a bug nor adds a feature</li>
<li><strong>perf</strong>: A code change that improves performance</li>
<li><strong>test</strong>: Adding missing tests</li>
<li><strong>chore</strong>: Changes to the build process or auxiliary tools and libraries such as documentation<br>generation</li>
</ul>
<h4 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a>Scope</h4><p>The scope could be anything specifying place of the commit change. For example use modules as scope name: <code>xhr</code>, <code>router</code>, <code>view</code> etc…</p>
<h4 id="Subject"><a href="#Subject" class="headerlink" title="Subject"></a>Subject</h4><p>The subject contains succinct description of the change:</p>
<ul>
<li>use the imperative, present tense: “change” not “changed” nor “changes”</li>
<li>don’t capitalize first letter</li>
<li>no dot (.) at the end</li>
</ul>
<h4 id="Body"><a href="#Body" class="headerlink" title="Body"></a>Body</h4><p>Just as in the <strong>subject</strong>, use the imperative, present tense: “change” not “changed” nor “changes”.<br>The body should include the motivation for the change and contrast this with previous behavior.</p>
<h4 id="Footer"><a href="#Footer" class="headerlink" title="Footer"></a>Footer</h4><p>The footer should contain any information about <strong>Breaking Changes</strong> and is also the place to<br>reference GitHub issues that this commit <strong>Closes</strong>.</p>
<p><strong>Breaking Changes</strong> should start with the word <code>BREAKING CHANGE:</code> with a space or two newlines. The rest of the commit message is then used for this.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Cordova App Wrapper]]></title>
      <url>http://beta.quasar-framework.org/guide/cordova-wrapper.html</url>
      <content type="html"><![CDATA[<p>Cordova allows you to wrap your Quasar App into a native mobile App. In the following examples we’ll be using Quasar CLI to manage this. After the initial setup you will need to wrap each project individually and add the desired platforms (Android and/or iOS).</p>
<h2 id="Initial-setup-steps"><a href="#Initial-setup-steps" class="headerlink" title="Initial setup steps"></a>Initial setup steps</h2><p>There are some initial steps you need to take before you can wrap your apps using Cordova:</p>
<ol>
<li><p>First install Cordova globally on your machine:</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ npm install -g cordova</div></pre></td></tr></table></figure>
</li>
<li><p>After this step you will need to install the Android platform SDK on your machine. You can <a href="https://developer.android.com/studio/index.html" target="_blank" rel="external">download the Android Studio here</a> and follow these <a href="https://developer.android.com/studio/install.html" target="_blank" rel="external">installation steps</a> afterwards.</p>
</li>
<li><p>Update your ~/.bashrc file to contain the correct paths to your installation of Android Studio:</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="built_in">export</span> ANDROID_HOME=<span class="string">"<span class="variable">$HOME</span>/Android/Sdk"</span></div><div class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$ANDROID_HOME</span>/tools; PATH=<span class="variable">$PATH</span>:<span class="variable">$ANDROID_HOME</span>/platform-tools</div></pre></td></tr></table></figure>
</li>
<li><p>Start Android studio by changing into the folder you installed it in and run <code>./studio.sh</code>. Next step is to install the individual SDKs:</p>
<p> Open the “Configure” menu at the bottom of the window:</p>
<p> <img src="/images/Android-Studio-SDK-Menu.png" alt="SDK manager" title="SDK manager"></p>
<p> Select the desired SDKs. As per May 2017 Cordova supports 4.4 and up and click on “Apply” to install the SDKs.</p>
<p> <img src="/images/Android-Studio-SDK-selection.png" alt="SDK selection" title="SDK selection"></p>
</li>
</ol>
<h2 id="Wrapping-and-configuration-of-your-App"><a href="#Wrapping-and-configuration-of-your-App" class="headerlink" title="Wrapping and configuration of your App"></a>Wrapping and configuration of your App</h2><p>To transform a Quasar project into a working Cordova app, you need to wrap it initially. The following steps explain how to wrap your app and add the desired platforms.</p>
<h3 id="Wrapping"><a href="#Wrapping" class="headerlink" title="Wrapping"></a>Wrapping</h3><p>Run the following command to wrap your app in your project folder:<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ quasar wrap cordova</div></pre></td></tr></table></figure></p>
<p>This command generates a subfolder inside your App named <code>/cordova</code>. It contains the assets of a Cordova project mapped to your Quasar App’s production ready code (<code>/dist</code>).</p>
<p>It will ask you if you want to install the Crosswalk plugin which applies to Android apps only. Crosswalk ensures that your App will have the same browser runtime (which is also the latest and greatest) on all Android platforms. The downside is that it will also make your native App package file bigger. Read more <a href="https://crosswalk-project.org/documentation/about.html" target="_blank" rel="external">here</a> about Crosswalk.</p>
<blockquote>
<p><strong>It is highly recommended that you opt for the Crosswalk plugin to be installed.</strong> Otherwise your App might experience unexpected behavior on older platforms.</p>
</blockquote>
<p>If however you don’t wrap your App with Crosswalk from the CLI you can add it later with:<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> cordova</div><div class="line">$ cordova plugin add cordova-plugin-crosswalk-webview</div></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>NOTE for Windows Developers</strong><br>It is possible that you get <code>Error: EPERM: operation not permitted, symlink &#39;..\dist&#39;</code>, in which case you need to add privileges for your user to be able to create symlinks. Read <a href="http://superuser.com/questions/104845/permission-to-make-symbolic-links-in-windows-7" target="_blank" rel="external">here</a>.</p>
<p>Another work-around and a quick solution is creating the symlink manually (after running <code>quasar wrap cordova</code>). To do so, start a command line as Administrator, change directory (<code>cd</code>) to the newly created <code>cordova</code> directory, run <code>mklink www ..\dist\</code>.</p>
</blockquote>
<h3 id="Adding-platforms"><a href="#Adding-platforms" class="headerlink" title="Adding platforms"></a>Adding platforms</h3><blockquote>
<p><strong>IMPORTANT</strong><br>Change into the <code>/cordova</code> subfolder in your Quasar project before you run any <code>cordova</code> commands.</p>
</blockquote>
<p>After making the wrapper and making sure you have the platform’s SDK installed on your machine, you need to add at least a platform to your App, like this:<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> cordova</div><div class="line">$ cordova platform add android</div><div class="line"></div><div class="line"><span class="comment"># need to be on running a Mac OS for iOS:</span></div><div class="line">$ cordova platform add ios</div></pre></td></tr></table></figure></p>
<p>To verify if you fulfill all requirements run the follow command:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ cordova requirements</div></pre></td></tr></table></figure>
<blockquote>
<p>On some newer Debian-based operating systems you might face a very persistent problem when running <code>cordova requiremets</code>. Please see the <a href="#“Android-SDK-not-found-”-after-installation-of-the-SDK">“Android SDK not found” after installation</a> section for assistance.</p>
</blockquote>
<h3 id="Running-iOS-simulator"><a href="#Running-iOS-simulator" class="headerlink" title="Running iOS simulator"></a>Running iOS simulator</h3><p>To run your wrapped app on an ios simulator, you need to be on running a Mac OS for iOS and excecute the following command:<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ cordova run ios</div></pre></td></tr></table></figure></p>
<p>In case you run into the bug described here:</p>
<blockquote>
<p>Cannot read property ‘replace’ of undefined</p>
</blockquote>
<p>Please follow the steps here: <a href="https://github.com/phonegap/ios-sim/issues/210" target="_blank" rel="external">phonegap/ios-sim#210</a>.</p>
<p>For other cordova related bugs please try to look into the <a href="https://cordova.apache.org/" target="_blank" rel="external">official Cordova documentation</a> first.</p>
<h2 id="Cordova-Plugins"><a href="#Cordova-Plugins" class="headerlink" title="Cordova Plugins"></a>Cordova Plugins</h2><p>There are lots of Cordova plugins available which enables to you access the Camera, NFC, Battery Status, Contacts, Geolocation, Device motion and orientation and many more.</p>
<p>Check out Cordova’s website. Example for Battery Status: <a href="https://cordova.apache.org/docs/en/latest/reference/cordova-plugin-battery-status/index.html" target="_blank" rel="external">here</a>.</p>
<h2 id="Tips-and-Troubleshooting"><a href="#Tips-and-Troubleshooting" class="headerlink" title="Tips and Troubleshooting"></a>Tips and Troubleshooting</h2><h3 id="Browser-Simulator"><a href="#Browser-Simulator" class="headerlink" title="Browser Simulator"></a>Browser Simulator</h3><p>Use Google Chrome’s emulator from Developer Tools. It’s a fantastic tool. You can select which device to emulate, but keep in mind that it’s an <em>emulator</em> and not the real deal.</p>
<p><img src="/images/browser-simulator.png" alt="Google Chrome emulator" title="Google Chrome emulator"></p>
<h3 id="Disabling-iOS-rubber-band-effect"><a href="#Disabling-iOS-rubber-band-effect" class="headerlink" title="Disabling iOS rubber band effect"></a>Disabling iOS rubber band effect</h3><p>When building an iOS app with Cordova and you want to disable the rubber band effect (<a href="https://www.youtube.com/watch?v=UjuNGpU29Mk" target="_blank" rel="external">https://www.youtube.com/watch?v=UjuNGpU29Mk</a>), add this to your <code>config.xml</code> from the <code>cordova</code> wrapper folder inside your project:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Preference</span> <span class="attr">name</span> = <span class="string">"DisallowOverscroll"</span> <span class="attr">value</span> = <span class="string">"true"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Remote-Debugging"><a href="#Remote-Debugging" class="headerlink" title="Remote Debugging"></a>Remote Debugging</h3><p>If you are debugging Android Apps, you can use Google Chrome <a href="https://developers.google.com/web/tools/chrome-devtools/debug/remote-debugging/remote-debugging?hl=en" target="_blank" rel="external">Remote Debugging</a> through a USB cable attached to your Android phone. Combine this with <a href="/guide/quasar-play-app.html">Quasar Play</a> App and you get an excellent debugging environment.</p>
<blockquote>
<p>This way you have Chrome Dev Tools directly for your App running on the phone. Inspect elements, check console output, and so on and so forth.</p>
</blockquote>
<p><img src="/images/remote-debug.png" alt="Android Remote Debugging" title="Android Remote Debugging"><br><img src="/images/remote-debug-2.png" alt="Android Remote Debugging" title="Android Remote Debugging"></p>
<h3 id="“Android-SDK-not-found-”-after-installation-of-the-SDK"><a href="#“Android-SDK-not-found-”-after-installation-of-the-SDK" class="headerlink" title="“Android SDK not found.” after installation of the SDK"></a>“Android SDK not found.” after installation of the SDK</h3><p>Some newer Debian-based OS (e.g. ubuntu, elementary OS) might leave you with a <code>Android SDK not found.</code> after you installed and (correctly) configured the environment. The output might look similar to this:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ cordova requirements</div><div class="line"></div><div class="line">Requirements check results <span class="keyword">for</span> android:</div><div class="line">Java JDK: installed 1.8.0</div><div class="line">Android SDK: installed <span class="literal">true</span></div><div class="line">Android target: not installed</div><div class="line">Android SDK not found. Make sure that it is installed. If it is not at the default location, <span class="built_in">set</span> the ANDROID_HOME environment variable.</div><div class="line">Gradle: not installed</div><div class="line">Could not find gradle wrapper within Android SDK. Might need to update your Android SDK.</div><div class="line">Looked here: /home/your_user/Android/Sdk/tools/templates/gradle/wrapper</div><div class="line">Error: Some of requirements check failed</div></pre></td></tr></table></figure>
<p>This could have two different reasons: Usually the paths aren’t configured correctly. The first step is to verify if your paths are set correctly. This can be done by running the following commands:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ <span class="built_in">echo</span> <span class="variable">$ANDROID_HOME</span></div></pre></td></tr></table></figure>
<p>The expected output should be a path similar to this <code>$HOME/Android/Sdk</code>. After this run:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ ls -la <span class="variable">$ANDROID_HOME</span></div></pre></td></tr></table></figure>
<p>To ensure the folder contains the SDK. The expected output should contain folders like ‘tools’, ‘sources’, ‘platform-tools’, etc.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ <span class="built_in">echo</span> <span class="variable">$PATH</span></div></pre></td></tr></table></figure>
<p>The output should contain each one entry for the Android SDK ‘tools’-folder and ‘platform-tools’-tools. This could look like this:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">/home/your_user/bin:/home/your_user/.local/bin:/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/<span class="built_in">local</span>/games:/home/your_user/Android/Sdk/tools:/home/your_user/Android/Sdk/platform-tools</div></pre></td></tr></table></figure>
<blockquote>
<p>If you ensured your paths are set correctly and still get the error on <code>cordova requirements</code> you can try the following fix: <a href="https://github.com/meteor/meteor/issues/8464#issuecomment-288112504" target="_blank" rel="external">Replacing the Android Studio ‘tools’ folder manually</a></p>
</blockquote>
<h3 id="Setting-Up-Device-on-Linux"><a href="#Setting-Up-Device-on-Linux" class="headerlink" title="Setting Up Device on Linux"></a>Setting Up Device on Linux</h3><p>You may bump into <code>?????? no permissions</code> problem when trying to run your App directly on an Android phone/tablet.</p>
<p>Here’s how you fix this:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># create the .rules file and insert the content</span></div><div class="line"><span class="comment"># from below this example</span></div><div class="line">sudo vim /etc/udev/rules.d/51-android.rules</div><div class="line">sudo chmod 644   /etc/udev/rules.d/51-android.rules</div><div class="line">sudo chown root. /etc/udev/rules.d/51-android.rules</div><div class="line">sudo service udev restart</div><div class="line">sudo killall adb</div></pre></td></tr></table></figure>
<p>The content for <code>51-android.rules</code>:<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0bb4&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0e79&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0502&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0b05&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;413c&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0489&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;091e&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;18d1&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0bb4&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;12d1&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;24e3&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;2116&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0482&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;17ef&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;1004&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;22b8&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0409&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;2080&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0955&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;2257&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;10a9&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;1d4d&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0471&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;04da&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;05c6&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;1f53&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;04e8&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;04dd&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0fce&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;0930&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;19d2&quot;, MODE=&quot;0666&quot;</div><div class="line">SUBSYSTEM==&quot;usb&quot;, ATTRS&#123;idVendor&#125;==&quot;1bbb&quot;, MODE=&quot;0666&quot;</div></pre></td></tr></table></figure></p>
<p>Now running <code>adb devices</code> should discover your device.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Electron App Wrapper]]></title>
      <url>http://beta.quasar-framework.org/guide/electron-wrapper.html</url>
      <content type="html"><![CDATA[<p>You can build Electron apps by wrapping your Quasar project with its Electron wrapper. We’ll be using Quasar CLI to manage this.</p>
<h2 id="Wrap-your-App"><a href="#Wrap-your-App" class="headerlink" title="Wrap your App"></a>Wrap your App</h2><p>Now let’s create the Wrapper for your App.<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ quasar wrap electron</div></pre></td></tr></table></figure></p>
<p>This command generates a subfolder inside your App named <code>/electron</code>. It contains the assets of an Electron project <strong>mapped to your Quasar App</strong>.</p>
<p>Next, change current directory to the newly created <code>/electron</code> folder and npm install its dependencies:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> electron</div><div class="line">$ npm install</div></pre></td></tr></table></figure>
<h2 id="Development-with-Electron"><a href="#Development-with-Electron" class="headerlink" title="Development with Electron"></a>Development with Electron</h2><p>You can benefit from Hot Reload while developing an Electron app. The wrapper will open an Electron app which will point to your App. As a bonus, besides Hot Reload, the Chrome Dev Tools will also be available so you can easily inspect code.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># Make sure you keep running (from root project folder):</span></div><div class="line">$ quasar dev</div><div class="line"><span class="comment"># then from Electron wrapper folder</span></div><div class="line">$ quasar dev</div></pre></td></tr></table></figure>
<h2 id="Building-Electron-App"><a href="#Building-Electron-App" class="headerlink" title="Building Electron App"></a>Building Electron App</h2><p>Make sure you build Quasar app from root project folder before packaging it with Electron and then follow these steps:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># from Electron wrapper folder:</span></div><div class="line">$ quasar build</div></pre></td></tr></table></figure>
<p>If you want to only build for a specific platform, like Linux, simply add another parameter to <code>quasar build</code>:<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ quasar build linux <span class="comment"># for Linux</span></div><div class="line"><span class="comment"># or</span></div><div class="line">$ quasar build darwin <span class="comment"># for MacOS</span></div><div class="line"><span class="comment"># or</span></div><div class="line">$ quasar build win32 <span class="comment"># for Windows</span></div><div class="line"><span class="comment"># or</span></div><div class="line">$ quasar build mas</div></pre></td></tr></table></figure></p>
<h2 id="Electron-App-Structure"><a href="#Electron-App-Structure" class="headerlink" title="Electron App Structure"></a>Electron App Structure</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">.</div><div class="line">├── build                <span class="comment"># build files</span></div><div class="line">│   ├── script.build.js  <span class="comment"># production build for Electron</span></div><div class="line">│   └── script.clean.js  <span class="comment"># cleaning build artifacts</span></div><div class="line">├── config               <span class="comment"># build config folder</span></div><div class="line">│   └── index.js         <span class="comment"># configure your build</span></div><div class="line">├── dist                 <span class="comment"># where production build will go</span></div><div class="line">│   └── ...</div><div class="line">├── electron.js          <span class="comment"># main Electron runner</span></div><div class="line">├── icons                <span class="comment"># icons for your Electron App</span></div><div class="line">│   ├── icon.icns</div><div class="line">│   └── icon.ico</div><div class="line">└── package.json         <span class="comment"># npm scripts and dependencies for Electron</span></div></pre></td></tr></table></figure>
<h2 id="Debugging"><a href="#Debugging" class="headerlink" title="Debugging"></a>Debugging</h2><p>While developing you got Chrome Dev Tools available. But what happens when the production build has something failing? It may happen, for example, that if you made a mistake in the code in some scenarios you’ll only see a blank window showing up. So how can you debug this? Simple:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ electron --debug=[port] path/to/production/executable</div><div class="line"></div><div class="line"><span class="comment"># Example:</span></div><div class="line">$ electron --debug=<span class="string">"4444"</span> electron/dist/QuasarElectronApp-linux-x64/QuasarElectronApp</div></pre></td></tr></table></figure>
<p>Your Electron App will be opened and you can check console output for errors.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Getting Started]]></title>
      <url>http://beta.quasar-framework.org/guide/index.html</url>
      <content type="html"><![CDATA[<p>There are 2 sections on this documentation website that will get you familiarized with Quasar:</p>
<ul>
<li><strong>Guide</strong> - Information about CLI, starter kits, how to get you started working on a project folder</li>
<li><a href="/components"><strong>Components</strong></a> - Quasar components</li>
</ul>
<p>It will help you a lot if you are familiar with these awesome tools/technologies:</p>
<ul>
<li><a href="http://www.2ality.com/2015/08/getting-started-es6.html" target="_blank" rel="external">ES6 Javascript</a></li>
<li><a href="http://vuejs.org" target="_blank" rel="external">Vue JS</a> and <a href="http://npmjs.org" target="_blank" rel="external">NPM</a> ecosystems</li>
<li><a href="http://router.vuejs.org/" target="_blank" rel="external">Vue Router</a></li>
<li>Writing <a href="http://vue-loader.vuejs.org/en/index.html" target="_blank" rel="external">.vue files</a></li>
<li>[Optional] <a href="http://vuex.vuejs.org/" target="_blank" rel="external">Vuex</a> if building large scale Apps.</li>
<li>[Optional] <a href="http://webpack.github.io/" target="_blank" rel="external">Webpack</a> for tweaking the build system to your specific needs</li>
<li>[Optional] <a href="https://cordova.apache.org/" target="_blank" rel="external">Cordova</a> for building native mobile phone Apps out of your Quasar App</li>
</ul>
<h1 id="First-steps"><a href="#First-steps" class="headerlink" title="First steps"></a>First steps</h1><p>Before you begin your awesome journey with Quasar, if you aren’t yet a very experienced JavaScript and Vue developer, we recommend you <a href="/components/introduction-for-beginners.html">read through this article first</a>. In that article we clarify simple prerequisites and basic knowledge needed to work with Quasar, which expands on the list above.</p>
<p>After reading that article, or if you have JavaScript and Vue experience, you can start with the Quasar CLI. The CLI allows you to create new projects in no time, by generating a base application, filled with everything you need to begin working on your application. It does most of the heavy-lifting, so you need not concern yourself with the redundant tasks of building a base application. You should install the CLI globally, in order to generate and manage Quasar apps.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ npm install -g quasar-cli</div></pre></td></tr></table></figure>
<h2 id="Create-your-first-App"><a href="#Create-your-first-App" class="headerlink" title="Create your first App"></a>Create your first App</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># create starter boilerplate folder</span></div><div class="line">$ quasar init default<span class="comment">#beta &lt;folder name&gt;</span></div><div class="line">$ <span class="built_in">cd</span> &lt;folder name&gt;</div><div class="line"></div><div class="line"><span class="comment"># npm install deps</span></div><div class="line">$ npm install</div></pre></td></tr></table></figure>
<h2 id="The-Dev-Server"><a href="#The-Dev-Server" class="headerlink" title="The Dev Server"></a>The Dev Server</h2><p>Quasar also comes with a development server, which is equipped with <a href="https://www.youtube.com/watch?v=zSnL5W1RVkA" target="_blank" rel="external">hot reload</a>. It makes your development process significantly easier. To get the server started:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ quasar dev [theme]</div><div class="line"></div><div class="line"><span class="comment"># start with 'mat' theme</span></div><div class="line">$ quasar dev</div><div class="line"><span class="comment"># or</span></div><div class="line">$ quasar dev mat</div><div class="line"></div><div class="line"><span class="comment"># start with 'ios' theme</span></div><div class="line">$ quasar dev ios</div></pre></td></tr></table></figure>
<h2 id="Vue-Component-Boilerplate"><a href="#Vue-Component-Boilerplate" class="headerlink" title="Vue Component Boilerplate"></a>Vue Component Boilerplate</h2><p>Although it isn’t all that inconvenient, there is still some boilerplate involved with creating Vue’s single file components, which Quasar makes great use of. So, to help you with the boilerplate code creation, Quasar offers a component creation process in the CLI. To create <code>*.vue</code> components from ready to use component templates folder (<code>/templates</code>):</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ quasar new [<span class="built_in">type</span>] &lt;name of your component with optional subfolder&gt;</div></pre></td></tr></table></figure>
<p>The type can be <code>layout</code>, <code>page</code>, <code>component</code> (generic <code>*.vue</code> component).<br>You can even make your own component templates and use the CLI to generate them in your App.</p>
<h2 id="Quasar-Play-App"><a href="#Quasar-Play-App" class="headerlink" title="Quasar Play App"></a>Quasar Play App</h2><p>If you want to <strong>develop mobile Apps with hot reload directly on your mobile phone</strong>, install the <a href="/guide/quasar-play-app.html">Quasar Play</a> app, currently only on Google Play Store.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ quasar dev --play</div></pre></td></tr></table></figure>
<p>This generates a QR code that you can scan with the Quasar Play app and you’ll have your App on the phone as long as the development server is running.</p>
<blockquote>
<p>That’s it. You’re all set now. Continue to read the guide about Quasar and don’t forget to have fun! :)</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar CLI]]></title>
      <url>http://beta.quasar-framework.org/guide/quasar-cli.html</url>
      <content type="html"><![CDATA[<p>The Quasar CLI allows you to create new projects in no time, by generating a base application, filled with everything you need to begin working on your application. It does most of the heavy-lifting, so you need not concern yourself with the redundant tasks of building a base application. </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ npm install -g quasar-cli</div></pre></td></tr></table></figure>
<p>Familiarize yourself with the list of commands:<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ quasar</div></pre></td></tr></table></figure></p>
<p>See help for any command:<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ quasar [<span class="built_in">command</span> name] --help</div></pre></td></tr></table></figure></p>
<h2 id="Version"><a href="#Version" class="headerlink" title="Version"></a>Version</h2><p>Check the CLI version and, if on a Quasar app folder, also output Quasar version being used.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ quasar version</div></pre></td></tr></table></figure>
<h2 id="Create-App"><a href="#Create-App" class="headerlink" title="Create App"></a>Create App</h2><p>Initializes an App folder with a starter boilerplate.<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ quasar init [template name] &lt;folder-name&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>By omitting the <code>template name</code> parameter the CLI will detect latest App template and generate the App folder with it.</p>
</blockquote>
<p>You can check available App templates, by listing them at any time with:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ quasar list</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>Tip</strong> - You can also install your own base template from Github with the <code>@</code> indicator.<br><br><br><code>quasar init @myrepo/my-quasar-template my-new-app</code><br><br><br>If you want to refer to a specific branch, use a hash <code>#</code> and then the branch name.<br><br><br><code>quasar init @myrepo/my-quasar-template#my-branch my-new-app</code></p>
</blockquote>
<h2 id="Development-Server"><a href="#Development-Server" class="headerlink" title="Development Server"></a>Development Server</h2><p>The Quasar development server allows you to develop your App by compiling and maintaining code in-memory. A web server will serve your App while offering hot-reload out of the box. Running in-memory offers faster rebuilds when you change your code.</p>
<blockquote>
<p>Hot Reload is much more than just refreshing your browser when code changes. It skips the refresh and updates your code on the fly, while maintaining your App’s state (like your VueModel’s data). Please note that there are cases when this is impossible, so the dev webserver will simply refresh your browser.</p>
</blockquote>
<p>Furthermore, you can develop your App directly on a phone and still benefit from Hot-Reload. Download and install the Quasar Play App (currently only on Google Play Store) to achieve this functionality.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># run development server (with default theme)</span></div><div class="line">$ quasar dev</div><div class="line"></div><div class="line"><span class="comment"># run development server with specific theme</span></div><div class="line">$ quasar dev mat</div><div class="line">$ quasar dev ios</div><div class="line"></div><div class="line"><span class="comment"># dev server with QR code</span></div><div class="line"><span class="comment"># scan QR code with Quasar Play app</span></div><div class="line">$ quasar dev -p</div><div class="line">$ quasar dev --play</div><div class="line">$ quasar dev mat --play</div></pre></td></tr></table></figure>
<p>If you wish to change the port serving your App you have 2 options:</p>
<ul>
<li>Open up <code>/config/index.js</code> file and change <code>dev.port</code> property.</li>
<li>If this is a one time thing, specify the port as an environment variable:<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ PORT=3000 quasar dev</div></pre></td></tr></table></figure>
</li>
</ul>
<p>If there appears to be an issue with hot reload, you can try two fixes:</p>
<ul>
<li><p>Change the permissions for the project folder with</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">sudo chown -R username: .</div></pre></td></tr></table></figure>
</li>
<li><p>or run the dev server with root privileges</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">sudo quasar dev</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Build-App-for-Production"><a href="#Build-App-for-Production" class="headerlink" title="Build App for Production"></a>Build App for Production</h2><p>The Quasar CLI can pack everything together and optimize your App for production. It minifies source code, extracts vendor components and leverages browser cache, and much more.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># build for production</span></div><div class="line">$ quasar build</div><div class="line"></div><div class="line"><span class="comment"># build for production with specific theme</span></div><div class="line">$ quasar build mat</div><div class="line">$ quasar build ios</div></pre></td></tr></table></figure>
<p>You can also clean up the build assets with:<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ quasar clean</div></pre></td></tr></table></figure></p>
<h2 id="Generating-Components"><a href="#Generating-Components" class="headerlink" title="Generating Components"></a>Generating Components</h2><p>After creating an App folder with the CLI, you’ll have a folder named <code>/templates</code> inside your App, which contains templates for: <code>layout</code>, <code>page</code>, or a generic Vue <code>component</code>.</p>
<p>You can generate components for your App in your <code>/src</code> folder:<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># get available Component templates</div><div class="line">$ quasar new -l</div><div class="line">$ quasar new --list</div><div class="line"></div><div class="line"># generate .vue file from a Component template</div><div class="line">$ quasar new component Hello</div><div class="line"></div><div class="line"># generate .vue file from a template to a subfolder</div><div class="line">$ quasar new layout layout/about/help/Hello</div><div class="line"># the above creates src/components/layout/about/help/Hello.vue</div></pre></td></tr></table></figure></p>
<blockquote>
<p>Add your own component templates. Quasar will be able to handle them.</p>
<p>The command <code>quasar new templateName vueFileName</code> simply copy the file from <code>/templates</code> to <code>/src/components</code> with given names.<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"># will copy file from `/template/myView.vue` to `/src/components/MyNewView.vue`</div><div class="line">$ quasar new myView MyNewView</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="App-Wrappers"><a href="#App-Wrappers" class="headerlink" title="App Wrappers"></a>App Wrappers</h2><p>The currently available App Wrappers are for Cordova &amp; Electron. More will be added in the future, to allow you to build a Google Chrome extension or a Progressive Web App, just to name a few.</p>
<p>The CLI wrap command is like this:<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ quasar wrap &lt;wrapper name&gt;</div></pre></td></tr></table></figure></p>
<p>Further reading on the <strong>Cordova</strong> wrapper is available <a href="/guide/cordova-wrapper.html">here</a>.<br>Further reading on the <strong>Electron</strong> wrapper is available <a href="/guide/electron-wrapper.html">here</a>.</p>
<h2 id="Lint-App-Code"><a href="#Lint-App-Code" class="headerlink" title="Lint App Code"></a>Lint App Code</h2><p>ESlint is used to check your ES6 Javascript files.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ quasar lint</div></pre></td></tr></table></figure>
<h2 id="Serve-Static-Content-Folder"><a href="#Serve-Static-Content-Folder" class="headerlink" title="Serve Static-Content Folder"></a>Serve Static-Content Folder</h2><p>You are able to create an ad-hoc web server to serve static-content web files from a folder. Browser sessions are automatically refreshed when content changes. User click/scroll can be synchronized.</p>
<p>This command comes in really handy after building your Quasar App for production. The <code>/dist</code> folder contains files that are meant to be served with a webserver. This is how:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># Serve dist folder</span></div><div class="line"><span class="comment"># (must build app before that or else current folder will be served):</span></div><div class="line">$ quasar serve</div><div class="line"></div><div class="line"><span class="comment"># ..or serve a full or relative path</span></div><div class="line">$ quasar serve dist</div><div class="line">$ quasar serve ./dist</div><div class="line">$ quasar serve /work/quasar-app/dist</div></pre></td></tr></table></figure>
<blockquote>
<p>This command does not rely on Quasar Framework. Any folder with any web content can be served.</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Managing Google Analytics]]></title>
      <url>http://beta.quasar-framework.org/guide/managing-google-analytics.html</url>
      <content type="html"><![CDATA[<p>Getting to know your users and measuring user behavior is an important step in App Development. Unfortunately, it’s take a bit of non-standard work to get Google Analytics to work after wrapping your mobile app with Cordova. Setting up Google Analytics in a pure web application is quite easy, but Cordova somehow prevents pageviews and events from being sent to Google Analytics.</p>
<p>Follow this guide to implement Google Analytics into your Cordova App.</p>
<h2 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h2><blockquote>
<ul>
<li>Make sure all your routes have a name and path parameter specified. Otherwise, they cannot be posted to the <code>ga.logPage</code> function. Please refer to <a href="/guide/router.html">the router docs</a> for more info on routing.</li>
<li>Have Basic knowledge of Google Analytics</li>
</ul>
</blockquote>
<h2 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h2><p>Before we can start implementing Google Analytics into your application, you’ll need an account for <a href="https://analytics.google.com" target="_blank" rel="external">Google Analytics</a> and <a href="https://tagmanager.google.com/" target="_blank" rel="external">Google Tagmanager</a>. So let’s do that first. When you have these accounts, it’s time to configure Tag manager. Follow the steps in this <a href="http://www.multiminds.eu/2016/12/06/google-analytics-tag-manager-ionic-cordova/" target="_blank" rel="external">Multiminds article</a> to do so.</p>
<h2 id="Implementing-this-into-application"><a href="#Implementing-this-into-application" class="headerlink" title="Implementing this into application"></a>Implementing this into application</h2><blockquote>
<p>For this guide, we’ll assume you have a fixed sessionId that you send to Google Analytics. Google Analytics uses a sessionId to distinquish different users from each other. If you want to create an anonymous sessionId, see <a href="https://developers.google.com/analytics/devguides/collection/analyticsjs/cookies-user-id" target="_blank" rel="external">Analytics Documentation on user id</a>.</p>
</blockquote>
<p>Place the Tag Manager snippet into head of your <code>index.html</code> file (if you’ve followed the <a href="http://www.multiminds.eu/2016/12/06/google-analytics-tag-manager-ionic-cordova/" target="_blank" rel="external">Multiminds article</a>, you already have this.) Create a new file in your codebase called <code>analytics.js</code> with the following contents:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line"></div><div class="line">    logEvent(category, action, label, sessionId = <span class="literal">null</span>) &#123;</div><div class="line">        dataLayer.push(&#123;</div><div class="line">            <span class="string">'appEventCategory'</span>: category,</div><div class="line">            <span class="string">'appEventAction'</span>: action,</div><div class="line">            <span class="string">'appEventLabel'</span>: label,</div><div class="line">            <span class="string">'sessionId'</span>: sessionId</div><div class="line">        &#125;);</div><div class="line">        dataLayer.push(&#123; <span class="string">'event'</span>: <span class="string">'appEvent'</span> &#125;);</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    logPage(path, name, userId = <span class="literal">null</span>) &#123;</div><div class="line">        dataLayer.push(&#123;</div><div class="line">            <span class="string">'screenPath'</span>: path,</div><div class="line">            <span class="string">'screenName'</span>: name,</div><div class="line">            <span class="string">'sessionId'</span>: sessionId</div><div class="line">        &#125;);</div><div class="line">        dataLayer.push(&#123; <span class="string">'event'</span>: <span class="string">'appScreenView'</span> &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>To make sure all the pages in your application are automatically posted towards Google Analytics, import the newly created <code>analytics.js</code> file into <code>main.js</code> and add the following in <code>main.js</code>.</p>
<blockquote>
<p>If you are not using Vue-router, you can log clicks manualy by calling the logPage function at any place you like.</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">router.afterEach((to, <span class="keyword">from</span>) =&gt; &#123;</div><div class="line">    ga.logPage(to.path, to.name, sessionId)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>Let’s add some event logging into a component, by calling the <code>logEvent</code> function with the correct parameters. Import the <code>analytics.js</code> in your component as <code>ga</code>.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">methods: &#123;</div><div class="line">    clickRedButton <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        ga.logEvent(<span class="string">"Buttons"</span>, <span class="string">"Click"</span>, <span class="string">"Red Button"</span>, sessionId)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>More information about events can be found in the <a href="https://developers.google.com/analytics/devguides/collection/analyticsjs/events" target="_blank" rel="external">Analytics documentation on events</a>.</p>
</blockquote>
<h2 id="Wrapping-up"><a href="#Wrapping-up" class="headerlink" title="Wrapping up"></a>Wrapping up</h2><p>Now, when you build your application with Cordova and test it out on the emulator.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ quasar build</div><div class="line">$ <span class="built_in">cd</span> cordova</div><div class="line">$ cordova run</div></pre></td></tr></table></figure>
<p>You’ll see the events and pageviews coming in. It usually takes around 5 to 10 seconds for a pageview to be registered in the realtime view.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Opening Your Dev Server to the Public]]></title>
      <url>http://beta.quasar-framework.org/guide/opening-dev-server-to-public.html</url>
      <content type="html"><![CDATA[<p>At some point you may want to show someone else the project you’ve been working on. Fortunately, there is a simple CLI tool to accomplish this. <a href="https://ngrok.com/" target="_blank" rel="external">Ngrok</a> creates a tunnel to your dev server and (by default) generates a hexadecimal internet address on the ngrok server to offer to your clients or anyone special you’d like to show your work to.</p>
<blockquote>
<p><strong>IMPORTANT</strong><br>Opening a dev server to the public constitutes security risks. Be absolutely cautious when using tools like this. This tip <strong>is not</strong> intended for the general public.</p>
<p>When you’ve finished with your demonstration or testing, make sure to stop ngrok. This will prevent any unwanted access of your computer through ngrok.</p>
</blockquote>
<h3 id="Getting-started"><a href="#Getting-started" class="headerlink" title="Getting started"></a>Getting started</h3><ol>
<li><p>Download and install ngrok <a href="https://ngrok.com/download" target="_blank" rel="external">here</a>.<br>(Please note that the ngrok executable file does not need to be placed in or run from inside your cordova folder. When on a mac it’s best to place the ngrok executable file inside <code>/usr/local/bin</code> to be able to run it globally.)</p>
</li>
<li><p>Start your Dev server</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ quasar dev</div></pre></td></tr></table></figure>
</li>
<li><p>Create your ngrok connection</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ ngrok http 80</div><div class="line"><span class="comment"># In case your development server doesn't run on port 80 you need to change the number to the correct port</span></div></pre></td></tr></table></figure>
</li>
<li><p>ngrok shows the url in the command line when it started.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">Tunnel Status                 online</div><div class="line">Version                       2.0/2.0</div><div class="line">Web Interface                 http://127.0.0.1:4040</div><div class="line">Forwarding                    http://92832de0.ngrok.io -&gt; localhost:80</div><div class="line">Forwarding                    https://92832de0.ngrok.io -&gt; localhost:80</div><div class="line"></div><div class="line">Connnections                  ttl     opn     rt1     rt5     p50     p90</div><div class="line">                              0       0       0.00    0.00    0.00    0.00</div></pre></td></tr></table></figure>
</li>
</ol>
<p>Please be careful as the ‘Forwarding’ URL will be accesible to anyone until this connection is closed again.</p>
<h3 id="Inspecting-traffic"><a href="#Inspecting-traffic" class="headerlink" title="Inspecting traffic"></a>Inspecting traffic</h3><p>When running ngrok, visit <code>http://localhost:4040</code> to inspect the traffic.</p>
<p>This tool allows for custom domains, password protection and a lot more. If you require further assistance, please refer to the <a href="https://ngrok.com/docs" target="_blank" rel="external">ngrok docs</a> for more information.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Development with Docker]]></title>
      <url>http://beta.quasar-framework.org/guide/quasar-development-with-docker.html</url>
      <content type="html"><![CDATA[<p>If you’d like to help develop Quasar and you use Docker for your development environment, we offer a <code>docker-compose.yml</code> and a <code>dockerfile</code> to get you started. </p>
<p>Steps to use the <a href="https://hub.docker.com/r/quasarframework/quasar-dev/" target="_blank" rel="external">quasarframework/quasar-dev</a> container:</p>
<ol>
<li><p>At this point, you should be in a clone of the <a href="https://github.com/quasarframework/quasar" target="_blank" rel="external">quasarframework/quasar</a> repo on your local machine and you should have Docker installed and running.</p>
</li>
<li><p>In your shell console of choice, run</p>
<p> <code>docker-compose up -d</code> </p>
<p>This will build and run the Quasar docker container in detached mode.</p>
</li>
<li><p>Once the container is built, enter </p>
<p> <code>docker-compose exec quasar-dev sh</code></p>
</li>
<li><p>You should now be in the <code>/opt/app</code> directory within the container. Since the <code>docker up</code> command and subsequent building of the container also ran <code>npm install</code> for you, using the <code>package.json</code>on your local computer, you now only need to run</p>
<p> <code>npm run dev</code></p>
</li>
</ol>
<p>Have fun programming on Quasar!</p>
<h2 id="Changing-dependencies"><a href="#Changing-dependencies" class="headerlink" title="Changing dependencies"></a>Changing dependencies</h2><p>If you have changed dependencies, (i.e. added a package to <code>package.json</code>) you can rebuild the quasar-dev container with the following command in your local machine’s console (not the exec shell). </p>
<p><code>docker-compose build</code></p>
<p>Theoretically, you could also use <code>npm install &lt;package&gt;</code> in the exec shell, however you’d be adding the new package(s) outside the container’s cached layer, which means subsequent installs will take longer. We recommend adding your dependencies directly in <code>package.json</code> and rebuilding the container. </p>
<p>Please also note, adding dependencies is currently frowned upon. Please check with Razvan in the <a href="http://forum.quasar-framework.org/" target="_blank" rel="external">Quasar forum</a> or on the <a href="https://gitter.im/quasarframework/Lobby" target="_blank" rel="external">Gitter channel</a>, before adding any new dependencies.</p>
<p>That’s it! Hope you enjoy the container. </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Changelog]]></title>
      <url>http://beta.quasar-framework.org/guide/quasar-framework-changelog.html</url>
      <content type="html"><![CDATA[<p>Before upgrading to a newer version of Quasar, please make sure you read the <a href="https://github.com/quasarframework/quasar/releases" target="_blank" rel="external">Release Notes and Changelog</a> that are available on Github.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Play App]]></title>
      <url>http://beta.quasar-framework.org/guide/quasar-play-app.html</url>
      <content type="html"><![CDATA[<p>We have the dev server which offers hot-reload. We can build and test Apps on a desktop machine. If we want to release a native App, we can use emulators directly in the browser (read about debugging methods <a href="/guide/cordova-wrapper.html#Tips-and-Troubleshooting">here</a>). It’s cool. But, what if we want to develop our Apps directly on the phone, to tap and swipe items on it? Wouldn’t it be way cooler to have hot-reload working on a phone too?</p>
<p><strong>Well, now you can.</strong> </p>
<p>Download and install the Quasar Play App (currently available only on the Google Play Store – App Store will follow soon). This App (written with Quasar) will get you working in no time.</p>
<p><a class="playstore" href="https://play.google.com/store/apps/details?id=com.quasarframework.quasarplay&utm_source=global_co&utm_medium=prtnr&utm_content=Mar2515&utm_campaign=PartBadge&pcampaignid=MKT-Other-global-all-co-prtnr-py-PartBadge-Mar2515-1" target="_blank" rel="external"><img alt="Get it on Google Play" src="https://play.google.com/intl/en_us/badges/images/generic/en_badge_web_generic.png"></a></p>
<ol>
<li><p>Make sure your phone and development machine can ping each other. In other words, they must be in the same network.</p>
</li>
<li><p>Start Dev Server</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ quasar dev --play</div></pre></td></tr></table></figure>
<p>Notice the <code>--play</code> parameter. This instructs the Quasar CLI to generate a QR code on your console, which will point Quasar Play to the newly created server.</p>
<blockquote>
<p>You can skip generating a QR code and manually add the development URL (displayed in the console) to Quasar Play app.</p>
</blockquote>
</li>
<li><p>Open up Quasar Play on your phone. Tap on <code>Play URL</code>. Click the FAB button which will pop out two small buttons. Tap on the green one and scan the QR code from your console.</p>
</li>
</ol>
<p>That’s it. You’re done. Wait for your App to load. It should be really fast. You’ll have your App running, as if it replaces Quasar Play.</p>
<blockquote>
<p>You can refresh your App if something goes wrong or close it and go back to Quasar Play at any time. A toolbar on top of the screen will slide down into view if you click on a small <code>+</code> button. To close the toolbar click on the small <code>+</code> button again.</p>
<p><strong>IMPORTANT</strong><br>While playing with your App in Quasar Play, Cordova functionality will currently not be available. This is due to Cordova Javascript code causing a crash in its Java container.</p>
</blockquote>
<p>Give it a try! It will change how you develop your Apps.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Nightly Build]]></title>
      <url>http://beta.quasar-framework.org/guide/quasar-nightly-build.html</url>
      <content type="html"><![CDATA[<p>For those that are adventurous enough, a bleeding edge version of Quasar is available for you to try. Please note that this version <strong>may be unstable and may introduce breaking changes</strong> that are not yet documented.</p>
<p>What you need to do to use it instead of the latest stable Quasar release is to use the <a href="https://github.com/quasarframework/quasar-edge" target="_blank" rel="external">Github repo</a> instead of the NPM name of the package.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">// remove node_modules/quasar-framework <span class="keyword">if</span> it<span class="string">'s there</span></div><div class="line">$ rm -rf node_modules/quasar-framework</div><div class="line"></div><div class="line">// then install edge version:</div><div class="line">$ npm i --save git+https://git@github.com/quasarframework/quasar-edge.git</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Roadmap]]></title>
      <url>http://beta.quasar-framework.org/guide/quasar-roadmap.html</url>
      <content type="html"><![CDATA[<p>Quasar is here to stay and grow. The <a href="https://github.com/quasarframework/quasar/projects/3" target="_blank" rel="external">roadmap is available on Github</a> under Projects. There are also a lot of <a href="https://github.com/quasarframework/quasar/issues?q=is%3Aissue+is%3Aopen+label%3Aproposal" target="_blank" rel="external">small enhancements and new features waiting to be implemented</a>.</p>
<p>We are absolutely thrilled about the future of Quasar and we hope you will be too!</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Quasar Theming]]></title>
      <url>http://beta.quasar-framework.org/guide/quasar-theming.html</url>
      <content type="html"><![CDATA[<p>Every website or mobile app needs a specific design to differentiate from the competition. This is where Quasar Framework excels, because:</p>
<ol>
<li>It offers two themes out of the box: Material and iOS</li>
<li>The two themes can be customized/extended easily from the App code. You can change the primary color, the secondary color, and most of the CSS. Customizing does not mean having multiple CSS files, one overriding properties from the other. No. You’ll have one stylesheet with each CSS property declared only once.</li>
<li>You can create your own theme from scratch.</li>
<li><strong>All themes include a CSS reset (following latest standards) to eliminate quirks between platforms</strong>.</li>
</ol>
<p>Quasar CSS is a blank slate that you can easily customize and modify to fit your brand, while still following the standards of each platform. The best apps in the app stores are fully customized and Quasar makes it easy to do the same with your App.</p>
<p>Quasar is built on top of Stylus, which allows it to set some default styles for your App but makes it extremely easy for you to change the defaults in your App code.</p>
<p>Customizing a theme means overriding Stylus variables which can hold colors, sizes, border types and so on. After reading this intro you can go to <a href="/components/stylus-variables.html">Components &gt; Stylus Variables</a> for a list of all Stylus variables that you can override so you can theme your App.</p>
<h2 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h2><p>Please note the following:</p>
<ol>
<li><p>When building your App or starting the dev server you can only use one theme at a time. You can however start two dev servers on different ports, each server with a theme. This will obviously allow you to see the App with both themes simultaneously.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ quasar dev mat</div><div class="line">$ PORT=3000 quasar dev ios</div></pre></td></tr></table></figure>
</li>
<li><p>By default your App will include the compiled Quasar themes (<code>.css</code> files instead of <code>.styl</code> from <code>node_modules/quasar-framework</code>). The reason is the build speed. This is a section from <code>src/main.js</code> related to importing the theme:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// === DEFAULT / CUSTOM STYLE ===</span></div><div class="line"><span class="comment">// WARNING! always comment out ONE of the two require() calls below.</span></div><div class="line"><span class="comment">// 1. use next line to activate CUSTOM STYLE (./src/themes)</span></div><div class="line"><span class="comment">// require('./themes/app.' + __THEME + '.styl')</span></div><div class="line"><span class="comment">// 2. or, use next line to activate DEFAULT QUASAR STYLE</span></div><div class="line"><span class="built_in">require</span>(<span class="string">'quasar/dist/quasar.'</span> + __THEME + <span class="string">'.css'</span>)</div><div class="line"><span class="comment">// ==============================</span></div></pre></td></tr></table></figure>
<blockquote>
<p>If you want to override Quasar variables, comment the second line containing <code>.css</code> and uncomment the first one ending with <code>.styl</code>. The build speed will be slower. <strong>DO NOT</strong> leave both lines uncommented.</p>
</blockquote>
</li>
</ol>
<h2 id="Structure"><a href="#Structure" class="headerlink" title="Structure"></a>Structure</h2><p><code>src/css</code> folder from a Quasar App will contain the following files:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">src</div><div class="line">└── themes</div><div class="line">    ├── app.ios.styl</div><div class="line">    ├── app.mat.styl</div><div class="line">    ├── app.variables.styl</div><div class="line">    └── quasar.variables.styl</div></pre></td></tr></table></figure>
<p>You will find more documentation and steps in these files.</p>
<table>
<thead>
<tr>
<th>File</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>app.ios.styl</td>
<td>iOS entry point. It includes app.variables.styl and Quasar iOS theme.</td>
</tr>
<tr>
<td>app.mat.styl</td>
<td>Material Design entry point. It includes app.variables.styl and Quasar Material theme.</td>
</tr>
<tr>
<td>app.variables.styl</td>
<td>(Common code for all themes) Place to override Stylus variables which define the primary color, the secondary color, the list border radius and so many properties.. You can easily make good use of Quasar Themes and customize your App so it will have a distinct overall design.</td>
</tr>
<tr>
<td>quasar.variables.styl</td>
<td>This file includes your Stylus overrides and Quasar’s Core Stylus variables so you can use them in your <code>*.vue</code> fiels. Read section below.</td>
</tr>
</tbody>
</table>
<p>The Build System expects just <code>app.ios.styl</code> and <code>app.mat.styl</code> to exist, so feel free to dig in into the <code>src/themes</code> folder to understand how and what is rendered by Stylus and change whatever you like and best suits your needs. Just make sure you have those two files there.</p>
<h2 id="Using-Stylus-variables-in-Vue-files"><a href="#Using-Stylus-variables-in-Vue-files" class="headerlink" title="Using Stylus variables in Vue files"></a>Using Stylus variables in Vue files</h2><p>In your app’s <code>*.vue</code> files you can use the core Quasar Stylus variables (examples - colors: <code>$primary</code>, <code>$red-1</code>, media breakpoints: <code>$breakpoint-md</code>, <code>$breakpoint-md-min</code> and so on).</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Notice lang="stylus" --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"stylus"</span>&gt;</span><span class="undefined"></span></div><div class="line">// "variables" is a Webpack alias (defined in /config/index.js)</div><div class="line">// which points to /src/themes/quasar.variables.styl</div><div class="line">// in your starter kit</div><div class="line">@import '~variables'</div><div class="line"></div><div class="line">div</div><div class="line">  color $red-1</div><div class="line">  background-color $grey-5</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>NOTE:</strong> You must add <code>@import &#39;~variables&#39;</code> within your <code>&lt;style&gt;</code> tags, in order for Quasar to parse any Stylus variables you may add. If you don’t, Quasar will literally pass the variables as text and any theming changes using Stylus variables won’t work.</p>
<h2 id="Theming-Your-App"><a href="#Theming-Your-App" class="headerlink" title="Theming Your App"></a>Theming Your App</h2><p>You can easily theme your App by adding Stylus variable declarations in <code>src/themes/app.variables.styl</code>.</p>
<p>To customize the look and feel of this app, you can override the Stylus variables found in Quasar’s source Stylus files. Setting variables before Quasar’s Stylus will use these variables rather than Quasar’s default Stylus variable values. Stylus variables specific to the themes belong in either the <code>app.ios.styl</code> or <code>app.mat.styl</code> files.</p>
<p>For example, change the primary color of your App:</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line"><span class="variable">$primary</span> = <span class="number">#00ffff</span></div></pre></td></tr></table></figure>
<h3 id="Platform-Specific-Styles"><a href="#Platform-Specific-Styles" class="headerlink" title="Platform Specific Styles"></a>Platform Specific Styles</h3><p>The platform in which your App runs is automatically detected and the <code>&lt;body&gt;</code> tag gets following classes:</p>
<table>
<thead>
<tr>
<th>Body Class Name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>mat</code></td>
<td>Default style; <strong>Material Design theme</strong>; Android platform</td>
</tr>
<tr>
<td><code>ios</code></td>
<td>Apple platform; <strong>iOS theme</strong></td>
</tr>
<tr>
<td><code>desktop</code></td>
<td>App runs on a desktop browser</td>
</tr>
<tr>
<td><code>mobile</code></td>
<td>App runs on a mobile browser</td>
</tr>
<tr>
<td><code>cordova</code></td>
<td>Standalone Mobile App wrapped with Apache Cordova</td>
</tr>
<tr>
<td><code>electron</code></td>
<td>App runs under Electron</td>
</tr>
<tr>
<td><code>touch</code></td>
<td>Touch capable platform</td>
</tr>
<tr>
<td><code>no-touch</code></td>
<td>Touch capability not present</td>
</tr>
<tr>
<td><code>within-iframe</code></td>
<td>For when entire website is under an IFRAME tag</td>
</tr>
</tbody>
</table>
<p>So you can write specific Stylus code for your App like this:</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">body</span></div><div class="line">  &amp;<span class="selector-class">.cordova</span> <span class="selector-class">.tag</span></div><div class="line">    <span class="attribute">color</span> <span class="variable">$primary</span></div><div class="line">  &amp;<span class="selector-class">.desktop</span> <span class="selector-class">.tag</span></div><div class="line">    <span class="attribute">color</span> <span class="variable">$secondary</span></div><div class="line">  &amp;<span class="selector-class">.mobile</span> <span class="selector-class">.tag</span></div><div class="line">    <span class="attribute">color</span> <span class="variable">$tertiary</span></div></pre></td></tr></table></figure>
<blockquote>
<p><strong>Theme Specific CSS</strong><br>Regarding themes, if you take a look at the Structure of Stylus files above, you’ll notice there are two files (<code>app.ios.styl</code> and <code>app.mat.styl</code>). Inject code for the specific theme there after you get the hang of how things stand with those files. It’s best to not clog all themes generated CSS with code specific to a certain theme only.</p>
<p><strong>All your Stylus variables need to be declared before the inclusion of Quasar Framework theme files (from NPM).</strong> If you follow the default structure of files (and be care-free) then inject variable overrides in <em>src/themes/app.variables.styl</em>.</p>
</blockquote>
<h2 id="Stylus-Variables"><a href="#Stylus-Variables" class="headerlink" title="Stylus Variables"></a>Stylus Variables</h2><p>Read a complete list of all <a href="/components/stylus-variables.html">Stylus variables</a> that you can override.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Router]]></title>
      <url>http://beta.quasar-framework.org/guide/router.html</url>
      <content type="html"><![CDATA[<p>Quasar Apps are using by default the <code>vue-router</code> which is the official router for VueJs. It deeply integrates with Vue.js core to make building Single Page Applications with Vue.js a breeze. Features include:</p>
<ul>
<li>Nested route/view mapping</li>
<li>Modular, component-based router configuration</li>
<li>Route params, query, wildcards</li>
<li>View transition effects powered by Vue.js’ transition system</li>
<li>Fine-grained navigation control</li>
<li>Links with automatic active CSS classes</li>
<li>HTML5 history mode or hash mode, with auto-fallback in IE9</li>
<li>Restore scroll position when going back in history mode</li>
</ul>
<p>Get started with the <a href="http://vuejs.github.io/vue-router" target="_blank" rel="external">documentation</a>.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Routes Lazy Loading]]></title>
      <url>http://beta.quasar-framework.org/guide/routes-lazy-loading.html</url>
      <content type="html"><![CDATA[<p>Quasar starter kits are lazy loading all your website/app’s routes by default in order to save bytes sent on the wire when the app is big. Rather than loading ALL routes at start, they are loaded on demand as user navigates to different routes.</p>
<p>When building, you will notice a lot of .js files being generated. One for each route being lazy-loaded. These are called Webpack “chunks”.</p>
<h2 id="Using-lazy-loading"><a href="#Using-lazy-loading" class="headerlink" title="Using lazy loading"></a>Using lazy loading</h2><p>Take a look at <code>/src/router.js</code>. Notice route components are declared using the <code>load()</code> function, which does the code splitting.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// sections from /src/router.js</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">load</span> (<span class="params">component</span>) </span>&#123;</div><div class="line">  <span class="comment">// '@' is aliased to src/components</span></div><div class="line">  <span class="keyword">return</span> () =&gt; System.import(<span class="string">`@/<span class="subst">$&#123;component&#125;</span>.vue`</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</div><div class="line">  <span class="comment">// ...,</span></div><div class="line">  routes: [</div><div class="line">    &#123; path: <span class="string">'/'</span>, component: load(<span class="string">'Hello'</span>) &#125;,</div><div class="line"></div><div class="line">    <span class="comment">// Always leave this last one</span></div><div class="line">    &#123; path: <span class="string">'*'</span>, component: load(<span class="string">'Error404'</span>) &#125; <span class="comment">// Not found</span></div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>IMPORTANT</strong><br>Code splitting is a Webpack feature. Lazy loading a file from a folder will force Webpack to generate a chunk for each file in that folder, regardless of it ever being loaded or not at runtime.<br><br>The explanation is simple: Webpack cannot know at build time which files from that folder will be requested at runtime, so it must ensure that all possibilities work.<br><br>However, Webpack will not generate chunks for subfolders of the specified folder. Use this information when structuring your <code>/src/components</code> folder to speed up build time.</p>
</blockquote>
<h2 id="Avoiding-lazy-loading"><a href="#Avoiding-lazy-loading" class="headerlink" title="Avoiding lazy loading"></a>Avoiding lazy loading</h2><p>Lazy loading is very efficient for big websites/apps with lots of routes/pages. However, the benefits of lazy loading routes when building a small website/app fade away. Making an extra HTTP request for loading a 2-3KB page vue file is more costly than integrating the file in the main chunk.</p>
<p>Let’s learn how to avoid lazy loading a vue file. Take a look again at <code>/src/router.js</code>. Notice the <code>load()</code> function which does code splitting. All you have to do to avoid generating chunks is not use it, and instead import it directly:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// Avoiding generating chunk</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> MyPage <span class="keyword">from</span> <span class="string">'...path.to.vue.file'</span></div><div class="line"></div><div class="line"><span class="comment">// ...</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;</div><div class="line">  <span class="comment">// ....,</span></div><div class="line"></div><div class="line">  routes: [</div><div class="line">    &#123; path: <span class="string">'/'</span>, component: MyPage &#125;,</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RTL Support (Experimental)]]></title>
      <url>http://beta.quasar-framework.org/guide/rtl-support.html</url>
      <content type="html"><![CDATA[<p>RTL (right to left) support is in its very early development stages, <strong>so experimental, not fit for production yet</strong>, with some bugs. Due to lack of time, we ask the community for help. Please contact us on forum/Gitter/email if you are interested in giving a helping hand.</p>
<h2 id="Enabling-experimental-RTL"><a href="#Enabling-experimental-RTL" class="headerlink" title="Enabling experimental RTL"></a>Enabling experimental RTL</h2><p>To enable the currently <strong>experimental RTL</strong>, you need a small trivial change to <code>/src/main.js</code> regarding CSS imports/requires.</p>
<p>This is how default <code>src/main.js</code> top of file looks like:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">/*********************************************</span></div><div class="line"> ** This is how src/main.js currently looks **</div><div class="line"> ********************************************/</div><div class="line"></div><div class="line"><span class="comment">// === DEFAULT / CUSTOM STYLE ===</span></div><div class="line"><span class="comment">// WARNING! always comment out ONE of the two require() calls below.</span></div><div class="line"><span class="comment">// 1. use next line to activate CUSTOM STYLE (./src/themes)</span></div><div class="line"><span class="comment">// require(`./themes/app.$&#123;__THEME&#125;.styl`)</span></div><div class="line"><span class="comment">// 2. or, use next line to activate DEFAULT QUASAR STYLE</span></div><div class="line"><span class="built_in">require</span>(<span class="string">`quasar/dist/quasar.<span class="subst">$&#123;__THEME&#125;</span>.css`</span>)</div><div class="line"><span class="comment">// ==============================</span></div><div class="line"></div><div class="line"><span class="comment">// Uncomment the following lines if you need IE11/Edge support</span></div><div class="line"><span class="comment">// require(`quasar/dist/quasar.ie`)</span></div><div class="line"><span class="comment">// require(`quasar/dist/quasar.ie.$&#123;__THEME&#125;.css`)</span></div></pre></td></tr></table></figure></p>
<p>What you need to do is to comment out all these <code>require()</code> statements. Then, add this:<br><figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">require</span>(<span class="string">'quasar/dist/quasar.'</span> + __THEME + <span class="string">'.rtl.css'</span>)</div><div class="line"></div><div class="line"><span class="comment">// If using IE11/Edge support, then also add this,</span></div><div class="line"><span class="comment">// otherwise ignore following line:</span></div><div class="line"><span class="built_in">require</span>(<span class="string">'quasar/dist/quasar.ie.'</span> + __THEME + <span class="string">'.rtl.css'</span>)</div></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>IMPORTANT</strong><br>Do NOT simultaneously use default CSS requires/imports and the new lines.</p>
</blockquote>
<p>Note that you currently can’t use Quasar Stylus variables with the RTL functionality. This will be added as last step before RTL support will be production ready along with <code>rtl-css-loader</code> for Webpack.</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[v0.14 Upgrade Guide]]></title>
      <url>http://beta.quasar-framework.org/guide/upgrade-guide.html</url>
      <content type="html"><![CDATA[<p>Hi,</p>
<p>While we wait for @rstoenescu to issue a complete guide, here’s a starting point for all of us impatient dudes who want to port a 0.13.x app to 0.14.</p>
<ol>
<li>npm update -g quasar-cli</li>
<li>quasar init ‘default#beta’ FOLDERNAME (will create a new folder with 0.14beta basics)</li>
<li>cd FOLDERNAME</li>
<li>npm i</li>
<li>Manually move your 0.13 code into that folder structure. Repeat step 4 once all your dependencies are set up.</li>
<li><p>Check the beginners intro and the beta docs, and learn about using components and tree-shaking. Also you may want to run this script to find out what Quasar components your app uses:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">find ./src -name *.vue -printf <span class="string">"list=\$(grep -oP \"&lt;\\\\K(q-[^\\\\s&gt;/]+)\" %p | sed -r 's/(-|^)(.)([^-]*)/\\\\U\\\\2\\\\L\\\\3/g; s/^/  /; s/$/,/' | sort | uniq); echo \"\\\n*** %p\\\n\\\nimport &#123;\\\n\$list\\\n&#125; from 'quasar';\\\n\\\ncomponents: &#123;\\\n\$list\\\n&#125;,\\\n\";"</span> | sh</div></pre></td></tr></table></figure>
</li>
<li><p>Go ahead and apply what you learned.</p>
</li>
<li><code>quasar dev</code>: check for any components still missing, adjust imports accordingly, rinse and repeat until your app starts and displays correctly.</li>
</ol>
<p>To include icons you can now skip the respective CDNs and use quasar-extras, like this:<br><code>npm i --save quasar-extras</code>, then use it <a href="http://beta.quasar-framework.org/components/transition.html#Adding-an-Animation-to-the-Bundle">like this</a>.</p>
<p>If you have used animations in your code, take a look at <a href="http://beta.quasar-framework.org/components/transition.html#Adding-an-Animation-to-the-Bundle">this</a>.</p>
<p>Since the beta is still being updated several times daily, before running to github or gitter to report a problem, please make sure you have the LATEST 0.14 version by running:<br><code>npm update quasar-framework</code> from within your app folder (same for quasar-extras).</p>
<h1 id="Starter-kit"><a href="#Starter-kit" class="headerlink" title="Starter kit"></a>Starter kit</h1><h1 id="Importing-components"><a href="#Importing-components" class="headerlink" title="Importing components"></a>Importing components</h1><h1 id="Removed-renamed-components"><a href="#Removed-renamed-components" class="headerlink" title="Removed / renamed components"></a>Removed / renamed components</h1><h1 id="Components-changes"><a href="#Components-changes" class="headerlink" title="Components changes"></a>Components changes</h1><h1 id="Dependencies"><a href="#Dependencies" class="headerlink" title="Dependencies"></a>Dependencies</h1><p>vue, vue-route &amp; optional quasar-extras only</p>
]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>http://beta.quasar-framework.org/search/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
